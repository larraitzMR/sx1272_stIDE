
lora_st.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000164  08004f54  08004f54  00014f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050b8  080050b8  00020028  2**0
                  CONTENTS
  4 .ARM          00000008  080050b8  080050b8  000150b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050c0  080050c0  00020028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050c0  080050c0  000150c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050c4  080050c4  000150c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000028  20000000  080050c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000028  080050f0  00020028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  080050f0  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf23  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000223d  00000000  00000000  0002cf7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f0  00000000  00000000  0002f1b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000800  00000000  00000000  0002faa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017b53  00000000  00000000  000302a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cc5  00000000  00000000  00047dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f388  00000000  00000000  00050ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000dfe48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f4  00000000  00000000  000dfec4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000028 	.word	0x20000028
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004f3c 	.word	0x08004f3c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000002c 	.word	0x2000002c
 80001d4:	08004f3c 	.word	0x08004f3c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2uiz>:
 8000ad4:	004a      	lsls	r2, r1, #1
 8000ad6:	d211      	bcs.n	8000afc <__aeabi_d2uiz+0x28>
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d211      	bcs.n	8000b02 <__aeabi_d2uiz+0x2e>
 8000ade:	d50d      	bpl.n	8000afc <__aeabi_d2uiz+0x28>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d40e      	bmi.n	8000b08 <__aeabi_d2uiz+0x34>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	fa23 f002 	lsr.w	r0, r3, r2
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d102      	bne.n	8000b0e <__aeabi_d2uiz+0x3a>
 8000b08:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0c:	4770      	bx	lr
 8000b0e:	f04f 0000 	mov.w	r0, #0
 8000b12:	4770      	bx	lr

08000b14 <__aeabi_uldivmod>:
 8000b14:	b953      	cbnz	r3, 8000b2c <__aeabi_uldivmod+0x18>
 8000b16:	b94a      	cbnz	r2, 8000b2c <__aeabi_uldivmod+0x18>
 8000b18:	2900      	cmp	r1, #0
 8000b1a:	bf08      	it	eq
 8000b1c:	2800      	cmpeq	r0, #0
 8000b1e:	bf1c      	itt	ne
 8000b20:	f04f 31ff 	movne.w	r1, #4294967295
 8000b24:	f04f 30ff 	movne.w	r0, #4294967295
 8000b28:	f000 b972 	b.w	8000e10 <__aeabi_idiv0>
 8000b2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b34:	f000 f806 	bl	8000b44 <__udivmoddi4>
 8000b38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b40:	b004      	add	sp, #16
 8000b42:	4770      	bx	lr

08000b44 <__udivmoddi4>:
 8000b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b48:	9e08      	ldr	r6, [sp, #32]
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4688      	mov	r8, r1
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d14b      	bne.n	8000bea <__udivmoddi4+0xa6>
 8000b52:	428a      	cmp	r2, r1
 8000b54:	4615      	mov	r5, r2
 8000b56:	d967      	bls.n	8000c28 <__udivmoddi4+0xe4>
 8000b58:	fab2 f282 	clz	r2, r2
 8000b5c:	b14a      	cbz	r2, 8000b72 <__udivmoddi4+0x2e>
 8000b5e:	f1c2 0720 	rsb	r7, r2, #32
 8000b62:	fa01 f302 	lsl.w	r3, r1, r2
 8000b66:	fa20 f707 	lsr.w	r7, r0, r7
 8000b6a:	4095      	lsls	r5, r2
 8000b6c:	ea47 0803 	orr.w	r8, r7, r3
 8000b70:	4094      	lsls	r4, r2
 8000b72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b76:	0c23      	lsrs	r3, r4, #16
 8000b78:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b7c:	fa1f fc85 	uxth.w	ip, r5
 8000b80:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b88:	fb07 f10c 	mul.w	r1, r7, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d909      	bls.n	8000ba4 <__udivmoddi4+0x60>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b96:	f080 811b 	bcs.w	8000dd0 <__udivmoddi4+0x28c>
 8000b9a:	4299      	cmp	r1, r3
 8000b9c:	f240 8118 	bls.w	8000dd0 <__udivmoddi4+0x28c>
 8000ba0:	3f02      	subs	r7, #2
 8000ba2:	442b      	add	r3, r5
 8000ba4:	1a5b      	subs	r3, r3, r1
 8000ba6:	b2a4      	uxth	r4, r4
 8000ba8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bac:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bb4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bb8:	45a4      	cmp	ip, r4
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x8c>
 8000bbc:	192c      	adds	r4, r5, r4
 8000bbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc2:	f080 8107 	bcs.w	8000dd4 <__udivmoddi4+0x290>
 8000bc6:	45a4      	cmp	ip, r4
 8000bc8:	f240 8104 	bls.w	8000dd4 <__udivmoddi4+0x290>
 8000bcc:	3802      	subs	r0, #2
 8000bce:	442c      	add	r4, r5
 8000bd0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bd4:	eba4 040c 	sub.w	r4, r4, ip
 8000bd8:	2700      	movs	r7, #0
 8000bda:	b11e      	cbz	r6, 8000be4 <__udivmoddi4+0xa0>
 8000bdc:	40d4      	lsrs	r4, r2
 8000bde:	2300      	movs	r3, #0
 8000be0:	e9c6 4300 	strd	r4, r3, [r6]
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	428b      	cmp	r3, r1
 8000bec:	d909      	bls.n	8000c02 <__udivmoddi4+0xbe>
 8000bee:	2e00      	cmp	r6, #0
 8000bf0:	f000 80eb 	beq.w	8000dca <__udivmoddi4+0x286>
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	e9c6 0100 	strd	r0, r1, [r6]
 8000bfa:	4638      	mov	r0, r7
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	fab3 f783 	clz	r7, r3
 8000c06:	2f00      	cmp	r7, #0
 8000c08:	d147      	bne.n	8000c9a <__udivmoddi4+0x156>
 8000c0a:	428b      	cmp	r3, r1
 8000c0c:	d302      	bcc.n	8000c14 <__udivmoddi4+0xd0>
 8000c0e:	4282      	cmp	r2, r0
 8000c10:	f200 80fa 	bhi.w	8000e08 <__udivmoddi4+0x2c4>
 8000c14:	1a84      	subs	r4, r0, r2
 8000c16:	eb61 0303 	sbc.w	r3, r1, r3
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	4698      	mov	r8, r3
 8000c1e:	2e00      	cmp	r6, #0
 8000c20:	d0e0      	beq.n	8000be4 <__udivmoddi4+0xa0>
 8000c22:	e9c6 4800 	strd	r4, r8, [r6]
 8000c26:	e7dd      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000c28:	b902      	cbnz	r2, 8000c2c <__udivmoddi4+0xe8>
 8000c2a:	deff      	udf	#255	; 0xff
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	2a00      	cmp	r2, #0
 8000c32:	f040 808f 	bne.w	8000d54 <__udivmoddi4+0x210>
 8000c36:	1b49      	subs	r1, r1, r5
 8000c38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3c:	fa1f f885 	uxth.w	r8, r5
 8000c40:	2701      	movs	r7, #1
 8000c42:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c46:	0c23      	lsrs	r3, r4, #16
 8000c48:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c50:	fb08 f10c 	mul.w	r1, r8, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d907      	bls.n	8000c68 <__udivmoddi4+0x124>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x122>
 8000c60:	4299      	cmp	r1, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2bc>
 8000c66:	4684      	mov	ip, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	b2a3      	uxth	r3, r4
 8000c6c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c70:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c78:	fb08 f800 	mul.w	r8, r8, r0
 8000c7c:	45a0      	cmp	r8, r4
 8000c7e:	d907      	bls.n	8000c90 <__udivmoddi4+0x14c>
 8000c80:	192c      	adds	r4, r5, r4
 8000c82:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c86:	d202      	bcs.n	8000c8e <__udivmoddi4+0x14a>
 8000c88:	45a0      	cmp	r8, r4
 8000c8a:	f200 80b6 	bhi.w	8000dfa <__udivmoddi4+0x2b6>
 8000c8e:	4618      	mov	r0, r3
 8000c90:	eba4 0408 	sub.w	r4, r4, r8
 8000c94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c98:	e79f      	b.n	8000bda <__udivmoddi4+0x96>
 8000c9a:	f1c7 0c20 	rsb	ip, r7, #32
 8000c9e:	40bb      	lsls	r3, r7
 8000ca0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ca4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ca8:	fa01 f407 	lsl.w	r4, r1, r7
 8000cac:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cb8:	4325      	orrs	r5, r4
 8000cba:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cbe:	0c2c      	lsrs	r4, r5, #16
 8000cc0:	fb08 3319 	mls	r3, r8, r9, r3
 8000cc4:	fa1f fa8e 	uxth.w	sl, lr
 8000cc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ccc:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	fa02 f207 	lsl.w	r2, r2, r7
 8000cd6:	fa00 f107 	lsl.w	r1, r0, r7
 8000cda:	d90b      	bls.n	8000cf4 <__udivmoddi4+0x1b0>
 8000cdc:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce4:	f080 8087 	bcs.w	8000df6 <__udivmoddi4+0x2b2>
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	f240 8084 	bls.w	8000df6 <__udivmoddi4+0x2b2>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	4473      	add	r3, lr
 8000cf4:	1b1b      	subs	r3, r3, r4
 8000cf6:	b2ad      	uxth	r5, r5
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3310 	mls	r3, r8, r0, r3
 8000d00:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d04:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d08:	45a2      	cmp	sl, r4
 8000d0a:	d908      	bls.n	8000d1e <__udivmoddi4+0x1da>
 8000d0c:	eb1e 0404 	adds.w	r4, lr, r4
 8000d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d14:	d26b      	bcs.n	8000dee <__udivmoddi4+0x2aa>
 8000d16:	45a2      	cmp	sl, r4
 8000d18:	d969      	bls.n	8000dee <__udivmoddi4+0x2aa>
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	4474      	add	r4, lr
 8000d1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d22:	fba0 8902 	umull	r8, r9, r0, r2
 8000d26:	eba4 040a 	sub.w	r4, r4, sl
 8000d2a:	454c      	cmp	r4, r9
 8000d2c:	46c2      	mov	sl, r8
 8000d2e:	464b      	mov	r3, r9
 8000d30:	d354      	bcc.n	8000ddc <__udivmoddi4+0x298>
 8000d32:	d051      	beq.n	8000dd8 <__udivmoddi4+0x294>
 8000d34:	2e00      	cmp	r6, #0
 8000d36:	d069      	beq.n	8000e0c <__udivmoddi4+0x2c8>
 8000d38:	ebb1 050a 	subs.w	r5, r1, sl
 8000d3c:	eb64 0403 	sbc.w	r4, r4, r3
 8000d40:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d44:	40fd      	lsrs	r5, r7
 8000d46:	40fc      	lsrs	r4, r7
 8000d48:	ea4c 0505 	orr.w	r5, ip, r5
 8000d4c:	e9c6 5400 	strd	r5, r4, [r6]
 8000d50:	2700      	movs	r7, #0
 8000d52:	e747      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000d54:	f1c2 0320 	rsb	r3, r2, #32
 8000d58:	fa20 f703 	lsr.w	r7, r0, r3
 8000d5c:	4095      	lsls	r5, r2
 8000d5e:	fa01 f002 	lsl.w	r0, r1, r2
 8000d62:	fa21 f303 	lsr.w	r3, r1, r3
 8000d66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d6a:	4338      	orrs	r0, r7
 8000d6c:	0c01      	lsrs	r1, r0, #16
 8000d6e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d72:	fa1f f885 	uxth.w	r8, r5
 8000d76:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7e:	fb07 f308 	mul.w	r3, r7, r8
 8000d82:	428b      	cmp	r3, r1
 8000d84:	fa04 f402 	lsl.w	r4, r4, r2
 8000d88:	d907      	bls.n	8000d9a <__udivmoddi4+0x256>
 8000d8a:	1869      	adds	r1, r5, r1
 8000d8c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d90:	d22f      	bcs.n	8000df2 <__udivmoddi4+0x2ae>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d92d      	bls.n	8000df2 <__udivmoddi4+0x2ae>
 8000d96:	3f02      	subs	r7, #2
 8000d98:	4429      	add	r1, r5
 8000d9a:	1acb      	subs	r3, r1, r3
 8000d9c:	b281      	uxth	r1, r0
 8000d9e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000da2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000da6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000daa:	fb00 f308 	mul.w	r3, r0, r8
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d907      	bls.n	8000dc2 <__udivmoddi4+0x27e>
 8000db2:	1869      	adds	r1, r5, r1
 8000db4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000db8:	d217      	bcs.n	8000dea <__udivmoddi4+0x2a6>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	d915      	bls.n	8000dea <__udivmoddi4+0x2a6>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4429      	add	r1, r5
 8000dc2:	1ac9      	subs	r1, r1, r3
 8000dc4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dc8:	e73b      	b.n	8000c42 <__udivmoddi4+0xfe>
 8000dca:	4637      	mov	r7, r6
 8000dcc:	4630      	mov	r0, r6
 8000dce:	e709      	b.n	8000be4 <__udivmoddi4+0xa0>
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	e6e7      	b.n	8000ba4 <__udivmoddi4+0x60>
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	e6fb      	b.n	8000bd0 <__udivmoddi4+0x8c>
 8000dd8:	4541      	cmp	r1, r8
 8000dda:	d2ab      	bcs.n	8000d34 <__udivmoddi4+0x1f0>
 8000ddc:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de0:	eb69 020e 	sbc.w	r2, r9, lr
 8000de4:	3801      	subs	r0, #1
 8000de6:	4613      	mov	r3, r2
 8000de8:	e7a4      	b.n	8000d34 <__udivmoddi4+0x1f0>
 8000dea:	4660      	mov	r0, ip
 8000dec:	e7e9      	b.n	8000dc2 <__udivmoddi4+0x27e>
 8000dee:	4618      	mov	r0, r3
 8000df0:	e795      	b.n	8000d1e <__udivmoddi4+0x1da>
 8000df2:	4667      	mov	r7, ip
 8000df4:	e7d1      	b.n	8000d9a <__udivmoddi4+0x256>
 8000df6:	4681      	mov	r9, r0
 8000df8:	e77c      	b.n	8000cf4 <__udivmoddi4+0x1b0>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	442c      	add	r4, r5
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0x14c>
 8000e00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e04:	442b      	add	r3, r5
 8000e06:	e72f      	b.n	8000c68 <__udivmoddi4+0x124>
 8000e08:	4638      	mov	r0, r7
 8000e0a:	e708      	b.n	8000c1e <__udivmoddi4+0xda>
 8000e0c:	4637      	mov	r7, r6
 8000e0e:	e6e9      	b.n	8000be4 <__udivmoddi4+0xa0>

08000e10 <__aeabi_idiv0>:
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop

08000e14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e18:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0d      	ldr	r2, [pc, #52]	; (8000e54 <HAL_Init+0x40>)
 8000e1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e24:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a0a      	ldr	r2, [pc, #40]	; (8000e54 <HAL_Init+0x40>)
 8000e2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e30:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <HAL_Init+0x40>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x40>)
 8000e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e3c:	2003      	movs	r0, #3
 8000e3e:	f000 f90d 	bl	800105c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e42:	2000      	movs	r0, #0
 8000e44:	f000 f808 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e48:	f003 fe48 	bl	8004adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40023c00 	.word	0x40023c00

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_InitTick+0x54>)
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	4b12      	ldr	r3, [pc, #72]	; (8000eb0 <HAL_InitTick+0x58>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e76:	4618      	mov	r0, r3
 8000e78:	f000 f917 	bl	80010aa <HAL_SYSTICK_Config>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e00e      	b.n	8000ea4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2b0f      	cmp	r3, #15
 8000e8a:	d80a      	bhi.n	8000ea2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	6879      	ldr	r1, [r7, #4]
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	f000 f8ed 	bl	8001072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e98:	4a06      	ldr	r2, [pc, #24]	; (8000eb4 <HAL_InitTick+0x5c>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	e000      	b.n	8000ea4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	3708      	adds	r7, #8
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	20000024 	.word	0x20000024
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	20000000 	.word	0x20000000

08000eb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ebc:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <HAL_IncTick+0x20>)
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_IncTick+0x24>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4413      	add	r3, r2
 8000ec8:	4a04      	ldr	r2, [pc, #16]	; (8000edc <HAL_IncTick+0x24>)
 8000eca:	6013      	str	r3, [r2, #0]
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop
 8000ed8:	20000004 	.word	0x20000004
 8000edc:	2000016c 	.word	0x2000016c

08000ee0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee4:	4b03      	ldr	r3, [pc, #12]	; (8000ef4 <HAL_GetTick+0x14>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	2000016c 	.word	0x2000016c

08000ef8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f003 0307 	and.w	r3, r3, #7
 8000f06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f0e:	68ba      	ldr	r2, [r7, #8]
 8000f10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f14:	4013      	ands	r3, r2
 8000f16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2a:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	60d3      	str	r3, [r2, #12]
}
 8000f30:	bf00      	nop
 8000f32:	3714      	adds	r7, #20
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f44:	4b04      	ldr	r3, [pc, #16]	; (8000f58 <__NVIC_GetPriorityGrouping+0x18>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	0a1b      	lsrs	r3, r3, #8
 8000f4a:	f003 0307 	and.w	r3, r3, #7
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	db0a      	blt.n	8000f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	490c      	ldr	r1, [pc, #48]	; (8000fa8 <__NVIC_SetPriority+0x4c>)
 8000f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7a:	0112      	lsls	r2, r2, #4
 8000f7c:	b2d2      	uxtb	r2, r2
 8000f7e:	440b      	add	r3, r1
 8000f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f84:	e00a      	b.n	8000f9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	b2da      	uxtb	r2, r3
 8000f8a:	4908      	ldr	r1, [pc, #32]	; (8000fac <__NVIC_SetPriority+0x50>)
 8000f8c:	79fb      	ldrb	r3, [r7, #7]
 8000f8e:	f003 030f 	and.w	r3, r3, #15
 8000f92:	3b04      	subs	r3, #4
 8000f94:	0112      	lsls	r2, r2, #4
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	440b      	add	r3, r1
 8000f9a:	761a      	strb	r2, [r3, #24]
}
 8000f9c:	bf00      	nop
 8000f9e:	370c      	adds	r7, #12
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100
 8000fac:	e000ed00 	.word	0xe000ed00

08000fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f1c3 0307 	rsb	r3, r3, #7
 8000fca:	2b04      	cmp	r3, #4
 8000fcc:	bf28      	it	cs
 8000fce:	2304      	movcs	r3, #4
 8000fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	2b06      	cmp	r3, #6
 8000fd8:	d902      	bls.n	8000fe0 <NVIC_EncodePriority+0x30>
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3b03      	subs	r3, #3
 8000fde:	e000      	b.n	8000fe2 <NVIC_EncodePriority+0x32>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe8:	69bb      	ldr	r3, [r7, #24]
 8000fea:	fa02 f303 	lsl.w	r3, r2, r3
 8000fee:	43da      	mvns	r2, r3
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	401a      	ands	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8001002:	43d9      	mvns	r1, r3
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001008:	4313      	orrs	r3, r2
         );
}
 800100a:	4618      	mov	r0, r3
 800100c:	3724      	adds	r7, #36	; 0x24
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
	...

08001018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3b01      	subs	r3, #1
 8001024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001028:	d301      	bcc.n	800102e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800102a:	2301      	movs	r3, #1
 800102c:	e00f      	b.n	800104e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800102e:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <SysTick_Config+0x40>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001036:	210f      	movs	r1, #15
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f7ff ff8e 	bl	8000f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001040:	4b05      	ldr	r3, [pc, #20]	; (8001058 <SysTick_Config+0x40>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001046:	4b04      	ldr	r3, [pc, #16]	; (8001058 <SysTick_Config+0x40>)
 8001048:	2207      	movs	r2, #7
 800104a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	e000e010 	.word	0xe000e010

0800105c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001064:	6878      	ldr	r0, [r7, #4]
 8001066:	f7ff ff47 	bl	8000ef8 <__NVIC_SetPriorityGrouping>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}

08001072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001072:	b580      	push	{r7, lr}
 8001074:	b086      	sub	sp, #24
 8001076:	af00      	add	r7, sp, #0
 8001078:	4603      	mov	r3, r0
 800107a:	60b9      	str	r1, [r7, #8]
 800107c:	607a      	str	r2, [r7, #4]
 800107e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001080:	2300      	movs	r3, #0
 8001082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001084:	f7ff ff5c 	bl	8000f40 <__NVIC_GetPriorityGrouping>
 8001088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68b9      	ldr	r1, [r7, #8]
 800108e:	6978      	ldr	r0, [r7, #20]
 8001090:	f7ff ff8e 	bl	8000fb0 <NVIC_EncodePriority>
 8001094:	4602      	mov	r2, r0
 8001096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff5d 	bl	8000f5c <__NVIC_SetPriority>
}
 80010a2:	bf00      	nop
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffb0 	bl	8001018 <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b083      	sub	sp, #12
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]
 80010ce:	4613      	mov	r3, r2
 80010d0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d2:	787b      	ldrb	r3, [r7, #1]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d003      	beq.n	80010e0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d8:	887a      	ldrh	r2, [r7, #2]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010de:	e003      	b.n	80010e8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	041a      	lsls	r2, r3, #16
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	619a      	str	r2, [r3, #24]
}
 80010e8:	bf00      	nop
 80010ea:	370c      	adds	r7, #12
 80010ec:	46bd      	mov	sp, r7
 80010ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f2:	4770      	bx	lr

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e22d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d075      	beq.n	80011fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001112:	4ba3      	ldr	r3, [pc, #652]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b04      	cmp	r3, #4
 800111c:	d00c      	beq.n	8001138 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4ba0      	ldr	r3, [pc, #640]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001126:	2b08      	cmp	r3, #8
 8001128:	d112      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b9d      	ldr	r3, [pc, #628]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001132:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001136:	d10b      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4b99      	ldr	r3, [pc, #612]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d05b      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d157      	bne.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e208      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x74>
 800115a:	4b91      	ldr	r3, [pc, #580]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a90      	ldr	r2, [pc, #576]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x98>
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a8a      	ldr	r2, [pc, #552]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b88      	ldr	r3, [pc, #544]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a87      	ldr	r2, [pc, #540]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 800118c:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a83      	ldr	r2, [pc, #524]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a80      	ldr	r2, [pc, #512]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fe98 	bl	8000ee0 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fe94 	bl	8000ee0 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	; 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e1cd      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b76      	ldr	r3, [pc, #472]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xc0>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fe84 	bl	8000ee0 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fe80 	bl	8000ee0 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	; 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1b9      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b6c      	ldr	r3, [pc, #432]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0xe8>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800120a:	4b65      	ldr	r3, [pc, #404]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b62      	ldr	r3, [pc, #392]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b5f      	ldr	r3, [pc, #380]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b5c      	ldr	r3, [pc, #368]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e18d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4952      	ldr	r1, [pc, #328]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff fe39 	bl	8000ee0 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fe35 	bl	8000ee0 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e16e      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b46      	ldr	r3, [pc, #280]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b43      	ldr	r3, [pc, #268]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4940      	ldr	r1, [pc, #256]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <HAL_RCC_OscConfig+0x2b0>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fe18 	bl	8000ee0 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fe14 	bl	8000ee0 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e14d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d030      	beq.n	8001340 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d016      	beq.n	8001314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b30      	ldr	r3, [pc, #192]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fdf8 	bl	8000ee0 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fdf4 	bl	8000ee0 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e12d      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x200>
 8001312:	e015      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b24      	ldr	r3, [pc, #144]	; (80013a8 <HAL_RCC_OscConfig+0x2b4>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fde1 	bl	8000ee0 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fddd 	bl	8000ee0 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e116      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001336:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f0      	bne.n	8001322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0304 	and.w	r3, r3, #4
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 80a0 	beq.w	800148e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d10f      	bne.n	800137e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	4a0e      	ldr	r2, [pc, #56]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	6413      	str	r3, [r2, #64]	; 0x40
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <HAL_RCC_OscConfig+0x2ac>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800137a:	2301      	movs	r3, #1
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b0b      	ldr	r3, [pc, #44]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001386:	2b00      	cmp	r3, #0
 8001388:	d121      	bne.n	80013ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_RCC_OscConfig+0x2b8>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001396:	f7ff fda3 	bl	8000ee0 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800139c:	e011      	b.n	80013c2 <HAL_RCC_OscConfig+0x2ce>
 800139e:	bf00      	nop
 80013a0:	40023800 	.word	0x40023800
 80013a4:	42470000 	.word	0x42470000
 80013a8:	42470e80 	.word	0x42470e80
 80013ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013b0:	f7ff fd96 	bl	8000ee0 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e0cf      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013c2:	4b6a      	ldr	r3, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x478>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d106      	bne.n	80013e4 <HAL_RCC_OscConfig+0x2f0>
 80013d6:	4b66      	ldr	r3, [pc, #408]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013da:	4a65      	ldr	r2, [pc, #404]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6713      	str	r3, [r2, #112]	; 0x70
 80013e2:	e01c      	b.n	800141e <HAL_RCC_OscConfig+0x32a>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x312>
 80013ec:	4b60      	ldr	r3, [pc, #384]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f0:	4a5f      	ldr	r2, [pc, #380]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013f2:	f043 0304 	orr.w	r3, r3, #4
 80013f6:	6713      	str	r3, [r2, #112]	; 0x70
 80013f8:	4b5d      	ldr	r3, [pc, #372]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013fc:	4a5c      	ldr	r2, [pc, #368]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80013fe:	f043 0301 	orr.w	r3, r3, #1
 8001402:	6713      	str	r3, [r2, #112]	; 0x70
 8001404:	e00b      	b.n	800141e <HAL_RCC_OscConfig+0x32a>
 8001406:	4b5a      	ldr	r3, [pc, #360]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140a:	4a59      	ldr	r2, [pc, #356]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6713      	str	r3, [r2, #112]	; 0x70
 8001412:	4b57      	ldr	r3, [pc, #348]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001416:	4a56      	ldr	r2, [pc, #344]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001418:	f023 0304 	bic.w	r3, r3, #4
 800141c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d015      	beq.n	8001452 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001426:	f7ff fd5b 	bl	8000ee0 <HAL_GetTick>
 800142a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e00a      	b.n	8001444 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fd57 	bl	8000ee0 <HAL_GetTick>
 8001432:	4602      	mov	r2, r0
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	f241 3288 	movw	r2, #5000	; 0x1388
 800143c:	4293      	cmp	r3, r2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e08e      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001444:	4b4a      	ldr	r3, [pc, #296]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001448:	f003 0302 	and.w	r3, r3, #2
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0ee      	beq.n	800142e <HAL_RCC_OscConfig+0x33a>
 8001450:	e014      	b.n	800147c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001452:	f7ff fd45 	bl	8000ee0 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001458:	e00a      	b.n	8001470 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800145a:	f7ff fd41 	bl	8000ee0 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f241 3288 	movw	r2, #5000	; 0x1388
 8001468:	4293      	cmp	r3, r2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e078      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001470:	4b3f      	ldr	r3, [pc, #252]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	f003 0302 	and.w	r3, r3, #2
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ee      	bne.n	800145a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800147c:	7dfb      	ldrb	r3, [r7, #23]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001482:	4b3b      	ldr	r3, [pc, #236]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a3a      	ldr	r2, [pc, #232]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001488:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d064      	beq.n	8001560 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001496:	4b36      	ldr	r3, [pc, #216]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	f003 030c 	and.w	r3, r3, #12
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d05c      	beq.n	800155c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d141      	bne.n	800152e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014aa:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_RCC_OscConfig+0x480>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fd16 	bl	8000ee0 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b8:	f7ff fd12 	bl	8000ee0 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e04b      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ca:	4b29      	ldr	r3, [pc, #164]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a1b      	ldr	r3, [r3, #32]
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	019b      	lsls	r3, r3, #6
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ec:	085b      	lsrs	r3, r3, #1
 80014ee:	3b01      	subs	r3, #1
 80014f0:	041b      	lsls	r3, r3, #16
 80014f2:	431a      	orrs	r2, r3
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f8:	061b      	lsls	r3, r3, #24
 80014fa:	491d      	ldr	r1, [pc, #116]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 80014fc:	4313      	orrs	r3, r2
 80014fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001500:	4b1c      	ldr	r3, [pc, #112]	; (8001574 <HAL_RCC_OscConfig+0x480>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001506:	f7ff fceb 	bl	8000ee0 <HAL_GetTick>
 800150a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150c:	e008      	b.n	8001520 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800150e:	f7ff fce7 	bl	8000ee0 <HAL_GetTick>
 8001512:	4602      	mov	r2, r0
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	2b02      	cmp	r3, #2
 800151a:	d901      	bls.n	8001520 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800151c:	2303      	movs	r3, #3
 800151e:	e020      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001520:	4b13      	ldr	r3, [pc, #76]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d0f0      	beq.n	800150e <HAL_RCC_OscConfig+0x41a>
 800152c:	e018      	b.n	8001560 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152e:	4b11      	ldr	r3, [pc, #68]	; (8001574 <HAL_RCC_OscConfig+0x480>)
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fcd4 	bl	8000ee0 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153c:	f7ff fcd0 	bl	8000ee0 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e009      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_OscConfig+0x47c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0x448>
 800155a:	e001      	b.n	8001560 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e000      	b.n	8001562 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40007000 	.word	0x40007000
 8001570:	40023800 	.word	0x40023800
 8001574:	42470060 	.word	0x42470060

08001578 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d101      	bne.n	800158c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e0ca      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800158c:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 030f 	and.w	r3, r3, #15
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d90c      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b62      	ldr	r3, [pc, #392]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 030f 	and.w	r3, r3, #15
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0b6      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d020      	beq.n	8001602 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0304 	and.w	r3, r3, #4
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a57      	ldr	r2, [pc, #348]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0308 	and.w	r3, r3, #8
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d005      	beq.n	80015f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e4:	4b52      	ldr	r3, [pc, #328]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	4a51      	ldr	r2, [pc, #324]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015f0:	4b4f      	ldr	r3, [pc, #316]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015f2:	689b      	ldr	r3, [r3, #8]
 80015f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	494c      	ldr	r1, [pc, #304]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80015fe:	4313      	orrs	r3, r2
 8001600:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d044      	beq.n	8001698 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d107      	bne.n	8001626 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001616:	4b46      	ldr	r3, [pc, #280]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d119      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e07d      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b02      	cmp	r3, #2
 800162c:	d003      	beq.n	8001636 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001632:	2b03      	cmp	r3, #3
 8001634:	d107      	bne.n	8001646 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001636:	4b3e      	ldr	r3, [pc, #248]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e06d      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001646:	4b3a      	ldr	r3, [pc, #232]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e065      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001656:	4b36      	ldr	r3, [pc, #216]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 0203 	bic.w	r2, r3, #3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4933      	ldr	r1, [pc, #204]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001668:	f7ff fc3a 	bl	8000ee0 <HAL_GetTick>
 800166c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	e00a      	b.n	8001686 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001670:	f7ff fc36 	bl	8000ee0 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	f241 3288 	movw	r2, #5000	; 0x1388
 800167e:	4293      	cmp	r3, r2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e04d      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001686:	4b2a      	ldr	r3, [pc, #168]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 020c 	and.w	r2, r3, #12
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	429a      	cmp	r2, r3
 8001696:	d1eb      	bne.n	8001670 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001698:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	d20c      	bcs.n	80016c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a6:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	b2d2      	uxtb	r2, r2
 80016ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ae:	4b1f      	ldr	r3, [pc, #124]	; (800172c <HAL_RCC_ClockConfig+0x1b4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 030f 	and.w	r3, r3, #15
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d001      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e030      	b.n	8001722 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d008      	beq.n	80016de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016cc:	4b18      	ldr	r3, [pc, #96]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016ce:	689b      	ldr	r3, [r3, #8]
 80016d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	4915      	ldr	r1, [pc, #84]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016da:	4313      	orrs	r3, r2
 80016dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d009      	beq.n	80016fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ea:	4b11      	ldr	r3, [pc, #68]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	691b      	ldr	r3, [r3, #16]
 80016f6:	00db      	lsls	r3, r3, #3
 80016f8:	490d      	ldr	r1, [pc, #52]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016fe:	f000 f81d 	bl	800173c <HAL_RCC_GetSysClockFreq>
 8001702:	4601      	mov	r1, r0
 8001704:	4b0a      	ldr	r3, [pc, #40]	; (8001730 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	091b      	lsrs	r3, r3, #4
 800170a:	f003 030f 	and.w	r3, r3, #15
 800170e:	4a09      	ldr	r2, [pc, #36]	; (8001734 <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	5cd3      	ldrb	r3, [r2, r3]
 8001712:	fa21 f303 	lsr.w	r3, r1, r3
 8001716:	4a08      	ldr	r2, [pc, #32]	; (8001738 <HAL_RCC_ClockConfig+0x1c0>)
 8001718:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800171a:	2000      	movs	r0, #0
 800171c:	f7ff fb9c 	bl	8000e58 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	080050a8 	.word	0x080050a8
 8001738:	20000024 	.word	0x20000024

0800173c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	2300      	movs	r3, #0
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001752:	4b50      	ldr	r3, [pc, #320]	; (8001894 <HAL_RCC_GetSysClockFreq+0x158>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f003 030c 	and.w	r3, r3, #12
 800175a:	2b04      	cmp	r3, #4
 800175c:	d007      	beq.n	800176e <HAL_RCC_GetSysClockFreq+0x32>
 800175e:	2b08      	cmp	r3, #8
 8001760:	d008      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x38>
 8001762:	2b00      	cmp	r3, #0
 8001764:	f040 808d 	bne.w	8001882 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001768:	4b4b      	ldr	r3, [pc, #300]	; (8001898 <HAL_RCC_GetSysClockFreq+0x15c>)
 800176a:	60bb      	str	r3, [r7, #8]
       break;
 800176c:	e08c      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800176e:	4b4b      	ldr	r3, [pc, #300]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 8001770:	60bb      	str	r3, [r7, #8]
      break;
 8001772:	e089      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001774:	4b47      	ldr	r3, [pc, #284]	; (8001894 <HAL_RCC_GetSysClockFreq+0x158>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800177c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800177e:	4b45      	ldr	r3, [pc, #276]	; (8001894 <HAL_RCC_GetSysClockFreq+0x158>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d023      	beq.n	80017d2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800178a:	4b42      	ldr	r3, [pc, #264]	; (8001894 <HAL_RCC_GetSysClockFreq+0x158>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	099b      	lsrs	r3, r3, #6
 8001790:	f04f 0400 	mov.w	r4, #0
 8001794:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	ea03 0501 	and.w	r5, r3, r1
 80017a0:	ea04 0602 	and.w	r6, r4, r2
 80017a4:	4a3d      	ldr	r2, [pc, #244]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 80017a6:	fb02 f106 	mul.w	r1, r2, r6
 80017aa:	2200      	movs	r2, #0
 80017ac:	fb02 f205 	mul.w	r2, r2, r5
 80017b0:	440a      	add	r2, r1
 80017b2:	493a      	ldr	r1, [pc, #232]	; (800189c <HAL_RCC_GetSysClockFreq+0x160>)
 80017b4:	fba5 0101 	umull	r0, r1, r5, r1
 80017b8:	1853      	adds	r3, r2, r1
 80017ba:	4619      	mov	r1, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f04f 0400 	mov.w	r4, #0
 80017c2:	461a      	mov	r2, r3
 80017c4:	4623      	mov	r3, r4
 80017c6:	f7ff f9a5 	bl	8000b14 <__aeabi_uldivmod>
 80017ca:	4603      	mov	r3, r0
 80017cc:	460c      	mov	r4, r1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e049      	b.n	8001866 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d2:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_RCC_GetSysClockFreq+0x158>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	099b      	lsrs	r3, r3, #6
 80017d8:	f04f 0400 	mov.w	r4, #0
 80017dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	ea03 0501 	and.w	r5, r3, r1
 80017e8:	ea04 0602 	and.w	r6, r4, r2
 80017ec:	4629      	mov	r1, r5
 80017ee:	4632      	mov	r2, r6
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	f04f 0400 	mov.w	r4, #0
 80017f8:	0154      	lsls	r4, r2, #5
 80017fa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80017fe:	014b      	lsls	r3, r1, #5
 8001800:	4619      	mov	r1, r3
 8001802:	4622      	mov	r2, r4
 8001804:	1b49      	subs	r1, r1, r5
 8001806:	eb62 0206 	sbc.w	r2, r2, r6
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	0194      	lsls	r4, r2, #6
 8001814:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001818:	018b      	lsls	r3, r1, #6
 800181a:	1a5b      	subs	r3, r3, r1
 800181c:	eb64 0402 	sbc.w	r4, r4, r2
 8001820:	f04f 0100 	mov.w	r1, #0
 8001824:	f04f 0200 	mov.w	r2, #0
 8001828:	00e2      	lsls	r2, r4, #3
 800182a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800182e:	00d9      	lsls	r1, r3, #3
 8001830:	460b      	mov	r3, r1
 8001832:	4614      	mov	r4, r2
 8001834:	195b      	adds	r3, r3, r5
 8001836:	eb44 0406 	adc.w	r4, r4, r6
 800183a:	f04f 0100 	mov.w	r1, #0
 800183e:	f04f 0200 	mov.w	r2, #0
 8001842:	02a2      	lsls	r2, r4, #10
 8001844:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001848:	0299      	lsls	r1, r3, #10
 800184a:	460b      	mov	r3, r1
 800184c:	4614      	mov	r4, r2
 800184e:	4618      	mov	r0, r3
 8001850:	4621      	mov	r1, r4
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f04f 0400 	mov.w	r4, #0
 8001858:	461a      	mov	r2, r3
 800185a:	4623      	mov	r3, r4
 800185c:	f7ff f95a 	bl	8000b14 <__aeabi_uldivmod>
 8001860:	4603      	mov	r3, r0
 8001862:	460c      	mov	r4, r1
 8001864:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001866:	4b0b      	ldr	r3, [pc, #44]	; (8001894 <HAL_RCC_GetSysClockFreq+0x158>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	0c1b      	lsrs	r3, r3, #16
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	3301      	adds	r3, #1
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	60bb      	str	r3, [r7, #8]
      break;
 8001880:	e002      	b.n	8001888 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001882:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001884:	60bb      	str	r3, [r7, #8]
      break;
 8001886:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001888:	68bb      	ldr	r3, [r7, #8]
}
 800188a:	4618      	mov	r0, r3
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001892:	bf00      	nop
 8001894:	40023800 	.word	0x40023800
 8001898:	00f42400 	.word	0x00f42400
 800189c:	017d7840 	.word	0x017d7840

080018a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b088      	sub	sp, #32
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	603b      	str	r3, [r7, #0]
 80018ac:	4613      	mov	r3, r2
 80018ae:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_SPI_Transmit+0x22>
 80018be:	2302      	movs	r3, #2
 80018c0:	e11e      	b.n	8001b00 <HAL_SPI_Transmit+0x260>
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80018ca:	f7ff fb09 	bl	8000ee0 <HAL_GetTick>
 80018ce:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d002      	beq.n	80018e6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80018e0:	2302      	movs	r3, #2
 80018e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018e4:	e103      	b.n	8001aee <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d002      	beq.n	80018f2 <HAL_SPI_Transmit+0x52>
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d102      	bne.n	80018f8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80018f6:	e0fa      	b.n	8001aee <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2203      	movs	r2, #3
 80018fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	2200      	movs	r2, #0
 8001904:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	68ba      	ldr	r2, [r7, #8]
 800190a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	88fa      	ldrh	r2, [r7, #6]
 8001916:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2200      	movs	r2, #0
 8001928:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2200      	movs	r2, #0
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800193e:	d107      	bne.n	8001950 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800194e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195a:	2b40      	cmp	r3, #64	; 0x40
 800195c:	d007      	beq.n	800196e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800196c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001976:	d14b      	bne.n	8001a10 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <HAL_SPI_Transmit+0xe6>
 8001980:	8afb      	ldrh	r3, [r7, #22]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d13e      	bne.n	8001a04 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	881a      	ldrh	r2, [r3, #0]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	1c9a      	adds	r2, r3, #2
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	3b01      	subs	r3, #1
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80019aa:	e02b      	b.n	8001a04 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d112      	bne.n	80019e0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	881a      	ldrh	r2, [r3, #0]
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	1c9a      	adds	r2, r3, #2
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b01      	subs	r3, #1
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80019de:	e011      	b.n	8001a04 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80019e0:	f7ff fa7e 	bl	8000ee0 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	69bb      	ldr	r3, [r7, #24]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d803      	bhi.n	80019f8 <HAL_SPI_Transmit+0x158>
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019f6:	d102      	bne.n	80019fe <HAL_SPI_Transmit+0x15e>
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d102      	bne.n	8001a04 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a02:	e074      	b.n	8001aee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d1ce      	bne.n	80019ac <HAL_SPI_Transmit+0x10c>
 8001a0e:	e04c      	b.n	8001aaa <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <HAL_SPI_Transmit+0x17e>
 8001a18:	8afb      	ldrh	r3, [r7, #22]
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d140      	bne.n	8001aa0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	330c      	adds	r3, #12
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001a44:	e02c      	b.n	8001aa0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f003 0302 	and.w	r3, r3, #2
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d113      	bne.n	8001a7c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	330c      	adds	r3, #12
 8001a5e:	7812      	ldrb	r2, [r2, #0]
 8001a60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	1c5a      	adds	r2, r3, #1
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	3b01      	subs	r3, #1
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	86da      	strh	r2, [r3, #54]	; 0x36
 8001a7a:	e011      	b.n	8001aa0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a7c:	f7ff fa30 	bl	8000ee0 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d803      	bhi.n	8001a94 <HAL_SPI_Transmit+0x1f4>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a92:	d102      	bne.n	8001a9a <HAL_SPI_Transmit+0x1fa>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001a9e:	e026      	b.n	8001aee <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1cd      	bne.n	8001a46 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	6839      	ldr	r1, [r7, #0]
 8001aae:	68f8      	ldr	r0, [r7, #12]
 8001ab0:	f000 fbb2 	bl	8002218 <SPI_EndRxTxTransaction>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68db      	ldr	r3, [r3, #12]
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	77fb      	strb	r3, [r7, #31]
 8001aea:	e000      	b.n	8001aee <HAL_SPI_Transmit+0x24e>
  }

error:
 8001aec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b00:	4618      	mov	r0, r3
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b088      	sub	sp, #32
 8001b0c:	af02      	add	r7, sp, #8
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	603b      	str	r3, [r7, #0]
 8001b14:	4613      	mov	r3, r2
 8001b16:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b24:	d112      	bne.n	8001b4c <HAL_SPI_Receive+0x44>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d10e      	bne.n	8001b4c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2204      	movs	r2, #4
 8001b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8001b36:	88fa      	ldrh	r2, [r7, #6]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f000 f8e9 	bl	8001d1a <HAL_SPI_TransmitReceive>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	e0e2      	b.n	8001d12 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d101      	bne.n	8001b5a <HAL_SPI_Receive+0x52>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e0db      	b.n	8001d12 <HAL_SPI_Receive+0x20a>
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b62:	f7ff f9bd 	bl	8000ee0 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d002      	beq.n	8001b7a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8001b74:	2302      	movs	r3, #2
 8001b76:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b78:	e0c2      	b.n	8001d00 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_SPI_Receive+0x7e>
 8001b80:	88fb      	ldrh	r3, [r7, #6]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	75fb      	strb	r3, [r7, #23]
    goto error;
 8001b8a:	e0b9      	b.n	8001d00 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2204      	movs	r2, #4
 8001b90:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	68ba      	ldr	r2, [r7, #8]
 8001b9e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	88fa      	ldrh	r2, [r7, #6]
 8001ba4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	88fa      	ldrh	r2, [r7, #6]
 8001baa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bd2:	d107      	bne.n	8001be4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001be2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bee:	2b40      	cmp	r3, #64	; 0x40
 8001bf0:	d007      	beq.n	8001c02 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d162      	bne.n	8001cd0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8001c0a:	e02e      	b.n	8001c6a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d115      	bne.n	8001c46 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f103 020c 	add.w	r2, r3, #12
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	7812      	ldrb	r2, [r2, #0]
 8001c28:	b2d2      	uxtb	r2, r2
 8001c2a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c30:	1c5a      	adds	r2, r3, #1
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	3b01      	subs	r3, #1
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001c44:	e011      	b.n	8001c6a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c46:	f7ff f94b 	bl	8000ee0 <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	683a      	ldr	r2, [r7, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d803      	bhi.n	8001c5e <HAL_SPI_Receive+0x156>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d102      	bne.n	8001c64 <HAL_SPI_Receive+0x15c>
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d102      	bne.n	8001c6a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001c68:	e04a      	b.n	8001d00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1cb      	bne.n	8001c0c <HAL_SPI_Receive+0x104>
 8001c74:	e031      	b.n	8001cda <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d113      	bne.n	8001cac <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	1c9a      	adds	r2, r3, #2
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	b29a      	uxth	r2, r3
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001caa:	e011      	b.n	8001cd0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cac:	f7ff f918 	bl	8000ee0 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	683a      	ldr	r2, [r7, #0]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d803      	bhi.n	8001cc4 <HAL_SPI_Receive+0x1bc>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc2:	d102      	bne.n	8001cca <HAL_SPI_Receive+0x1c2>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d102      	bne.n	8001cd0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8001cce:	e017      	b.n	8001d00 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1cd      	bne.n	8001c76 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	6839      	ldr	r1, [r7, #0]
 8001cde:	68f8      	ldr	r0, [r7, #12]
 8001ce0:	f000 fa35 	bl	800214e <SPI_EndRxTransaction>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2220      	movs	r2, #32
 8001cee:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]
 8001cfc:	e000      	b.n	8001d00 <HAL_SPI_Receive+0x1f8>
  }

error :
 8001cfe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3718      	adds	r7, #24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b08c      	sub	sp, #48	; 0x30
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
 8001d26:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_SPI_TransmitReceive+0x26>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e18a      	b.n	8002056 <HAL_SPI_TransmitReceive+0x33c>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001d48:	f7ff f8ca 	bl	8000ee0 <HAL_GetTick>
 8001d4c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001d54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001d5e:	887b      	ldrh	r3, [r7, #2]
 8001d60:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001d62:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d00f      	beq.n	8001d8a <HAL_SPI_TransmitReceive+0x70>
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d70:	d107      	bne.n	8001d82 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d103      	bne.n	8001d82 <HAL_SPI_TransmitReceive+0x68>
 8001d7a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d003      	beq.n	8001d8a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001d82:	2302      	movs	r3, #2
 8001d84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001d88:	e15b      	b.n	8002042 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d005      	beq.n	8001d9c <HAL_SPI_TransmitReceive+0x82>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d002      	beq.n	8001d9c <HAL_SPI_TransmitReceive+0x82>
 8001d96:	887b      	ldrh	r3, [r7, #2]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d103      	bne.n	8001da4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001da2:	e14e      	b.n	8002042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d003      	beq.n	8001db8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2205      	movs	r2, #5
 8001db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	887a      	ldrh	r2, [r7, #2]
 8001dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	887a      	ldrh	r2, [r7, #2]
 8001dda:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	887a      	ldrh	r2, [r7, #2]
 8001de0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001df8:	2b40      	cmp	r3, #64	; 0x40
 8001dfa:	d007      	beq.n	8001e0c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e14:	d178      	bne.n	8001f08 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_SPI_TransmitReceive+0x10a>
 8001e1e:	8b7b      	ldrh	r3, [r7, #26]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d166      	bne.n	8001ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	881a      	ldrh	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	1c9a      	adds	r2, r3, #2
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	3b01      	subs	r3, #1
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001e48:	e053      	b.n	8001ef2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d11b      	bne.n	8001e90 <HAL_SPI_TransmitReceive+0x176>
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d016      	beq.n	8001e90 <HAL_SPI_TransmitReceive+0x176>
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d113      	bne.n	8001e90 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	881a      	ldrh	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	1c9a      	adds	r2, r3, #2
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	3b01      	subs	r3, #1
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d119      	bne.n	8001ed2 <HAL_SPI_TransmitReceive+0x1b8>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d014      	beq.n	8001ed2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	b292      	uxth	r2, r2
 8001eb4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eba:	1c9a      	adds	r2, r3, #2
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	b29a      	uxth	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001ed2:	f7ff f805 	bl	8000ee0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d807      	bhi.n	8001ef2 <HAL_SPI_TransmitReceive+0x1d8>
 8001ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee8:	d003      	beq.n	8001ef2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001ef0:	e0a7      	b.n	8002042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ef6:	b29b      	uxth	r3, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d1a6      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x130>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1a1      	bne.n	8001e4a <HAL_SPI_TransmitReceive+0x130>
 8001f06:	e07c      	b.n	8002002 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d002      	beq.n	8001f16 <HAL_SPI_TransmitReceive+0x1fc>
 8001f10:	8b7b      	ldrh	r3, [r7, #26]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d16b      	bne.n	8001fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	330c      	adds	r3, #12
 8001f20:	7812      	ldrb	r2, [r2, #0]
 8001f22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f28:	1c5a      	adds	r2, r3, #1
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f3c:	e057      	b.n	8001fee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d11c      	bne.n	8001f86 <HAL_SPI_TransmitReceive+0x26c>
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f50:	b29b      	uxth	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d017      	beq.n	8001f86 <HAL_SPI_TransmitReceive+0x26c>
 8001f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d114      	bne.n	8001f86 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	330c      	adds	r3, #12
 8001f66:	7812      	ldrb	r2, [r2, #0]
 8001f68:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d119      	bne.n	8001fc8 <HAL_SPI_TransmitReceive+0x2ae>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d014      	beq.n	8001fc8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	68da      	ldr	r2, [r3, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fa8:	b2d2      	uxtb	r2, r2
 8001faa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fb0:	1c5a      	adds	r2, r3, #1
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001fc8:	f7fe ff8a 	bl	8000ee0 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d803      	bhi.n	8001fe0 <HAL_SPI_TransmitReceive+0x2c6>
 8001fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fde:	d102      	bne.n	8001fe6 <HAL_SPI_TransmitReceive+0x2cc>
 8001fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d103      	bne.n	8001fee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001fec:	e029      	b.n	8002042 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1a2      	bne.n	8001f3e <HAL_SPI_TransmitReceive+0x224>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d19d      	bne.n	8001f3e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f906 	bl	8002218 <SPI_EndRxTxTransaction>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d006      	beq.n	8002020 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800201e:	e010      	b.n	8002042 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002028:	2300      	movs	r3, #0
 800202a:	617b      	str	r3, [r7, #20]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	e000      	b.n	8002042 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002040:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002052:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002056:	4618      	mov	r0, r3
 8002058:	3730      	adds	r7, #48	; 0x30
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800205e:	b480      	push	{r7}
 8002060:	b083      	sub	sp, #12
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800206c:	b2db      	uxtb	r3, r3
}
 800206e:	4618      	mov	r0, r3
 8002070:	370c      	adds	r7, #12
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800208a:	e04c      	b.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d048      	beq.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002094:	f7fe ff24 	bl	8000ee0 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	683a      	ldr	r2, [r7, #0]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d902      	bls.n	80020aa <SPI_WaitFlagStateUntilTimeout+0x30>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d13d      	bne.n	8002126 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	685a      	ldr	r2, [r3, #4]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80020b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80020c2:	d111      	bne.n	80020e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020cc:	d004      	beq.n	80020d8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d107      	bne.n	80020e8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020f0:	d10f      	bne.n	8002112 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e00f      	b.n	8002146 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4013      	ands	r3, r2
 8002130:	68ba      	ldr	r2, [r7, #8]
 8002132:	429a      	cmp	r2, r3
 8002134:	bf0c      	ite	eq
 8002136:	2301      	moveq	r3, #1
 8002138:	2300      	movne	r3, #0
 800213a:	b2db      	uxtb	r3, r3
 800213c:	461a      	mov	r2, r3
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	429a      	cmp	r2, r3
 8002142:	d1a3      	bne.n	800208c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	3710      	adds	r7, #16
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800214e:	b580      	push	{r7, lr}
 8002150:	b086      	sub	sp, #24
 8002152:	af02      	add	r7, sp, #8
 8002154:	60f8      	str	r0, [r7, #12]
 8002156:	60b9      	str	r1, [r7, #8]
 8002158:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002162:	d111      	bne.n	8002188 <SPI_EndRxTransaction+0x3a>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800216c:	d004      	beq.n	8002178 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d107      	bne.n	8002188 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002190:	d12a      	bne.n	80021e8 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219a:	d012      	beq.n	80021c2 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	9300      	str	r3, [sp, #0]
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	2200      	movs	r2, #0
 80021a4:	2180      	movs	r1, #128	; 0x80
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f7ff ff67 	bl	800207a <SPI_WaitFlagStateUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d02d      	beq.n	800220e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021b6:	f043 0220 	orr.w	r2, r3, #32
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e026      	b.n	8002210 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	9300      	str	r3, [sp, #0]
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	2200      	movs	r2, #0
 80021ca:	2101      	movs	r1, #1
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff ff54 	bl	800207a <SPI_WaitFlagStateUntilTimeout>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d01a      	beq.n	800220e <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021dc:	f043 0220 	orr.w	r2, r3, #32
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e013      	b.n	8002210 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2200      	movs	r2, #0
 80021f0:	2101      	movs	r1, #1
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f7ff ff41 	bl	800207a <SPI_WaitFlagStateUntilTimeout>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d007      	beq.n	800220e <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e000      	b.n	8002210 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3710      	adds	r7, #16
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}

08002218 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b088      	sub	sp, #32
 800221c:	af02      	add	r7, sp, #8
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002224:	4b1b      	ldr	r3, [pc, #108]	; (8002294 <SPI_EndRxTxTransaction+0x7c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1b      	ldr	r2, [pc, #108]	; (8002298 <SPI_EndRxTxTransaction+0x80>)
 800222a:	fba2 2303 	umull	r2, r3, r2, r3
 800222e:	0d5b      	lsrs	r3, r3, #21
 8002230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002234:	fb02 f303 	mul.w	r3, r2, r3
 8002238:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002242:	d112      	bne.n	800226a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	2200      	movs	r2, #0
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	68f8      	ldr	r0, [r7, #12]
 8002250:	f7ff ff13 	bl	800207a <SPI_WaitFlagStateUntilTimeout>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d016      	beq.n	8002288 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f043 0220 	orr.w	r2, r3, #32
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e00f      	b.n	800228a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	3b01      	subs	r3, #1
 8002274:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d0f2      	beq.n	800226a <SPI_EndRxTxTransaction+0x52>
 8002284:	e000      	b.n	8002288 <SPI_EndRxTxTransaction+0x70>
        break;
 8002286:	bf00      	nop
  }

  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3718      	adds	r7, #24
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	20000024 	.word	0x20000024
 8002298:	165e9f81 	.word	0x165e9f81

0800229c <SX1272Init>:
/*
 * Radio driver functions implementation
 */

void SX1272Init( RadioEvents_t *events )
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b084      	sub	sp, #16
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    uint8_t i;

    RadioEvents = events;
 80022a4:	4a23      	ldr	r2, [pc, #140]	; (8002334 <SX1272Init+0x98>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
    GpioInit( &DbgPinTx, RADIO_DBG_PIN_TX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
    GpioInit( &DbgPinRx, RADIO_DBG_PIN_RX, PIN_OUTPUT, PIN_PUSH_PULL, PIN_NO_PULL, 0 );
#endif

    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, SX1272OnTimeoutIrq );
 80022aa:	4923      	ldr	r1, [pc, #140]	; (8002338 <SX1272Init+0x9c>)
 80022ac:	4823      	ldr	r0, [pc, #140]	; (800233c <SX1272Init+0xa0>)
 80022ae:	f001 ffaf 	bl	8004210 <TimerInit>
    TimerInit( &RxTimeoutTimer, SX1272OnTimeoutIrq );
 80022b2:	4921      	ldr	r1, [pc, #132]	; (8002338 <SX1272Init+0x9c>)
 80022b4:	4822      	ldr	r0, [pc, #136]	; (8002340 <SX1272Init+0xa4>)
 80022b6:	f001 ffab 	bl	8004210 <TimerInit>
    TimerInit( &RxTimeoutSyncWord, SX1272OnTimeoutIrq );
 80022ba:	491f      	ldr	r1, [pc, #124]	; (8002338 <SX1272Init+0x9c>)
 80022bc:	4821      	ldr	r0, [pc, #132]	; (8002344 <SX1272Init+0xa8>)
 80022be:	f001 ffa7 	bl	8004210 <TimerInit>

    //SX1272Reset( );

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 80022c2:	2000      	movs	r0, #0
 80022c4:	f001 f969 	bl	800359a <SX1272SetOpMode>

    SX1272IoIrqInit( DioIrq );
 80022c8:	481f      	ldr	r0, [pc, #124]	; (8002348 <SX1272Init+0xac>)
 80022ca:	f002 f8b9 	bl	8004440 <SX1272IoIrqInit>

    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 80022ce:	2300      	movs	r3, #0
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e020      	b.n	8002316 <SX1272Init+0x7a>
    {
        SX1272SetModem( RadioRegsInit[i].Modem );
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	491d      	ldr	r1, [pc, #116]	; (800234c <SX1272Init+0xb0>)
 80022d8:	4613      	mov	r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	4413      	add	r3, r2
 80022de:	440b      	add	r3, r1
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f001 f97a 	bl	80035dc <SX1272SetModem>
        SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 80022e8:	7bfa      	ldrb	r2, [r7, #15]
 80022ea:	4918      	ldr	r1, [pc, #96]	; (800234c <SX1272Init+0xb0>)
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	440b      	add	r3, r1
 80022f4:	3301      	adds	r3, #1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	b298      	uxth	r0, r3
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	4913      	ldr	r1, [pc, #76]	; (800234c <SX1272Init+0xb0>)
 80022fe:	4613      	mov	r3, r2
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	4413      	add	r3, r2
 8002304:	440b      	add	r3, r1
 8002306:	3302      	adds	r3, #2
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	4619      	mov	r1, r3
 800230c:	f001 f9be 	bl	800368c <SX1272Write>
    for( i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	3301      	adds	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
 8002316:	7bfb      	ldrb	r3, [r7, #15]
 8002318:	2b0f      	cmp	r3, #15
 800231a:	d9db      	bls.n	80022d4 <SX1272Init+0x38>
    }

    SX1272SetModem( MODEM_FSK );
 800231c:	2000      	movs	r0, #0
 800231e:	f001 f95d 	bl	80035dc <SX1272SetModem>

    SX1272.Settings.State = RF_IDLE;
 8002322:	4b0b      	ldr	r3, [pc, #44]	; (8002350 <SX1272Init+0xb4>)
 8002324:	2200      	movs	r2, #0
 8002326:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000044 	.word	0x20000044
 8002338:	08003889 	.word	0x08003889
 800233c:	20000260 	.word	0x20000260
 8002340:	20000288 	.word	0x20000288
 8002344:	20000274 	.word	0x20000274
 8002348:	20000008 	.word	0x20000008
 800234c:	08004f54 	.word	0x08004f54
 8002350:	20000170 	.word	0x20000170

08002354 <SX1272GetStatus>:

RadioState_t SX1272GetStatus( void )
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
    return SX1272.Settings.State;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <SX1272GetStatus+0x14>)
 800235a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
}
 800235e:	4618      	mov	r0, r3
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	20000170 	.word	0x20000170
 800236c:	00000000 	.word	0x00000000

08002370 <SX1272SetChannel>:

void SX1272SetChannel( uint32_t freq )
{
 8002370:	b590      	push	{r4, r7, lr}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
    SX1272.Settings.Channel = freq;
 8002378:	4a17      	ldr	r2, [pc, #92]	; (80023d8 <SX1272SetChannel+0x68>)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    freq = ( uint32_t )( ( double )freq / ( double )FREQ_STEP );
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7fe f86b 	bl	800045c <__aeabi_ui2d>
 8002386:	a312      	add	r3, pc, #72	; (adr r3, 80023d0 <SX1272SetChannel+0x60>)
 8002388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800238c:	f7fe fa0a 	bl	80007a4 <__aeabi_ddiv>
 8002390:	4603      	mov	r3, r0
 8002392:	460c      	mov	r4, r1
 8002394:	4618      	mov	r0, r3
 8002396:	4621      	mov	r1, r4
 8002398:	f7fe fb9c 	bl	8000ad4 <__aeabi_d2uiz>
 800239c:	4603      	mov	r3, r0
 800239e:	607b      	str	r3, [r7, #4]
    SX1272Write( REG_FRFMSB, ( uint8_t )( ( freq >> 16 ) & 0xFF ) );
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	0c1b      	lsrs	r3, r3, #16
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	4619      	mov	r1, r3
 80023a8:	2006      	movs	r0, #6
 80023aa:	f001 f96f 	bl	800368c <SX1272Write>
    SX1272Write( REG_FRFMID, ( uint8_t )( ( freq >> 8 ) & 0xFF ) );
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	4619      	mov	r1, r3
 80023b6:	2007      	movs	r0, #7
 80023b8:	f001 f968 	bl	800368c <SX1272Write>
    SX1272Write( REG_FRFLSB, ( uint8_t )( freq & 0xFF ) );
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	4619      	mov	r1, r3
 80023c2:	2008      	movs	r0, #8
 80023c4:	f001 f962 	bl	800368c <SX1272Write>
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd90      	pop	{r4, r7, pc}
 80023d0:	00000000 	.word	0x00000000
 80023d4:	404e8480 	.word	0x404e8480
 80023d8:	20000170 	.word	0x20000170

080023dc <SX1272IsChannelFree>:

bool SX1272IsChannelFree( RadioModems_t modem, uint32_t freq, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607b      	str	r3, [r7, #4]
 80023e6:	4603      	mov	r3, r0
 80023e8:	73fb      	strb	r3, [r7, #15]
 80023ea:	4613      	mov	r3, r2
 80023ec:	81bb      	strh	r3, [r7, #12]
    bool status = true;
 80023ee:	2301      	movs	r3, #1
 80023f0:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]

    SX1272SetModem( modem );
 80023fa:	7bfb      	ldrb	r3, [r7, #15]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f001 f8ed 	bl	80035dc <SX1272SetModem>

    SX1272SetChannel( freq );
 8002402:	68b8      	ldr	r0, [r7, #8]
 8002404:	f7ff ffb4 	bl	8002370 <SX1272SetChannel>

    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 8002408:	2005      	movs	r0, #5
 800240a:	f001 f8c6 	bl	800359a <SX1272SetOpMode>

    DelayMs( 1 );
 800240e:	2001      	movs	r0, #1
 8002410:	f001 fef4 	bl	80041fc <DelayMs>

    carrierSenseTime = TimerGetCurrentTime( );
 8002414:	f001 ffa1 	bl	800435a <TimerGetCurrentTime>
 8002418:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800241a:	e00e      	b.n	800243a <SX1272IsChannelFree+0x5e>
    {
        rssi = SX1272ReadRssi( modem );
 800241c:	7bfb      	ldrb	r3, [r7, #15]
 800241e:	4618      	mov	r0, r3
 8002420:	f001 f890 	bl	8003544 <SX1272ReadRssi>
 8002424:	4603      	mov	r3, r0
 8002426:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8002428:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800242c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002430:	429a      	cmp	r2, r3
 8002432:	dd02      	ble.n	800243a <SX1272IsChannelFree+0x5e>
        {
            status = false;
 8002434:	2300      	movs	r3, #0
 8002436:	75fb      	strb	r3, [r7, #23]
            break;
 8002438:	e006      	b.n	8002448 <SX1272IsChannelFree+0x6c>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 800243a:	6938      	ldr	r0, [r7, #16]
 800243c:	f001 ff95 	bl	800436a <TimerGetElapsedTime>
 8002440:	4602      	mov	r2, r0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4293      	cmp	r3, r2
 8002446:	d8e9      	bhi.n	800241c <SX1272IsChannelFree+0x40>
        }
    }
    SX1272SetSleep( );
 8002448:	f000 fe70 	bl	800312c <SX1272SetSleep>
    return status;
 800244c:	7dfb      	ldrb	r3, [r7, #23]
}
 800244e:	4618      	mov	r0, r3
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <SX1272Random>:

uint32_t SX1272Random( void )
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
    uint8_t i;
    uint32_t rnd = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	603b      	str	r3, [r7, #0]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    SX1272SetModem( MODEM_LORA );
 8002460:	2001      	movs	r0, #1
 8002462:	f001 f8bb 	bl	80035dc <SX1272SetModem>

    // Disable LoRa modem interrupts
    SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8002466:	21ff      	movs	r1, #255	; 0xff
 8002468:	2011      	movs	r0, #17
 800246a:	f001 f90f 	bl	800368c <SX1272Write>
                  RFLR_IRQFLAGS_CADDONE |
                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                  RFLR_IRQFLAGS_CADDETECTED );

    // Set radio in continuous reception
    SX1272SetOpMode( RF_OPMODE_RECEIVER );
 800246e:	2005      	movs	r0, #5
 8002470:	f001 f893 	bl	800359a <SX1272SetOpMode>

    for( i = 0; i < 32; i++ )
 8002474:	2300      	movs	r3, #0
 8002476:	71fb      	strb	r3, [r7, #7]
 8002478:	e011      	b.n	800249e <SX1272Random+0x48>
    {
        DelayMs( 1 );
 800247a:	2001      	movs	r0, #1
 800247c:	f001 febe 	bl	80041fc <DelayMs>
        // Unfiltered RSSI value reading. Only takes the LSB value
        rnd |= ( ( uint32_t )SX1272Read( REG_LR_RSSIWIDEBAND ) & 0x01 ) << i;
 8002480:	202c      	movs	r0, #44	; 0x2c
 8002482:	f001 f915 	bl	80036b0 <SX1272Read>
 8002486:	4603      	mov	r3, r0
 8002488:	f003 0201 	and.w	r2, r3, #1
 800248c:	79fb      	ldrb	r3, [r7, #7]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	4313      	orrs	r3, r2
 8002496:	603b      	str	r3, [r7, #0]
    for( i = 0; i < 32; i++ )
 8002498:	79fb      	ldrb	r3, [r7, #7]
 800249a:	3301      	adds	r3, #1
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	2b1f      	cmp	r3, #31
 80024a2:	d9ea      	bls.n	800247a <SX1272Random+0x24>
    }

    SX1272SetSleep( );
 80024a4:	f000 fe42 	bl	800312c <SX1272SetSleep>

    return rnd;
 80024a8:	683b      	ldr	r3, [r7, #0]
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <GetFskBandwidthRegValue>:
 *
 * \param [IN] bandwidth Bandwidth value in Hz
 * \retval regValue Bandwidth register value.
 */
static uint8_t GetFskBandwidthRegValue( uint32_t bandwidth )
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
    uint8_t i;

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80024bc:	2300      	movs	r3, #0
 80024be:	73fb      	strb	r3, [r7, #15]
 80024c0:	e017      	b.n	80024f2 <GetFskBandwidthRegValue+0x3e>
    {
        if( ( bandwidth >= FskBandwidths[i].bandwidth ) && ( bandwidth < FskBandwidths[i + 1].bandwidth ) )
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	4a10      	ldr	r2, [pc, #64]	; (8002508 <GetFskBandwidthRegValue+0x54>)
 80024c6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d30d      	bcc.n	80024ec <GetFskBandwidthRegValue+0x38>
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	3301      	adds	r3, #1
 80024d4:	4a0c      	ldr	r2, [pc, #48]	; (8002508 <GetFskBandwidthRegValue+0x54>)
 80024d6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d205      	bcs.n	80024ec <GetFskBandwidthRegValue+0x38>
        {
            return FskBandwidths[i].RegValue;
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	4a09      	ldr	r2, [pc, #36]	; (8002508 <GetFskBandwidthRegValue+0x54>)
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	e006      	b.n	80024fa <GetFskBandwidthRegValue+0x46>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ) - 1; i++ )
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	3301      	adds	r3, #1
 80024f0:	73fb      	strb	r3, [r7, #15]
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b14      	cmp	r3, #20
 80024f6:	d9e4      	bls.n	80024c2 <GetFskBandwidthRegValue+0xe>
        }
    }
    // ERROR: Value not found
    while( 1 );
 80024f8:	e7fe      	b.n	80024f8 <GetFskBandwidthRegValue+0x44>
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	08004f84 	.word	0x08004f84
 800250c:	00000000 	.word	0x00000000

08002510 <SX1272SetRxConfig>:
                         uint32_t bandwidthAfc, uint16_t preambleLen,
                         uint16_t symbTimeout, bool fixLen,
                         uint8_t payloadLen,
                         bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                         bool iqInverted, bool rxContinuous )
{
 8002510:	b5b0      	push	{r4, r5, r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	607a      	str	r2, [r7, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	4603      	mov	r3, r0
 800251e:	73fb      	strb	r3, [r7, #15]
 8002520:	4613      	mov	r3, r2
 8002522:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 8002524:	7bfb      	ldrb	r3, [r7, #15]
 8002526:	4618      	mov	r0, r3
 8002528:	f001 f858 	bl	80035dc <SX1272SetModem>

    switch( modem )
 800252c:	7bfb      	ldrb	r3, [r7, #15]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <SX1272SetRxConfig+0x2a>
 8002532:	2b01      	cmp	r3, #1
 8002534:	f000 80d4 	beq.w	80026e0 <SX1272SetRxConfig+0x1d0>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002538:	e1d3      	b.n	80028e2 <SX1272SetRxConfig+0x3d2>
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 800253a:	4a95      	ldr	r2, [pc, #596]	; (8002790 <SX1272SetRxConfig+0x280>)
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
            SX1272.Settings.Fsk.Datarate = datarate;
 8002542:	4a93      	ldr	r2, [pc, #588]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
            SX1272.Settings.Fsk.BandwidthAfc = bandwidthAfc;
 800254a:	4a91      	ldr	r2, [pc, #580]	; (8002790 <SX1272SetRxConfig+0x280>)
 800254c:	6a3b      	ldr	r3, [r7, #32]
 800254e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
            SX1272.Settings.Fsk.FixLen = fixLen;
 8002552:	4a8f      	ldr	r2, [pc, #572]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002554:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002558:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
            SX1272.Settings.Fsk.PayloadLen = payloadLen;
 800255c:	4a8c      	ldr	r2, [pc, #560]	; (8002790 <SX1272SetRxConfig+0x280>)
 800255e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002562:	f882 30ab 	strb.w	r3, [r2, #171]	; 0xab
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8002566:	4a8a      	ldr	r2, [pc, #552]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002568:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800256c:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 8002570:	4a87      	ldr	r2, [pc, #540]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002572:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002576:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
            SX1272.Settings.Fsk.RxContinuous = rxContinuous;
 800257a:	4a85      	ldr	r2, [pc, #532]	; (8002790 <SX1272SetRxConfig+0x280>)
 800257c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002580:	f882 30ae 	strb.w	r3, [r2, #174]	; 0xae
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002584:	4a82      	ldr	r2, [pc, #520]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002586:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002588:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
            SX1272.Settings.Fsk.RxSingleTimeout = ( uint32_t )( symbTimeout * ( ( 1.0 / ( double )datarate ) * 8.0 ) * 1000 );
 800258c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800258e:	4618      	mov	r0, r3
 8002590:	f7fd ff74 	bl	800047c <__aeabi_i2d>
 8002594:	4604      	mov	r4, r0
 8002596:	460d      	mov	r5, r1
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7fd ff5f 	bl	800045c <__aeabi_ui2d>
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	f04f 0000 	mov.w	r0, #0
 80025a6:	497b      	ldr	r1, [pc, #492]	; (8002794 <SX1272SetRxConfig+0x284>)
 80025a8:	f7fe f8fc 	bl	80007a4 <__aeabi_ddiv>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4610      	mov	r0, r2
 80025b2:	4619      	mov	r1, r3
 80025b4:	f04f 0200 	mov.w	r2, #0
 80025b8:	4b77      	ldr	r3, [pc, #476]	; (8002798 <SX1272SetRxConfig+0x288>)
 80025ba:	f7fd ffc9 	bl	8000550 <__aeabi_dmul>
 80025be:	4602      	mov	r2, r0
 80025c0:	460b      	mov	r3, r1
 80025c2:	4620      	mov	r0, r4
 80025c4:	4629      	mov	r1, r5
 80025c6:	f7fd ffc3 	bl	8000550 <__aeabi_dmul>
 80025ca:	4603      	mov	r3, r0
 80025cc:	460c      	mov	r4, r1
 80025ce:	4618      	mov	r0, r3
 80025d0:	4621      	mov	r1, r4
 80025d2:	f04f 0200 	mov.w	r2, #0
 80025d6:	4b71      	ldr	r3, [pc, #452]	; (800279c <SX1272SetRxConfig+0x28c>)
 80025d8:	f7fd ffba 	bl	8000550 <__aeabi_dmul>
 80025dc:	4603      	mov	r3, r0
 80025de:	460c      	mov	r4, r1
 80025e0:	4618      	mov	r0, r3
 80025e2:	4621      	mov	r1, r4
 80025e4:	f7fe fa76 	bl	8000ad4 <__aeabi_d2uiz>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b69      	ldr	r3, [pc, #420]	; (8002790 <SX1272SetRxConfig+0x280>)
 80025ec:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fd ff33 	bl	800045c <__aeabi_ui2d>
 80025f6:	4603      	mov	r3, r0
 80025f8:	460c      	mov	r4, r1
 80025fa:	461a      	mov	r2, r3
 80025fc:	4623      	mov	r3, r4
 80025fe:	a162      	add	r1, pc, #392	; (adr r1, 8002788 <SX1272SetRxConfig+0x278>)
 8002600:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002604:	f7fe f8ce 	bl	80007a4 <__aeabi_ddiv>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	4618      	mov	r0, r3
 800260e:	4621      	mov	r1, r4
 8002610:	f7fe fa60 	bl	8000ad4 <__aeabi_d2uiz>
 8002614:	4603      	mov	r3, r0
 8002616:	b29b      	uxth	r3, r3
 8002618:	607b      	str	r3, [r7, #4]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	0a1b      	lsrs	r3, r3, #8
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4619      	mov	r1, r3
 8002622:	2002      	movs	r0, #2
 8002624:	f001 f832 	bl	800368c <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	b2db      	uxtb	r3, r3
 800262c:	4619      	mov	r1, r3
 800262e:	2003      	movs	r0, #3
 8002630:	f001 f82c 	bl	800368c <SX1272Write>
            SX1272Write( REG_RXBW, GetFskBandwidthRegValue( bandwidth ) );
 8002634:	68b8      	ldr	r0, [r7, #8]
 8002636:	f7ff ff3d 	bl	80024b4 <GetFskBandwidthRegValue>
 800263a:	4603      	mov	r3, r0
 800263c:	4619      	mov	r1, r3
 800263e:	2012      	movs	r0, #18
 8002640:	f001 f824 	bl	800368c <SX1272Write>
            SX1272Write( REG_AFCBW, GetFskBandwidthRegValue( bandwidthAfc ) );
 8002644:	6a38      	ldr	r0, [r7, #32]
 8002646:	f7ff ff35 	bl	80024b4 <GetFskBandwidthRegValue>
 800264a:	4603      	mov	r3, r0
 800264c:	4619      	mov	r1, r3
 800264e:	2013      	movs	r0, #19
 8002650:	f001 f81c 	bl	800368c <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 8002654:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	b29b      	uxth	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	4619      	mov	r1, r3
 800265e:	2025      	movs	r0, #37	; 0x25
 8002660:	f001 f814 	bl	800368c <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 8002664:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002666:	b2db      	uxtb	r3, r3
 8002668:	4619      	mov	r1, r3
 800266a:	2026      	movs	r0, #38	; 0x26
 800266c:	f001 f80e 	bl	800368c <SX1272Write>
            if( fixLen == 1 )
 8002670:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002674:	2b00      	cmp	r3, #0
 8002676:	d006      	beq.n	8002686 <SX1272SetRxConfig+0x176>
                SX1272Write( REG_PAYLOADLENGTH, payloadLen );
 8002678:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800267c:	4619      	mov	r1, r3
 800267e:	2032      	movs	r0, #50	; 0x32
 8002680:	f001 f804 	bl	800368c <SX1272Write>
 8002684:	e003      	b.n	800268e <SX1272SetRxConfig+0x17e>
                SX1272Write( REG_PAYLOADLENGTH, 0xFF ); // Set payload length to the maximum
 8002686:	21ff      	movs	r1, #255	; 0xff
 8002688:	2032      	movs	r0, #50	; 0x32
 800268a:	f000 ffff 	bl	800368c <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 800268e:	2030      	movs	r0, #48	; 0x30
 8002690:	f001 f80e 	bl	80036b0 <SX1272Read>
 8002694:	4603      	mov	r3, r0
 8002696:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002698:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 800269c:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 800269e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80026a2:	2a00      	cmp	r2, #0
 80026a4:	d001      	beq.n	80026aa <SX1272SetRxConfig+0x19a>
 80026a6:	2200      	movs	r2, #0
 80026a8:	e001      	b.n	80026ae <SX1272SetRxConfig+0x19e>
 80026aa:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80026ae:	4313      	orrs	r3, r2
 80026b0:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 80026b2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026b6:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 80026b8:	b25b      	sxtb	r3, r3
 80026ba:	4313      	orrs	r3, r2
 80026bc:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	4619      	mov	r1, r3
 80026c2:	2030      	movs	r0, #48	; 0x30
 80026c4:	f000 ffe2 	bl	800368c <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 80026c8:	2031      	movs	r0, #49	; 0x31
 80026ca:	f000 fff1 	bl	80036b0 <SX1272Read>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	4619      	mov	r1, r3
 80026d8:	2031      	movs	r0, #49	; 0x31
 80026da:	f000 ffd7 	bl	800368c <SX1272Write>
        break;
 80026de:	e100      	b.n	80028e2 <SX1272SetRxConfig+0x3d2>
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 80026e0:	4a2b      	ldr	r2, [pc, #172]	; (8002790 <SX1272SetRxConfig+0x280>)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            SX1272.Settings.LoRa.Datarate = datarate;
 80026e8:	4a29      	ldr	r2, [pc, #164]	; (8002790 <SX1272SetRxConfig+0x280>)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            SX1272.Settings.LoRa.Coderate = coderate;
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <SX1272SetRxConfig+0x280>)
 80026f2:	7bbb      	ldrb	r3, [r7, #14]
 80026f4:	f882 30d5 	strb.w	r3, [r2, #213]	; 0xd5
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 80026f8:	4a25      	ldr	r2, [pc, #148]	; (8002790 <SX1272SetRxConfig+0x280>)
 80026fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026fc:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
            SX1272.Settings.LoRa.FixLen = fixLen;
 8002700:	4a23      	ldr	r2, [pc, #140]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002702:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002706:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
            SX1272.Settings.LoRa.PayloadLen = payloadLen;
 800270a:	4a21      	ldr	r2, [pc, #132]	; (8002790 <SX1272SetRxConfig+0x280>)
 800270c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002710:	f882 30d9 	strb.w	r3, [r2, #217]	; 0xd9
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002716:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800271a:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 800271e:	4a1c      	ldr	r2, [pc, #112]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002720:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002724:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8002728:	4a19      	ldr	r2, [pc, #100]	; (8002790 <SX1272SetRxConfig+0x280>)
 800272a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800272e:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8002732:	4a17      	ldr	r2, [pc, #92]	; (8002790 <SX1272SetRxConfig+0x280>)
 8002734:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002738:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
            SX1272.Settings.LoRa.RxContinuous = rxContinuous;
 800273c:	4a14      	ldr	r2, [pc, #80]	; (8002790 <SX1272SetRxConfig+0x280>)
 800273e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002742:	f882 30de 	strb.w	r3, [r2, #222]	; 0xde
            if( datarate > 12 )
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d902      	bls.n	8002752 <SX1272SetRxConfig+0x242>
                datarate = 12;
 800274c:	230c      	movs	r3, #12
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	e004      	b.n	800275c <SX1272SetRxConfig+0x24c>
            else if( datarate < 6 )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b05      	cmp	r3, #5
 8002756:	d801      	bhi.n	800275c <SX1272SetRxConfig+0x24c>
                datarate = 6;
 8002758:	2306      	movs	r3, #6
 800275a:	607b      	str	r3, [r7, #4]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d105      	bne.n	800276e <SX1272SetRxConfig+0x25e>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2b0b      	cmp	r3, #11
 8002766:	d008      	beq.n	800277a <SX1272SetRxConfig+0x26a>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d005      	beq.n	800277a <SX1272SetRxConfig+0x26a>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	2b01      	cmp	r3, #1
 8002772:	d115      	bne.n	80027a0 <SX1272SetRxConfig+0x290>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b0c      	cmp	r3, #12
 8002778:	d112      	bne.n	80027a0 <SX1272SetRxConfig+0x290>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 800277a:	4b05      	ldr	r3, [pc, #20]	; (8002790 <SX1272SetRxConfig+0x280>)
 800277c:	2201      	movs	r2, #1
 800277e:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8002782:	e011      	b.n	80027a8 <SX1272SetRxConfig+0x298>
 8002784:	f3af 8000 	nop.w
 8002788:	00000000 	.word	0x00000000
 800278c:	417e8480 	.word	0x417e8480
 8002790:	20000170 	.word	0x20000170
 8002794:	3ff00000 	.word	0x3ff00000
 8002798:	40200000 	.word	0x40200000
 800279c:	408f4000 	.word	0x408f4000
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 80027a0:	4b52      	ldr	r3, [pc, #328]	; (80028ec <SX1272SetRxConfig+0x3dc>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 80027a8:	201d      	movs	r0, #29
 80027aa:	f000 ff81 	bl	80036b0 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	019b      	lsls	r3, r3, #6
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	7bbb      	ldrb	r3, [r7, #14]
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	4313      	orrs	r3, r2
 80027be:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 80027c0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 80027c8:	4313      	orrs	r3, r2
 80027ca:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 80027cc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	4313      	orrs	r3, r2
 80027d6:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 80027d8:	4a44      	ldr	r2, [pc, #272]	; (80028ec <SX1272SetRxConfig+0x3dc>)
 80027da:	f892 20d4 	ldrb.w	r2, [r2, #212]	; 0xd4
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 80027de:	4313      	orrs	r3, r2
 80027e0:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 80027e2:	4619      	mov	r1, r3
 80027e4:	201d      	movs	r0, #29
 80027e6:	f000 ff51 	bl	800368c <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 80027ea:	201e      	movs	r0, #30
 80027ec:	f000 ff60 	bl	80036b0 <SX1272Read>
 80027f0:	4603      	mov	r3, r0
                           RFLR_MODEMCONFIG2_SF_MASK &
 80027f2:	f003 030c 	and.w	r3, r3, #12
 80027f6:	b2da      	uxtb	r2, r3
                           ( datarate << 4 ) |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	b2db      	uxtb	r3, r3
                           RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) |
 8002800:	4313      	orrs	r3, r2
 8002802:	b2da      	uxtb	r2, r3
                           ( ( symbTimeout >> 8 ) & ~RFLR_MODEMCONFIG2_SYMBTIMEOUTMSB_MASK ) );
 8002804:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	b29b      	uxth	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	f003 0303 	and.w	r3, r3, #3
 8002810:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8002812:	4313      	orrs	r3, r2
 8002814:	b2db      	uxtb	r3, r3
 8002816:	4619      	mov	r1, r3
 8002818:	201e      	movs	r0, #30
 800281a:	f000 ff37 	bl	800368c <SX1272Write>
            SX1272Write( REG_LR_SYMBTIMEOUTLSB, ( uint8_t )( symbTimeout & 0xFF ) );
 800281e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002820:	b2db      	uxtb	r3, r3
 8002822:	4619      	mov	r1, r3
 8002824:	201f      	movs	r0, #31
 8002826:	f000 ff31 	bl	800368c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( uint8_t )( ( preambleLen >> 8 ) & 0xFF ) );
 800282a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29b      	uxth	r3, r3
 8002830:	b2db      	uxtb	r3, r3
 8002832:	4619      	mov	r1, r3
 8002834:	2020      	movs	r0, #32
 8002836:	f000 ff29 	bl	800368c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, ( uint8_t )( preambleLen & 0xFF ) );
 800283a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800283c:	b2db      	uxtb	r3, r3
 800283e:	4619      	mov	r1, r3
 8002840:	2021      	movs	r0, #33	; 0x21
 8002842:	f000 ff23 	bl	800368c <SX1272Write>
            if( fixLen == 1 )
 8002846:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800284a:	2b00      	cmp	r3, #0
 800284c:	d005      	beq.n	800285a <SX1272SetRxConfig+0x34a>
                SX1272Write( REG_LR_PAYLOADLENGTH, payloadLen );
 800284e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002852:	4619      	mov	r1, r3
 8002854:	2022      	movs	r0, #34	; 0x22
 8002856:	f000 ff19 	bl	800368c <SX1272Write>
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <SX1272SetRxConfig+0x3dc>)
 800285c:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8002860:	2b00      	cmp	r3, #0
 8002862:	d011      	beq.n	8002888 <SX1272SetRxConfig+0x378>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002864:	204b      	movs	r0, #75	; 0x4b
 8002866:	f000 ff23 	bl	80036b0 <SX1272Read>
 800286a:	4603      	mov	r3, r0
 800286c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002870:	b2db      	uxtb	r3, r3
 8002872:	4619      	mov	r1, r3
 8002874:	204b      	movs	r0, #75	; 0x4b
 8002876:	f000 ff09 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 800287a:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <SX1272SetRxConfig+0x3dc>)
 800287c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002880:	4619      	mov	r1, r3
 8002882:	2024      	movs	r0, #36	; 0x24
 8002884:	f000 ff02 	bl	800368c <SX1272Write>
            if( datarate == 6 )
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2b06      	cmp	r3, #6
 800288c:	d114      	bne.n	80028b8 <SX1272SetRxConfig+0x3a8>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 800288e:	2031      	movs	r0, #49	; 0x31
 8002890:	f000 ff0e 	bl	80036b0 <SX1272Read>
 8002894:	4603      	mov	r3, r0
 8002896:	b25b      	sxtb	r3, r3
 8002898:	f023 0307 	bic.w	r3, r3, #7
 800289c:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 800289e:	f043 0305 	orr.w	r3, r3, #5
 80028a2:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	4619      	mov	r1, r3
 80028a8:	2031      	movs	r0, #49	; 0x31
 80028aa:	f000 feef 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 80028ae:	210c      	movs	r1, #12
 80028b0:	2037      	movs	r0, #55	; 0x37
 80028b2:	f000 feeb 	bl	800368c <SX1272Write>
        break;
 80028b6:	e013      	b.n	80028e0 <SX1272SetRxConfig+0x3d0>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 80028b8:	2031      	movs	r0, #49	; 0x31
 80028ba:	f000 fef9 	bl	80036b0 <SX1272Read>
 80028be:	4603      	mov	r3, r0
 80028c0:	b25b      	sxtb	r3, r3
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 80028c8:	f043 0303 	orr.w	r3, r3, #3
 80028cc:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	4619      	mov	r1, r3
 80028d2:	2031      	movs	r0, #49	; 0x31
 80028d4:	f000 feda 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 80028d8:	210a      	movs	r1, #10
 80028da:	2037      	movs	r0, #55	; 0x37
 80028dc:	f000 fed6 	bl	800368c <SX1272Write>
        break;
 80028e0:	bf00      	nop
}
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bdb0      	pop	{r4, r5, r7, pc}
 80028ea:	bf00      	nop
 80028ec:	20000170 	.word	0x20000170

080028f0 <SX1272SetTxConfig>:
void SX1272SetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                        uint32_t bandwidth, uint32_t datarate,
                        uint8_t coderate, uint16_t preambleLen,
                        bool fixLen, bool crcOn, bool freqHopOn,
                        uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 80028f0:	b590      	push	{r4, r7, lr}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60ba      	str	r2, [r7, #8]
 80028f8:	607b      	str	r3, [r7, #4]
 80028fa:	4603      	mov	r3, r0
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	460b      	mov	r3, r1
 8002900:	73bb      	strb	r3, [r7, #14]
    SX1272SetModem( modem );
 8002902:	7bfb      	ldrb	r3, [r7, #15]
 8002904:	4618      	mov	r0, r3
 8002906:	f000 fe69 	bl	80035dc <SX1272SetModem>

    SX1272SetRfTxPower( power );
 800290a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fdc2 	bl	8004498 <SX1272SetRfTxPower>

    switch( modem )
 8002914:	7bfb      	ldrb	r3, [r7, #15]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <SX1272SetTxConfig+0x32>
 800291a:	2b01      	cmp	r3, #1
 800291c:	f000 809f 	beq.w	8002a5e <SX1272SetTxConfig+0x16e>
                             RFLR_DETECTIONTHRESH_SF7_TO_SF12 );
            }
        }
        break;
    }
}
 8002920:	e177      	b.n	8002c12 <SX1272SetTxConfig+0x322>
            SX1272.Settings.Fsk.Power = power;
 8002922:	4ac3      	ldr	r2, [pc, #780]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002924:	7bbb      	ldrb	r3, [r7, #14]
 8002926:	f882 3094 	strb.w	r3, [r2, #148]	; 0x94
            SX1272.Settings.Fsk.Fdev = fdev;
 800292a:	4ac1      	ldr	r2, [pc, #772]	; (8002c30 <SX1272SetTxConfig+0x340>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
            SX1272.Settings.Fsk.Bandwidth = bandwidth;
 8002932:	4abf      	ldr	r2, [pc, #764]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
            SX1272.Settings.Fsk.Datarate = datarate;
 800293a:	4abd      	ldr	r2, [pc, #756]	; (8002c30 <SX1272SetTxConfig+0x340>)
 800293c:	6a3b      	ldr	r3, [r7, #32]
 800293e:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
            SX1272.Settings.Fsk.PreambleLen = preambleLen;
 8002942:	4abb      	ldr	r2, [pc, #748]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002944:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002946:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
            SX1272.Settings.Fsk.FixLen = fixLen;
 800294a:	4ab9      	ldr	r2, [pc, #740]	; (8002c30 <SX1272SetTxConfig+0x340>)
 800294c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002950:	f882 30aa 	strb.w	r3, [r2, #170]	; 0xaa
            SX1272.Settings.Fsk.CrcOn = crcOn;
 8002954:	4ab6      	ldr	r2, [pc, #728]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002956:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800295a:	f882 30ac 	strb.w	r3, [r2, #172]	; 0xac
            SX1272.Settings.Fsk.IqInverted = iqInverted;
 800295e:	4ab4      	ldr	r2, [pc, #720]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002960:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002964:	f882 30ad 	strb.w	r3, [r2, #173]	; 0xad
            SX1272.Settings.Fsk.TxTimeout = timeout;
 8002968:	4ab1      	ldr	r2, [pc, #708]	; (8002c30 <SX1272SetTxConfig+0x340>)
 800296a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800296c:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
            fdev = ( uint16_t )( ( double )fdev / ( double )FREQ_STEP );
 8002970:	68b8      	ldr	r0, [r7, #8]
 8002972:	f7fd fd73 	bl	800045c <__aeabi_ui2d>
 8002976:	a3aa      	add	r3, pc, #680	; (adr r3, 8002c20 <SX1272SetTxConfig+0x330>)
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f7fd ff12 	bl	80007a4 <__aeabi_ddiv>
 8002980:	4603      	mov	r3, r0
 8002982:	460c      	mov	r4, r1
 8002984:	4618      	mov	r0, r3
 8002986:	4621      	mov	r1, r4
 8002988:	f7fe f8a4 	bl	8000ad4 <__aeabi_d2uiz>
 800298c:	4603      	mov	r3, r0
 800298e:	b29b      	uxth	r3, r3
 8002990:	60bb      	str	r3, [r7, #8]
            SX1272Write( REG_FDEVMSB, ( uint8_t )( fdev >> 8 ) );
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	2004      	movs	r0, #4
 800299c:	f000 fe76 	bl	800368c <SX1272Write>
            SX1272Write( REG_FDEVLSB, ( uint8_t )( fdev & 0xFF ) );
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4619      	mov	r1, r3
 80029a6:	2005      	movs	r0, #5
 80029a8:	f000 fe70 	bl	800368c <SX1272Write>
            datarate = ( uint16_t )( ( double )XTAL_FREQ / ( double )datarate );
 80029ac:	6a38      	ldr	r0, [r7, #32]
 80029ae:	f7fd fd55 	bl	800045c <__aeabi_ui2d>
 80029b2:	4603      	mov	r3, r0
 80029b4:	460c      	mov	r4, r1
 80029b6:	461a      	mov	r2, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	a19b      	add	r1, pc, #620	; (adr r1, 8002c28 <SX1272SetTxConfig+0x338>)
 80029bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80029c0:	f7fd fef0 	bl	80007a4 <__aeabi_ddiv>
 80029c4:	4603      	mov	r3, r0
 80029c6:	460c      	mov	r4, r1
 80029c8:	4618      	mov	r0, r3
 80029ca:	4621      	mov	r1, r4
 80029cc:	f7fe f882 	bl	8000ad4 <__aeabi_d2uiz>
 80029d0:	4603      	mov	r3, r0
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	623b      	str	r3, [r7, #32]
            SX1272Write( REG_BITRATEMSB, ( uint8_t )( datarate >> 8 ) );
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	4619      	mov	r1, r3
 80029de:	2002      	movs	r0, #2
 80029e0:	f000 fe54 	bl	800368c <SX1272Write>
            SX1272Write( REG_BITRATELSB, ( uint8_t )( datarate & 0xFF ) );
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	4619      	mov	r1, r3
 80029ea:	2003      	movs	r0, #3
 80029ec:	f000 fe4e 	bl	800368c <SX1272Write>
            SX1272Write( REG_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 80029f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80029f2:	0a1b      	lsrs	r3, r3, #8
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	2025      	movs	r0, #37	; 0x25
 80029fc:	f000 fe46 	bl	800368c <SX1272Write>
            SX1272Write( REG_PREAMBLELSB, preambleLen & 0xFF );
 8002a00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	4619      	mov	r1, r3
 8002a06:	2026      	movs	r0, #38	; 0x26
 8002a08:	f000 fe40 	bl	800368c <SX1272Write>
                         ( SX1272Read( REG_PACKETCONFIG1 ) &
 8002a0c:	2030      	movs	r0, #48	; 0x30
 8002a0e:	f000 fe4f 	bl	80036b0 <SX1272Read>
 8002a12:	4603      	mov	r3, r0
 8002a14:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_CRC_MASK &
 8002a16:	f003 036f 	and.w	r3, r3, #111	; 0x6f
 8002a1a:	b25b      	sxtb	r3, r3
                           RF_PACKETCONFIG1_PACKETFORMAT_MASK ) |
 8002a1c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002a20:	2a00      	cmp	r2, #0
 8002a22:	d001      	beq.n	8002a28 <SX1272SetTxConfig+0x138>
 8002a24:	2200      	movs	r2, #0
 8002a26:	e001      	b.n	8002a2c <SX1272SetTxConfig+0x13c>
 8002a28:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	b25a      	sxtb	r2, r3
                           ( crcOn << 4 ) );
 8002a30:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002a34:	011b      	lsls	r3, r3, #4
                           ( ( fixLen == 1 ) ? RF_PACKETCONFIG1_PACKETFORMAT_FIXED : RF_PACKETCONFIG1_PACKETFORMAT_VARIABLE ) |
 8002a36:	b25b      	sxtb	r3, r3
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	b25b      	sxtb	r3, r3
            SX1272Write( REG_PACKETCONFIG1,
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	4619      	mov	r1, r3
 8002a40:	2030      	movs	r0, #48	; 0x30
 8002a42:	f000 fe23 	bl	800368c <SX1272Write>
            SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) | RF_PACKETCONFIG2_DATAMODE_PACKET ) );
 8002a46:	2031      	movs	r0, #49	; 0x31
 8002a48:	f000 fe32 	bl	80036b0 <SX1272Read>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	4619      	mov	r1, r3
 8002a56:	2031      	movs	r0, #49	; 0x31
 8002a58:	f000 fe18 	bl	800368c <SX1272Write>
        break;
 8002a5c:	e0d9      	b.n	8002c12 <SX1272SetTxConfig+0x322>
            SX1272.Settings.LoRa.Power = power;
 8002a5e:	4a74      	ldr	r2, [pc, #464]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a60:	7bbb      	ldrb	r3, [r7, #14]
 8002a62:	f882 30c8 	strb.w	r3, [r2, #200]	; 0xc8
            SX1272.Settings.LoRa.Bandwidth = bandwidth;
 8002a66:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8c2 30cc 	str.w	r3, [r2, #204]	; 0xcc
            SX1272.Settings.LoRa.Datarate = datarate;
 8002a6e:	4a70      	ldr	r2, [pc, #448]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a70:	6a3b      	ldr	r3, [r7, #32]
 8002a72:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
            SX1272.Settings.LoRa.Coderate = coderate;
 8002a76:	4a6e      	ldr	r2, [pc, #440]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a78:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002a7c:	f882 30d5 	strb.w	r3, [r2, #213]	; 0xd5
            SX1272.Settings.LoRa.PreambleLen = preambleLen;
 8002a80:	4a6b      	ldr	r2, [pc, #428]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a82:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002a84:	f8a2 30d6 	strh.w	r3, [r2, #214]	; 0xd6
            SX1272.Settings.LoRa.FixLen = fixLen;
 8002a88:	4a69      	ldr	r2, [pc, #420]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a8a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002a8e:	f882 30d8 	strb.w	r3, [r2, #216]	; 0xd8
            SX1272.Settings.LoRa.FreqHopOn = freqHopOn;
 8002a92:	4a67      	ldr	r2, [pc, #412]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a94:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002a98:	f882 30db 	strb.w	r3, [r2, #219]	; 0xdb
            SX1272.Settings.LoRa.HopPeriod = hopPeriod;
 8002a9c:	4a64      	ldr	r2, [pc, #400]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002a9e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8002aa2:	f882 30dc 	strb.w	r3, [r2, #220]	; 0xdc
            SX1272.Settings.LoRa.CrcOn = crcOn;
 8002aa6:	4a62      	ldr	r2, [pc, #392]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002aa8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002aac:	f882 30da 	strb.w	r3, [r2, #218]	; 0xda
            SX1272.Settings.LoRa.IqInverted = iqInverted;
 8002ab0:	4a5f      	ldr	r2, [pc, #380]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002ab2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8002ab6:	f882 30dd 	strb.w	r3, [r2, #221]	; 0xdd
            SX1272.Settings.LoRa.TxTimeout = timeout;
 8002aba:	4a5d      	ldr	r2, [pc, #372]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
            if( datarate > 12 )
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d902      	bls.n	8002ace <SX1272SetTxConfig+0x1de>
                datarate = 12;
 8002ac8:	230c      	movs	r3, #12
 8002aca:	623b      	str	r3, [r7, #32]
 8002acc:	e004      	b.n	8002ad8 <SX1272SetTxConfig+0x1e8>
            else if( datarate < 6 )
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	d801      	bhi.n	8002ad8 <SX1272SetTxConfig+0x1e8>
                datarate = 6;
 8002ad4:	2306      	movs	r3, #6
 8002ad6:	623b      	str	r3, [r7, #32]
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d105      	bne.n	8002aea <SX1272SetTxConfig+0x1fa>
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	2b0b      	cmp	r3, #11
 8002ae2:	d008      	beq.n	8002af6 <SX1272SetTxConfig+0x206>
 8002ae4:	6a3b      	ldr	r3, [r7, #32]
 8002ae6:	2b0c      	cmp	r3, #12
 8002ae8:	d005      	beq.n	8002af6 <SX1272SetTxConfig+0x206>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <SX1272SetTxConfig+0x210>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8002af0:	6a3b      	ldr	r3, [r7, #32]
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d104      	bne.n	8002b00 <SX1272SetTxConfig+0x210>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x01;
 8002af6:	4b4e      	ldr	r3, [pc, #312]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
 8002afe:	e003      	b.n	8002b08 <SX1272SetTxConfig+0x218>
                SX1272.Settings.LoRa.LowDatarateOptimize = 0x00;
 8002b00:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 8002b08:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002b0a:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d011      	beq.n	8002b36 <SX1272SetTxConfig+0x246>
                SX1272Write( REG_LR_PLLHOP, ( SX1272Read( REG_LR_PLLHOP ) & RFLR_PLLHOP_FASTHOP_MASK ) | RFLR_PLLHOP_FASTHOP_ON );
 8002b12:	204b      	movs	r0, #75	; 0x4b
 8002b14:	f000 fdcc 	bl	80036b0 <SX1272Read>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	204b      	movs	r0, #75	; 0x4b
 8002b24:	f000 fdb2 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_HOPPERIOD, SX1272.Settings.LoRa.HopPeriod );
 8002b28:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002b2a:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
 8002b2e:	4619      	mov	r1, r3
 8002b30:	2024      	movs	r0, #36	; 0x24
 8002b32:	f000 fdab 	bl	800368c <SX1272Write>
                         ( SX1272Read( REG_LR_MODEMCONFIG1 ) &
 8002b36:	201d      	movs	r0, #29
 8002b38:	f000 fdba 	bl	80036b0 <SX1272Read>
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	019b      	lsls	r3, r3, #6
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002b50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	b2db      	uxtb	r3, r3
                           ( bandwidth << 6 ) | ( coderate << 3 ) |
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	b2da      	uxtb	r2, r3
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002b5c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	4313      	orrs	r3, r2
 8002b66:	b2db      	uxtb	r3, r3
                           SX1272.Settings.LoRa.LowDatarateOptimize );
 8002b68:	4a31      	ldr	r2, [pc, #196]	; (8002c30 <SX1272SetTxConfig+0x340>)
 8002b6a:	f892 20d4 	ldrb.w	r2, [r2, #212]	; 0xd4
                           ( fixLen << 2 ) | ( crcOn << 1 ) |
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG1,
 8002b72:	4619      	mov	r1, r3
 8002b74:	201d      	movs	r0, #29
 8002b76:	f000 fd89 	bl	800368c <SX1272Write>
                        ( SX1272Read( REG_LR_MODEMCONFIG2 ) &
 8002b7a:	201e      	movs	r0, #30
 8002b7c:	f000 fd98 	bl	80036b0 <SX1272Read>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f003 030f 	and.w	r3, r3, #15
 8002b86:	b2da      	uxtb	r2, r3
                          ( datarate << 4 ) );
 8002b88:	6a3b      	ldr	r3, [r7, #32]
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	b2db      	uxtb	r3, r3
            SX1272Write( REG_LR_MODEMCONFIG2,
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	4619      	mov	r1, r3
 8002b96:	201e      	movs	r0, #30
 8002b98:	f000 fd78 	bl	800368c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLEMSB, ( preambleLen >> 8 ) & 0x00FF );
 8002b9c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	2020      	movs	r0, #32
 8002ba8:	f000 fd70 	bl	800368c <SX1272Write>
            SX1272Write( REG_LR_PREAMBLELSB, preambleLen & 0xFF );
 8002bac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	2021      	movs	r0, #33	; 0x21
 8002bb4:	f000 fd6a 	bl	800368c <SX1272Write>
            if( datarate == 6 )
 8002bb8:	6a3b      	ldr	r3, [r7, #32]
 8002bba:	2b06      	cmp	r3, #6
 8002bbc:	d114      	bne.n	8002be8 <SX1272SetTxConfig+0x2f8>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002bbe:	2031      	movs	r0, #49	; 0x31
 8002bc0:	f000 fd76 	bl	80036b0 <SX1272Read>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	b25b      	sxtb	r3, r3
 8002bc8:	f023 0307 	bic.w	r3, r3, #7
 8002bcc:	b25b      	sxtb	r3, r3
                               RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002bce:	f043 0305 	orr.w	r3, r3, #5
 8002bd2:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	2031      	movs	r0, #49	; 0x31
 8002bda:	f000 fd57 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002bde:	210c      	movs	r1, #12
 8002be0:	2037      	movs	r0, #55	; 0x37
 8002be2:	f000 fd53 	bl	800368c <SX1272Write>
        break;
 8002be6:	e013      	b.n	8002c10 <SX1272SetTxConfig+0x320>
                             ( SX1272Read( REG_LR_DETECTOPTIMIZE ) &
 8002be8:	2031      	movs	r0, #49	; 0x31
 8002bea:	f000 fd61 	bl	80036b0 <SX1272Read>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	b25b      	sxtb	r3, r3
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	b25b      	sxtb	r3, r3
                             RFLR_DETECTIONOPTIMIZE_MASK ) |
 8002bf8:	f043 0303 	orr.w	r3, r3, #3
 8002bfc:	b25b      	sxtb	r3, r3
                SX1272Write( REG_LR_DETECTOPTIMIZE,
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4619      	mov	r1, r3
 8002c02:	2031      	movs	r0, #49	; 0x31
 8002c04:	f000 fd42 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_DETECTIONTHRESHOLD,
 8002c08:	210a      	movs	r1, #10
 8002c0a:	2037      	movs	r0, #55	; 0x37
 8002c0c:	f000 fd3e 	bl	800368c <SX1272Write>
        break;
 8002c10:	bf00      	nop
}
 8002c12:	bf00      	nop
 8002c14:	3714      	adds	r7, #20
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd90      	pop	{r4, r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	f3af 8000 	nop.w
 8002c20:	00000000 	.word	0x00000000
 8002c24:	404e8480 	.word	0x404e8480
 8002c28:	00000000 	.word	0x00000000
 8002c2c:	417e8480 	.word	0x417e8480
 8002c30:	20000170 	.word	0x20000170
 8002c34:	00000000 	.word	0x00000000

08002c38 <SX1272GetTimeOnAir>:

uint32_t SX1272GetTimeOnAir( RadioModems_t modem, uint8_t pktLen )
{
 8002c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c3a:	b095      	sub	sp, #84	; 0x54
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	460a      	mov	r2, r1
 8002c42:	71fb      	strb	r3, [r7, #7]
 8002c44:	4613      	mov	r3, r2
 8002c46:	71bb      	strb	r3, [r7, #6]
    uint32_t airTime = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	64fb      	str	r3, [r7, #76]	; 0x4c

    switch( modem )
 8002c4c:	79fb      	ldrb	r3, [r7, #7]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <SX1272GetTimeOnAir+0x22>
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	f000 8094 	beq.w	8002d80 <SX1272GetTimeOnAir+0x148>
 8002c58:	e1a4      	b.n	8002fa4 <SX1272GetTimeOnAir+0x36c>
    {
    case MODEM_FSK:
        {
            airTime = round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002c5a:	4baf      	ldr	r3, [pc, #700]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002c5c:	f8b3 30a8 	ldrh.w	r3, [r3, #168]	; 0xa8
 8002c60:	461c      	mov	r4, r3
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002c62:	2027      	movs	r0, #39	; 0x27
 8002c64:	f000 fd24 	bl	80036b0 <SX1272Read>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002c6e:	3301      	adds	r3, #1
            airTime = round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002c70:	4423      	add	r3, r4
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7fd fc02 	bl	800047c <__aeabi_i2d>
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460d      	mov	r5, r1
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002c7c:	4ba6      	ldr	r3, [pc, #664]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002c7e:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <SX1272GetTimeOnAir+0x58>
 8002c86:	f04f 0000 	mov.w	r0, #0
 8002c8a:	f04f 0100 	mov.w	r1, #0
 8002c8e:	e002      	b.n	8002c96 <SX1272GetTimeOnAir+0x5e>
 8002c90:	f04f 0000 	mov.w	r0, #0
 8002c94:	49a1      	ldr	r1, [pc, #644]	; (8002f1c <SX1272GetTimeOnAir+0x2e4>)
                                     ( ( SX1272Read( REG_SYNCCONFIG ) & ~RF_SYNCCONFIG_SYNCSIZE_MASK ) + 1 ) +
 8002c96:	4622      	mov	r2, r4
 8002c98:	462b      	mov	r3, r5
 8002c9a:	f7fd faa3 	bl	80001e4 <__adddf3>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	4625      	mov	r5, r4
 8002ca4:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002ca6:	2030      	movs	r0, #48	; 0x30
 8002ca8:	f000 fd02 	bl	80036b0 <SX1272Read>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f023 03f9 	bic.w	r3, r3, #249	; 0xf9
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <SX1272GetTimeOnAir+0x86>
 8002cb6:	f04f 0000 	mov.w	r0, #0
 8002cba:	4998      	ldr	r1, [pc, #608]	; (8002f1c <SX1272GetTimeOnAir+0x2e4>)
 8002cbc:	e003      	b.n	8002cc6 <SX1272GetTimeOnAir+0x8e>
 8002cbe:	f04f 0000 	mov.w	r0, #0
 8002cc2:	f04f 0100 	mov.w	r1, #0
                                     ( ( SX1272.Settings.Fsk.FixLen == 0x01 ) ? 0.0 : 1.0 ) +
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	462b      	mov	r3, r5
 8002cca:	f7fd fa8b 	bl	80001e4 <__adddf3>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	460c      	mov	r4, r1
 8002cd2:	4625      	mov	r5, r4
 8002cd4:	461c      	mov	r4, r3
                                     ( ( ( SX1272Read( REG_PACKETCONFIG1 ) & ~RF_PACKETCONFIG1_ADDRSFILTERING_MASK ) != 0x00 ) ? 1.0 : 0 ) +
 8002cd6:	79bb      	ldrb	r3, [r7, #6]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fbcf 	bl	800047c <__aeabi_i2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	f7fd fa7d 	bl	80001e4 <__adddf3>
 8002cea:	4603      	mov	r3, r0
 8002cec:	460c      	mov	r4, r1
 8002cee:	4625      	mov	r5, r4
 8002cf0:	461c      	mov	r4, r3
                                     pktLen +
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002cf2:	4b89      	ldr	r3, [pc, #548]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002cf4:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d004      	beq.n	8002d06 <SX1272GetTimeOnAir+0xce>
 8002cfc:	f04f 0000 	mov.w	r0, #0
 8002d00:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002d04:	e003      	b.n	8002d0e <SX1272GetTimeOnAir+0xd6>
 8002d06:	f04f 0000 	mov.w	r0, #0
 8002d0a:	f04f 0100 	mov.w	r1, #0
                                     pktLen +
 8002d0e:	4622      	mov	r2, r4
 8002d10:	462b      	mov	r3, r5
 8002d12:	f7fd fa67 	bl	80001e4 <__adddf3>
 8002d16:	4603      	mov	r3, r0
 8002d18:	460c      	mov	r4, r1
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	4621      	mov	r1, r4
            airTime = round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002d1e:	f04f 0200 	mov.w	r2, #0
 8002d22:	4b7f      	ldr	r3, [pc, #508]	; (8002f20 <SX1272GetTimeOnAir+0x2e8>)
 8002d24:	f7fd fc14 	bl	8000550 <__aeabi_dmul>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	4625      	mov	r5, r4
 8002d2e:	461c      	mov	r4, r3
                                     SX1272.Settings.Fsk.Datarate ) * 1000 );
 8002d30:	4b79      	ldr	r3, [pc, #484]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
                                     ( ( SX1272.Settings.Fsk.CrcOn == 0x01 ) ? 2.0 : 0 ) ) /
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fb90 	bl	800045c <__aeabi_ui2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4620      	mov	r0, r4
 8002d42:	4629      	mov	r1, r5
 8002d44:	f7fd fd2e 	bl	80007a4 <__aeabi_ddiv>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	4621      	mov	r1, r4
            airTime = round( ( 8 * ( SX1272.Settings.Fsk.PreambleLen +
 8002d50:	f04f 0200 	mov.w	r2, #0
 8002d54:	4b73      	ldr	r3, [pc, #460]	; (8002f24 <SX1272GetTimeOnAir+0x2ec>)
 8002d56:	f7fd fbfb 	bl	8000550 <__aeabi_dmul>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	460c      	mov	r4, r1
 8002d5e:	ec44 3b17 	vmov	d7, r3, r4
 8002d62:	eeb0 0a47 	vmov.f32	s0, s14
 8002d66:	eef0 0a67 	vmov.f32	s1, s15
 8002d6a:	f002 f89d 	bl	8004ea8 <round>
 8002d6e:	ec54 3b10 	vmov	r3, r4, d0
 8002d72:	4618      	mov	r0, r3
 8002d74:	4621      	mov	r1, r4
 8002d76:	f7fd fead 	bl	8000ad4 <__aeabi_d2uiz>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8002d7e:	e111      	b.n	8002fa4 <SX1272GetTimeOnAir+0x36c>
    case MODEM_LORA:
        {
            double bw = 0.0;
 8002d80:	f04f 0300 	mov.w	r3, #0
 8002d84:	f04f 0400 	mov.w	r4, #0
 8002d88:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
            switch( SX1272.Settings.LoRa.Bandwidth )
 8002d8c:	4b62      	ldr	r3, [pc, #392]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002d8e:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d00a      	beq.n	8002dac <SX1272GetTimeOnAir+0x174>
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d302      	bcc.n	8002da0 <SX1272GetTimeOnAir+0x168>
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d00c      	beq.n	8002db8 <SX1272GetTimeOnAir+0x180>
 8002d9e:	e011      	b.n	8002dc4 <SX1272GetTimeOnAir+0x18c>
            {
            case 0: // 125 kHz
                bw = 125000;
 8002da0:	a457      	add	r4, pc, #348	; (adr r4, 8002f00 <SX1272GetTimeOnAir+0x2c8>)
 8002da2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002da6:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8002daa:	e00b      	b.n	8002dc4 <SX1272GetTimeOnAir+0x18c>
            case 1: // 250 kHz
                bw = 250000;
 8002dac:	a456      	add	r4, pc, #344	; (adr r4, 8002f08 <SX1272GetTimeOnAir+0x2d0>)
 8002dae:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002db2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8002db6:	e005      	b.n	8002dc4 <SX1272GetTimeOnAir+0x18c>
            case 2: // 500 kHz
                bw = 500000;
 8002db8:	a455      	add	r4, pc, #340	; (adr r4, 8002f10 <SX1272GetTimeOnAir+0x2d8>)
 8002dba:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002dbe:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
                break;
 8002dc2:	bf00      	nop
            }

            // Symbol rate : time for one symbol (secs)
            double rs = bw / ( 1 << SX1272.Settings.LoRa.Datarate );
 8002dc4:	4b54      	ldr	r3, [pc, #336]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002dc6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002dca:	2201      	movs	r2, #1
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fd fb53 	bl	800047c <__aeabi_i2d>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	460c      	mov	r4, r1
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4623      	mov	r3, r4
 8002dde:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8002de2:	f7fd fcdf 	bl	80007a4 <__aeabi_ddiv>
 8002de6:	4603      	mov	r3, r0
 8002de8:	460c      	mov	r4, r1
 8002dea:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
            double ts = 1 / rs;
 8002dee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002df2:	f04f 0000 	mov.w	r0, #0
 8002df6:	4949      	ldr	r1, [pc, #292]	; (8002f1c <SX1272GetTimeOnAir+0x2e4>)
 8002df8:	f7fd fcd4 	bl	80007a4 <__aeabi_ddiv>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	460c      	mov	r4, r1
 8002e00:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
            // time of preamble
            double tPreamble = ( SX1272.Settings.LoRa.PreambleLen + 4.25 ) * ts;
 8002e04:	4b44      	ldr	r3, [pc, #272]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002e06:	f8b3 30d6 	ldrh.w	r3, [r3, #214]	; 0xd6
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7fd fb36 	bl	800047c <__aeabi_i2d>
 8002e10:	f04f 0200 	mov.w	r2, #0
 8002e14:	4b44      	ldr	r3, [pc, #272]	; (8002f28 <SX1272GetTimeOnAir+0x2f0>)
 8002e16:	f7fd f9e5 	bl	80001e4 <__adddf3>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	460c      	mov	r4, r1
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4623      	mov	r3, r4
 8002e22:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002e26:	f7fd fb93 	bl	8000550 <__aeabi_dmul>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	460c      	mov	r4, r1
 8002e2e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
            // Symbol length of payload and time
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8002e32:	79bb      	ldrb	r3, [r7, #6]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	461a      	mov	r2, r3
 8002e38:	4b37      	ldr	r3, [pc, #220]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002e3a:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	1ad3      	subs	r3, r2, r3
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 8002e42:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002e44:	f892 20da 	ldrb.w	r2, [r2, #218]	; 0xda
 8002e48:	0112      	lsls	r2, r2, #4
 8002e4a:	441a      	add	r2, r3
                                 ( SX1272.Settings.LoRa.FixLen ? 20 : 0 ) ) /
 8002e4c:	4b32      	ldr	r3, [pc, #200]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002e4e:	f893 30d8 	ldrb.w	r3, [r3, #216]	; 0xd8
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d001      	beq.n	8002e5a <SX1272GetTimeOnAir+0x222>
 8002e56:	2314      	movs	r3, #20
 8002e58:	e000      	b.n	8002e5c <SX1272GetTimeOnAir+0x224>
 8002e5a:	2300      	movs	r3, #0
                                 28 + 16 * SX1272.Settings.LoRa.CrcOn -
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	331c      	adds	r3, #28
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fafb 	bl	800045c <__aeabi_ui2d>
 8002e66:	4604      	mov	r4, r0
 8002e68:	460d      	mov	r5, r1
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002e6c:	f8d3 20d0 	ldr.w	r2, [r3, #208]	; 0xd0
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002e70:	4b29      	ldr	r3, [pc, #164]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002e72:	f893 30d4 	ldrb.w	r3, [r3, #212]	; 0xd4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <SX1272GetTimeOnAir+0x246>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e000      	b.n	8002e80 <SX1272GetTimeOnAir+0x248>
 8002e7e:	2300      	movs	r3, #0
                                 ( double )( 4 * ( SX1272.Settings.LoRa.Datarate -
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7fd fae9 	bl	800045c <__aeabi_ui2d>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd fc87 	bl	80007a4 <__aeabi_ddiv>
 8002e96:	4603      	mov	r3, r0
 8002e98:	460c      	mov	r4, r1
 8002e9a:	ec44 3b17 	vmov	d7, r3, r4
 8002e9e:	eeb0 0a47 	vmov.f32	s0, s14
 8002ea2:	eef0 0a67 	vmov.f32	s1, s15
 8002ea6:	f001 fefb 	bl	8004ca0 <ceil>
 8002eaa:	ec56 5b10 	vmov	r5, r6, d0
                                 ( SX1272.Settings.LoRa.Coderate + 4 );
 8002eae:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <SX1272GetTimeOnAir+0x2e0>)
 8002eb0:	f893 30d5 	ldrb.w	r3, [r3, #213]	; 0xd5
 8002eb4:	3304      	adds	r3, #4
                                 ( ( SX1272.Settings.LoRa.LowDatarateOptimize > 0 ) ? 2 : 0 ) ) ) ) *
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7fd fae0 	bl	800047c <__aeabi_i2d>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	460c      	mov	r4, r1
            double tmp = ceil( ( 8 * pktLen - 4 * SX1272.Settings.LoRa.Datarate +
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	4623      	mov	r3, r4
 8002ec4:	4628      	mov	r0, r5
 8002ec6:	4631      	mov	r1, r6
 8002ec8:	f7fd fb42 	bl	8000550 <__aeabi_dmul>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	460c      	mov	r4, r1
 8002ed0:	e9c7 3408 	strd	r3, r4, [r7, #32]
            double nPayload = 8 + ( ( tmp > 0 ) ? tmp : 0 );
 8002ed4:	f04f 0200 	mov.w	r2, #0
 8002ed8:	f04f 0300 	mov.w	r3, #0
 8002edc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ee0:	f7fd fdc6 	bl	8000a70 <__aeabi_dcmpgt>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d020      	beq.n	8002f2c <SX1272GetTimeOnAir+0x2f4>
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	4b0c      	ldr	r3, [pc, #48]	; (8002f20 <SX1272GetTimeOnAir+0x2e8>)
 8002ef0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002ef4:	f7fd f976 	bl	80001e4 <__adddf3>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	460c      	mov	r4, r1
 8002efc:	e019      	b.n	8002f32 <SX1272GetTimeOnAir+0x2fa>
 8002efe:	bf00      	nop
 8002f00:	00000000 	.word	0x00000000
 8002f04:	40fe8480 	.word	0x40fe8480
 8002f08:	00000000 	.word	0x00000000
 8002f0c:	410e8480 	.word	0x410e8480
 8002f10:	00000000 	.word	0x00000000
 8002f14:	411e8480 	.word	0x411e8480
 8002f18:	20000170 	.word	0x20000170
 8002f1c:	3ff00000 	.word	0x3ff00000
 8002f20:	40200000 	.word	0x40200000
 8002f24:	408f4000 	.word	0x408f4000
 8002f28:	40110000 	.word	0x40110000
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	4c21      	ldr	r4, [pc, #132]	; (8002fb8 <SX1272GetTimeOnAir+0x380>)
 8002f32:	e9c7 3406 	strd	r3, r4, [r7, #24]
            double tPayload = nPayload * ts;
 8002f36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002f3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f3e:	f7fd fb07 	bl	8000550 <__aeabi_dmul>
 8002f42:	4603      	mov	r3, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	e9c7 3404 	strd	r3, r4, [r7, #16]
            // Time on air
            double tOnAir = tPreamble + tPayload;
 8002f4a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f4e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002f52:	f7fd f947 	bl	80001e4 <__adddf3>
 8002f56:	4603      	mov	r3, r0
 8002f58:	460c      	mov	r4, r1
 8002f5a:	e9c7 3402 	strd	r3, r4, [r7, #8]
            // return ms secs
            airTime = floor( tOnAir * 1000 + 0.999 );
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	4b16      	ldr	r3, [pc, #88]	; (8002fbc <SX1272GetTimeOnAir+0x384>)
 8002f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f68:	f7fd faf2 	bl	8000550 <__aeabi_dmul>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	460c      	mov	r4, r1
 8002f70:	4618      	mov	r0, r3
 8002f72:	4621      	mov	r1, r4
 8002f74:	a30e      	add	r3, pc, #56	; (adr r3, 8002fb0 <SX1272GetTimeOnAir+0x378>)
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f7fd f933 	bl	80001e4 <__adddf3>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	ec44 3b17 	vmov	d7, r3, r4
 8002f86:	eeb0 0a47 	vmov.f32	s0, s14
 8002f8a:	eef0 0a67 	vmov.f32	s1, s15
 8002f8e:	f001 ff07 	bl	8004da0 <floor>
 8002f92:	ec54 3b10 	vmov	r3, r4, d0
 8002f96:	4618      	mov	r0, r3
 8002f98:	4621      	mov	r1, r4
 8002f9a:	f7fd fd9b 	bl	8000ad4 <__aeabi_d2uiz>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        break;
 8002fa2:	bf00      	nop
    }
    return airTime;
 8002fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3754      	adds	r7, #84	; 0x54
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	d916872b 	.word	0xd916872b
 8002fb4:	3feff7ce 	.word	0x3feff7ce
 8002fb8:	40200000 	.word	0x40200000
 8002fbc:	408f4000 	.word	0x408f4000

08002fc0 <SX1272Send>:

void SX1272Send( uint8_t *buffer, uint8_t size )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	460b      	mov	r3, r1
 8002fca:	70fb      	strb	r3, [r7, #3]
    uint32_t txTimeout = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]

    switch( SX1272.Settings.Modem )
 8002fd0:	4b54      	ldr	r3, [pc, #336]	; (8003124 <SX1272Send+0x164>)
 8002fd2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <SX1272Send+0x20>
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d04a      	beq.n	8003074 <SX1272Send+0xb4>
 8002fde:	e09a      	b.n	8003116 <SX1272Send+0x156>
    {
    case MODEM_FSK:
        {
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8002fe0:	4b50      	ldr	r3, [pc, #320]	; (8003124 <SX1272Send+0x164>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
            SX1272.Settings.FskPacketHandler.Size = size;
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	4b4d      	ldr	r3, [pc, #308]	; (8003124 <SX1272Send+0x164>)
 8002fee:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2

            if( SX1272.Settings.Fsk.FixLen == false )
 8002ff2:	4b4c      	ldr	r3, [pc, #304]	; (8003124 <SX1272Send+0x164>)
 8002ff4:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8002ff8:	f083 0301 	eor.w	r3, r3, #1
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <SX1272Send+0x4e>
            {
                SX1272WriteFifo( ( uint8_t* )&size, 1 );
 8003002:	1cfb      	adds	r3, r7, #3
 8003004:	2101      	movs	r1, #1
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fbca 	bl	80037a0 <SX1272WriteFifo>
 800300c:	e004      	b.n	8003018 <SX1272Send+0x58>
            }
            else
            {
                SX1272Write( REG_PAYLOADLENGTH, size );
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	4619      	mov	r1, r3
 8003012:	2032      	movs	r0, #50	; 0x32
 8003014:	f000 fb3a 	bl	800368c <SX1272Write>
            }

            if( ( size > 0 ) && ( size <= 64 ) )
 8003018:	78fb      	ldrb	r3, [r7, #3]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d007      	beq.n	800302e <SX1272Send+0x6e>
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	2b40      	cmp	r3, #64	; 0x40
 8003022:	d804      	bhi.n	800302e <SX1272Send+0x6e>
            {
                SX1272.Settings.FskPacketHandler.ChunkSize = size;
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	4b3f      	ldr	r3, [pc, #252]	; (8003124 <SX1272Send+0x164>)
 8003028:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
 800302c:	e00a      	b.n	8003044 <SX1272Send+0x84>
            }
            else
            {
                memcpy1( RxTxBuffer, buffer, size );
 800302e:	78fb      	ldrb	r3, [r7, #3]
 8003030:	b29b      	uxth	r3, r3
 8003032:	461a      	mov	r2, r3
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	483c      	ldr	r0, [pc, #240]	; (8003128 <SX1272Send+0x168>)
 8003038:	f001 f9ac 	bl	8004394 <memcpy1>
                SX1272.Settings.FskPacketHandler.ChunkSize = 32;
 800303c:	4b39      	ldr	r3, [pc, #228]	; (8003124 <SX1272Send+0x164>)
 800303e:	2220      	movs	r2, #32
 8003040:	f883 20c7 	strb.w	r2, [r3, #199]	; 0xc7
            }

            // Write payload buffer
            SX1272WriteFifo( buffer, SX1272.Settings.FskPacketHandler.ChunkSize );
 8003044:	4b37      	ldr	r3, [pc, #220]	; (8003124 <SX1272Send+0x164>)
 8003046:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800304a:	4619      	mov	r1, r3
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 fba7 	bl	80037a0 <SX1272WriteFifo>
            SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 8003052:	4b34      	ldr	r3, [pc, #208]	; (8003124 <SX1272Send+0x164>)
 8003054:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 8003058:	4b32      	ldr	r3, [pc, #200]	; (8003124 <SX1272Send+0x164>)
 800305a:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 800305e:	b29b      	uxth	r3, r3
 8003060:	4413      	add	r3, r2
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b2f      	ldr	r3, [pc, #188]	; (8003124 <SX1272Send+0x164>)
 8003066:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
            txTimeout = SX1272.Settings.Fsk.TxTimeout;
 800306a:	4b2e      	ldr	r3, [pc, #184]	; (8003124 <SX1272Send+0x164>)
 800306c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003070:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003072:	e050      	b.n	8003116 <SX1272Send+0x156>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 8003074:	4b2b      	ldr	r3, [pc, #172]	; (8003124 <SX1272Send+0x164>)
 8003076:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800307a:	2b00      	cmp	r3, #0
 800307c:	d00f      	beq.n	800309e <SX1272Send+0xde>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_ON ) );
 800307e:	2033      	movs	r0, #51	; 0x33
 8003080:	f000 fb16 	bl	80036b0 <SX1272Read>
 8003084:	4603      	mov	r3, r0
 8003086:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	4619      	mov	r1, r3
 800308e:	2033      	movs	r0, #51	; 0x33
 8003090:	f000 fafc 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003094:	2119      	movs	r1, #25
 8003096:	203b      	movs	r0, #59	; 0x3b
 8003098:	f000 faf8 	bl	800368c <SX1272Write>
 800309c:	e013      	b.n	80030c6 <SX1272Send+0x106>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800309e:	2033      	movs	r0, #51	; 0x33
 80030a0:	f000 fb06 	bl	80036b0 <SX1272Read>
 80030a4:	4603      	mov	r3, r0
 80030a6:	b25b      	sxtb	r3, r3
 80030a8:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 80030ac:	b25b      	sxtb	r3, r3
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	b25b      	sxtb	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	4619      	mov	r1, r3
 80030b8:	2033      	movs	r0, #51	; 0x33
 80030ba:	f000 fae7 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 80030be:	211d      	movs	r1, #29
 80030c0:	203b      	movs	r0, #59	; 0x3b
 80030c2:	f000 fae3 	bl	800368c <SX1272Write>
            }

            SX1272.Settings.LoRaPacketHandler.Size = size;
 80030c6:	78fa      	ldrb	r2, [r7, #3]
 80030c8:	4b16      	ldr	r3, [pc, #88]	; (8003124 <SX1272Send+0x164>)
 80030ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

            // Initializes the payload size
            SX1272Write( REG_LR_PAYLOADLENGTH, size );
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	4619      	mov	r1, r3
 80030d2:	2022      	movs	r0, #34	; 0x22
 80030d4:	f000 fada 	bl	800368c <SX1272Write>

            // Full buffer used for Tx
            SX1272Write( REG_LR_FIFOTXBASEADDR, 0 );
 80030d8:	2100      	movs	r1, #0
 80030da:	200e      	movs	r0, #14
 80030dc:	f000 fad6 	bl	800368c <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 80030e0:	2100      	movs	r1, #0
 80030e2:	200d      	movs	r0, #13
 80030e4:	f000 fad2 	bl	800368c <SX1272Write>

            // FIFO operations can not take place in Sleep mode
            if( ( SX1272Read( REG_OPMODE ) & ~RF_OPMODE_MASK ) == RF_OPMODE_SLEEP )
 80030e8:	2001      	movs	r0, #1
 80030ea:	f000 fae1 	bl	80036b0 <SX1272Read>
 80030ee:	4603      	mov	r3, r0
 80030f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <SX1272Send+0x142>
            {
                SX1272SetStby( );
 80030f8:	f000 f830 	bl	800315c <SX1272SetStby>
                DelayMs( 1 );
 80030fc:	2001      	movs	r0, #1
 80030fe:	f001 f87d 	bl	80041fc <DelayMs>
            }
            // Write payload buffer
            SX1272WriteFifo( buffer, size );
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	4619      	mov	r1, r3
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 fb4a 	bl	80037a0 <SX1272WriteFifo>
            txTimeout = SX1272.Settings.LoRa.TxTimeout;
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <SX1272Send+0x164>)
 800310e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003112:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003114:	bf00      	nop
    }

    SX1272SetTx( txTimeout );
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f922 	bl	8003360 <SX1272SetTx>
}
 800311c:	bf00      	nop
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000170 	.word	0x20000170
 8003128:	20000048 	.word	0x20000048

0800312c <SX1272SetSleep>:

void SX1272SetSleep( void )
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003130:	4807      	ldr	r0, [pc, #28]	; (8003150 <SX1272SetSleep+0x24>)
 8003132:	f001 f891 	bl	8004258 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003136:	4807      	ldr	r0, [pc, #28]	; (8003154 <SX1272SetSleep+0x28>)
 8003138:	f001 f88e 	bl	8004258 <TimerStop>

    SX1272SetOpMode( RF_OPMODE_SLEEP );
 800313c:	2000      	movs	r0, #0
 800313e:	f000 fa2c 	bl	800359a <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 8003142:	4b05      	ldr	r3, [pc, #20]	; (8003158 <SX1272SetSleep+0x2c>)
 8003144:	2200      	movs	r2, #0
 8003146:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800314a:	bf00      	nop
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20000288 	.word	0x20000288
 8003154:	20000260 	.word	0x20000260
 8003158:	20000170 	.word	0x20000170

0800315c <SX1272SetStby>:

void SX1272SetStby( void )
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
    TimerStop( &RxTimeoutTimer );
 8003160:	4807      	ldr	r0, [pc, #28]	; (8003180 <SX1272SetStby+0x24>)
 8003162:	f001 f879 	bl	8004258 <TimerStop>
    TimerStop( &TxTimeoutTimer );
 8003166:	4807      	ldr	r0, [pc, #28]	; (8003184 <SX1272SetStby+0x28>)
 8003168:	f001 f876 	bl	8004258 <TimerStop>

    SX1272SetOpMode( RF_OPMODE_STANDBY );
 800316c:	2001      	movs	r0, #1
 800316e:	f000 fa14 	bl	800359a <SX1272SetOpMode>
    SX1272.Settings.State = RF_IDLE;
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <SX1272SetStby+0x2c>)
 8003174:	2200      	movs	r2, #0
 8003176:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000288 	.word	0x20000288
 8003184:	20000260 	.word	0x20000260
 8003188:	20000170 	.word	0x20000170

0800318c <SX1272SetRx>:

void SX1272SetRx( uint32_t timeout )
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
    bool rxContinuous = false;
 8003194:	2300      	movs	r3, #0
 8003196:	73fb      	strb	r3, [r7, #15]

    switch( SX1272.Settings.Modem )
 8003198:	4b6d      	ldr	r3, [pc, #436]	; (8003350 <SX1272SetRx+0x1c4>)
 800319a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <SX1272SetRx+0x1c>
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d03e      	beq.n	8003224 <SX1272SetRx+0x98>
 80031a6:	e097      	b.n	80032d8 <SX1272SetRx+0x14c>
    {
    case MODEM_FSK:
        {
            rxContinuous = SX1272.Settings.Fsk.RxContinuous;
 80031a8:	4b69      	ldr	r3, [pc, #420]	; (8003350 <SX1272SetRx+0x1c4>)
 80031aa:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80031ae:	73fb      	strb	r3, [r7, #15]
            // DIO1=FifoLevel
            // DIO2=SyncAddr
            // DIO3=FifoEmpty
            // DIO4=Preamble
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80031b0:	2040      	movs	r0, #64	; 0x40
 80031b2:	f000 fa7d 	bl	80036b0 <SX1272Read>
 80031b6:	4603      	mov	r3, r0
 80031b8:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
                                                                            RF_DIOMAPPING1_DIO0_00 |
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_00 |
 80031c0:	f043 030c 	orr.w	r3, r3, #12
 80031c4:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	4619      	mov	r1, r3
 80031ca:	2040      	movs	r0, #64	; 0x40
 80031cc:	f000 fa5e 	bl	800368c <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO2_11 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80031d0:	2041      	movs	r0, #65	; 0x41
 80031d2:	f000 fa6d 	bl	80036b0 <SX1272Read>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f063 033e 	orn	r3, r3, #62	; 0x3e
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	4619      	mov	r1, r3
 80031e0:	2041      	movs	r0, #65	; 0x41
 80031e2:	f000 fa53 	bl	800368c <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) |
                                                                            RF_DIOMAPPING2_DIO4_11 |
                                                                            RF_DIOMAPPING2_MAP_PREAMBLEDETECT );

            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 80031e6:	2035      	movs	r0, #53	; 0x35
 80031e8:	f000 fa62 	bl	80036b0 <SX1272Read>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	4b56      	ldr	r3, [pc, #344]	; (8003350 <SX1272SetRx+0x1c4>)
 80031f6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6

            SX1272Write( REG_RXCONFIG, RF_RXCONFIG_AFCAUTO_ON | RF_RXCONFIG_AGCAUTO_ON | RF_RXCONFIG_RXTRIGER_PREAMBLEDETECT );
 80031fa:	211e      	movs	r1, #30
 80031fc:	200d      	movs	r0, #13
 80031fe:	f000 fa45 	bl	800368c <SX1272Write>

            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8003202:	4b53      	ldr	r3, [pc, #332]	; (8003350 <SX1272SetRx+0x1c4>)
 8003204:	2200      	movs	r2, #0
 8003206:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 800320a:	4b51      	ldr	r3, [pc, #324]	; (8003350 <SX1272SetRx+0x1c4>)
 800320c:	2200      	movs	r2, #0
 800320e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003212:	4b4f      	ldr	r3, [pc, #316]	; (8003350 <SX1272SetRx+0x1c4>)
 8003214:	2200      	movs	r2, #0
 8003216:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
            SX1272.Settings.FskPacketHandler.Size = 0;
 800321a:	4b4d      	ldr	r3, [pc, #308]	; (8003350 <SX1272SetRx+0x1c4>)
 800321c:	2200      	movs	r2, #0
 800321e:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
        }
        break;
 8003222:	e059      	b.n	80032d8 <SX1272SetRx+0x14c>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.IqInverted == true )
 8003224:	4b4a      	ldr	r3, [pc, #296]	; (8003350 <SX1272SetRx+0x1c4>)
 8003226:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00f      	beq.n	800324e <SX1272SetRx+0xc2>
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_ON | RFLR_INVERTIQ_TX_OFF ) );
 800322e:	2033      	movs	r0, #51	; 0x33
 8003230:	f000 fa3e 	bl	80036b0 <SX1272Read>
 8003234:	4603      	mov	r3, r0
 8003236:	f043 0341 	orr.w	r3, r3, #65	; 0x41
 800323a:	b2db      	uxtb	r3, r3
 800323c:	4619      	mov	r1, r3
 800323e:	2033      	movs	r0, #51	; 0x33
 8003240:	f000 fa24 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_ON );
 8003244:	2119      	movs	r1, #25
 8003246:	203b      	movs	r0, #59	; 0x3b
 8003248:	f000 fa20 	bl	800368c <SX1272Write>
 800324c:	e013      	b.n	8003276 <SX1272SetRx+0xea>
            }
            else
            {
                SX1272Write( REG_LR_INVERTIQ, ( ( SX1272Read( REG_LR_INVERTIQ ) & RFLR_INVERTIQ_TX_MASK & RFLR_INVERTIQ_RX_MASK ) | RFLR_INVERTIQ_RX_OFF | RFLR_INVERTIQ_TX_OFF ) );
 800324e:	2033      	movs	r0, #51	; 0x33
 8003250:	f000 fa2e 	bl	80036b0 <SX1272Read>
 8003254:	4603      	mov	r3, r0
 8003256:	b25b      	sxtb	r3, r3
 8003258:	f023 0341 	bic.w	r3, r3, #65	; 0x41
 800325c:	b25b      	sxtb	r3, r3
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	b25b      	sxtb	r3, r3
 8003264:	b2db      	uxtb	r3, r3
 8003266:	4619      	mov	r1, r3
 8003268:	2033      	movs	r0, #51	; 0x33
 800326a:	f000 fa0f 	bl	800368c <SX1272Write>
                SX1272Write( REG_LR_INVERTIQ2, RFLR_INVERTIQ2_OFF );
 800326e:	211d      	movs	r1, #29
 8003270:	203b      	movs	r0, #59	; 0x3b
 8003272:	f000 fa0b 	bl	800368c <SX1272Write>
            }

            rxContinuous = SX1272.Settings.LoRa.RxContinuous;
 8003276:	4b36      	ldr	r3, [pc, #216]	; (8003350 <SX1272SetRx+0x1c4>)
 8003278:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 800327c:	73fb      	strb	r3, [r7, #15]

            if( SX1272.Settings.LoRa.FreqHopOn == true )
 800327e:	4b34      	ldr	r3, [pc, #208]	; (8003350 <SX1272SetRx+0x1c4>)
 8003280:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00f      	beq.n	80032a8 <SX1272SetRx+0x11c>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 8003288:	211d      	movs	r1, #29
 800328a:	2011      	movs	r0, #17
 800328c:	f000 f9fe 	bl	800368c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK  ) | RFLR_DIOMAPPING1_DIO0_00 | RFLR_DIOMAPPING1_DIO2_00 );
 8003290:	2040      	movs	r0, #64	; 0x40
 8003292:	f000 fa0d 	bl	80036b0 <SX1272Read>
 8003296:	4603      	mov	r3, r0
 8003298:	f003 0333 	and.w	r3, r3, #51	; 0x33
 800329c:	b2db      	uxtb	r3, r3
 800329e:	4619      	mov	r1, r3
 80032a0:	2040      	movs	r0, #64	; 0x40
 80032a2:	f000 f9f3 	bl	800368c <SX1272Write>
 80032a6:	e00e      	b.n	80032c6 <SX1272SetRx+0x13a>
            }
            else
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, //RFLR_IRQFLAGS_RXTIMEOUT |
 80032a8:	211f      	movs	r1, #31
 80032aa:	2011      	movs	r0, #17
 80032ac:	f000 f9ee 	bl	800368c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=RxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_00 );
 80032b0:	2040      	movs	r0, #64	; 0x40
 80032b2:	f000 f9fd 	bl	80036b0 <SX1272Read>
 80032b6:	4603      	mov	r3, r0
 80032b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	4619      	mov	r1, r3
 80032c0:	2040      	movs	r0, #64	; 0x40
 80032c2:	f000 f9e3 	bl	800368c <SX1272Write>
            }
            SX1272Write( REG_LR_FIFORXBASEADDR, 0 );
 80032c6:	2100      	movs	r1, #0
 80032c8:	200f      	movs	r0, #15
 80032ca:	f000 f9df 	bl	800368c <SX1272Write>
            SX1272Write( REG_LR_FIFOADDRPTR, 0 );
 80032ce:	2100      	movs	r1, #0
 80032d0:	200d      	movs	r0, #13
 80032d2:	f000 f9db 	bl	800368c <SX1272Write>
        }
        break;
 80032d6:	bf00      	nop
    }

    memset( RxTxBuffer, 0, ( size_t )RX_BUFFER_SIZE );
 80032d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032dc:	2100      	movs	r1, #0
 80032de:	481d      	ldr	r0, [pc, #116]	; (8003354 <SX1272SetRx+0x1c8>)
 80032e0:	f001 fcc1 	bl	8004c66 <memset>

    SX1272.Settings.State = RF_RX_RUNNING;
 80032e4:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <SX1272SetRx+0x1c4>)
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if( timeout != 0 )
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d006      	beq.n	8003300 <SX1272SetRx+0x174>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4818      	ldr	r0, [pc, #96]	; (8003358 <SX1272SetRx+0x1cc>)
 80032f6:	f001 f825 	bl	8004344 <TimerSetValue>
        TimerStart( &RxTimeoutTimer );
 80032fa:	4817      	ldr	r0, [pc, #92]	; (8003358 <SX1272SetRx+0x1cc>)
 80032fc:	f000 ffa2 	bl	8004244 <TimerStart>
    }

    if( SX1272.Settings.Modem == MODEM_FSK )
 8003300:	4b13      	ldr	r3, [pc, #76]	; (8003350 <SX1272SetRx+0x1c4>)
 8003302:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003306:	2b00      	cmp	r3, #0
 8003308:	d113      	bne.n	8003332 <SX1272SetRx+0x1a6>
    {
        SX1272SetOpMode( RF_OPMODE_RECEIVER );
 800330a:	2005      	movs	r0, #5
 800330c:	f000 f945 	bl	800359a <SX1272SetOpMode>

        if( rxContinuous == false )
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	f083 0301 	eor.w	r3, r3, #1
 8003316:	b2db      	uxtb	r3, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d014      	beq.n	8003346 <SX1272SetRx+0x1ba>
        {
            TimerSetValue( &RxTimeoutSyncWord, SX1272.Settings.Fsk.RxSingleTimeout );
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <SX1272SetRx+0x1c4>)
 800331e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003322:	4619      	mov	r1, r3
 8003324:	480d      	ldr	r0, [pc, #52]	; (800335c <SX1272SetRx+0x1d0>)
 8003326:	f001 f80d 	bl	8004344 <TimerSetValue>
            TimerStart( &RxTimeoutSyncWord );
 800332a:	480c      	ldr	r0, [pc, #48]	; (800335c <SX1272SetRx+0x1d0>)
 800332c:	f000 ff8a 	bl	8004244 <TimerStart>
        else
        {
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
        }
    }
}
 8003330:	e009      	b.n	8003346 <SX1272SetRx+0x1ba>
        if( rxContinuous == true )
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <SX1272SetRx+0x1b4>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER );
 8003338:	2005      	movs	r0, #5
 800333a:	f000 f92e 	bl	800359a <SX1272SetOpMode>
}
 800333e:	e002      	b.n	8003346 <SX1272SetRx+0x1ba>
            SX1272SetOpMode( RFLR_OPMODE_RECEIVER_SINGLE );
 8003340:	2006      	movs	r0, #6
 8003342:	f000 f92a 	bl	800359a <SX1272SetOpMode>
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	20000170 	.word	0x20000170
 8003354:	20000048 	.word	0x20000048
 8003358:	20000288 	.word	0x20000288
 800335c:	20000274 	.word	0x20000274

08003360 <SX1272SetTx>:

void SX1272SetTx( uint32_t timeout )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
    TimerSetValue( &TxTimeoutTimer, timeout );
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	4837      	ldr	r0, [pc, #220]	; (8003448 <SX1272SetTx+0xe8>)
 800336c:	f000 ffea 	bl	8004344 <TimerSetValue>

    switch( SX1272.Settings.Modem )
 8003370:	4b36      	ldr	r3, [pc, #216]	; (800344c <SX1272SetTx+0xec>)
 8003372:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003376:	2b00      	cmp	r3, #0
 8003378:	d002      	beq.n	8003380 <SX1272SetTx+0x20>
 800337a:	2b01      	cmp	r3, #1
 800337c:	d026      	beq.n	80033cc <SX1272SetTx+0x6c>
 800337e:	e054      	b.n	800342a <SX1272SetTx+0xca>
            // DIO1=FifoEmpty
            // DIO2=FifoFull
            // DIO3=FifoEmpty
            // DIO4=LowBat
            // DIO5=ModeReady
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003380:	2040      	movs	r0, #64	; 0x40
 8003382:	f000 f995 	bl	80036b0 <SX1272Read>
 8003386:	4603      	mov	r3, r0
 8003388:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO1_MASK &
 800338a:	f003 0303 	and.w	r3, r3, #3
 800338e:	b25b      	sxtb	r3, r3
                                                                            RF_DIOMAPPING1_DIO2_MASK ) |
 8003390:	f043 0310 	orr.w	r3, r3, #16
 8003394:	b25b      	sxtb	r3, r3
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RF_DIOMAPPING1_DIO0_MASK &
 8003396:	b2db      	uxtb	r3, r3
 8003398:	4619      	mov	r1, r3
 800339a:	2040      	movs	r0, #64	; 0x40
 800339c:	f000 f976 	bl	800368c <SX1272Write>
                                                                            RF_DIOMAPPING1_DIO1_01 );

            SX1272Write( REG_DIOMAPPING2, ( SX1272Read( REG_DIOMAPPING2 ) & RF_DIOMAPPING2_DIO4_MASK &
 80033a0:	2041      	movs	r0, #65	; 0x41
 80033a2:	f000 f985 	bl	80036b0 <SX1272Read>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	4619      	mov	r1, r3
 80033b0:	2041      	movs	r0, #65	; 0x41
 80033b2:	f000 f96b 	bl	800368c <SX1272Write>
                                                                            RF_DIOMAPPING2_MAP_MASK ) );
            SX1272.Settings.FskPacketHandler.FifoThresh = SX1272Read( REG_FIFOTHRESH ) & 0x3F;
 80033b6:	2035      	movs	r0, #53	; 0x35
 80033b8:	f000 f97a 	bl	80036b0 <SX1272Read>
 80033bc:	4603      	mov	r3, r0
 80033be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b21      	ldr	r3, [pc, #132]	; (800344c <SX1272SetTx+0xec>)
 80033c6:	f883 20c6 	strb.w	r2, [r3, #198]	; 0xc6
        }
        break;
 80033ca:	e02e      	b.n	800342a <SX1272SetTx+0xca>
    case MODEM_LORA:
        {
            if( SX1272.Settings.LoRa.FreqHopOn == true )
 80033cc:	4b1f      	ldr	r3, [pc, #124]	; (800344c <SX1272SetTx+0xec>)
 80033ce:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d014      	beq.n	8003400 <SX1272SetTx+0xa0>
            {
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 80033d6:	21f5      	movs	r1, #245	; 0xf5
 80033d8:	2011      	movs	r0, #17
 80033da:	f000 f957 	bl	800368c <SX1272Write>
                                                  RFLR_IRQFLAGS_CADDONE |
                                                  //RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL |
                                                  RFLR_IRQFLAGS_CADDETECTED );

                // DIO0=TxDone, DIO2=FhssChangeChannel
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK & RFLR_DIOMAPPING1_DIO2_MASK ) | RFLR_DIOMAPPING1_DIO0_01 | RFLR_DIOMAPPING1_DIO2_00 );
 80033de:	2040      	movs	r0, #64	; 0x40
 80033e0:	f000 f966 	bl	80036b0 <SX1272Read>
 80033e4:	4603      	mov	r3, r0
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	f003 0333 	and.w	r3, r3, #51	; 0x33
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f2:	b25b      	sxtb	r3, r3
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	4619      	mov	r1, r3
 80033f8:	2040      	movs	r0, #64	; 0x40
 80033fa:	f000 f947 	bl	800368c <SX1272Write>

                // DIO0=TxDone
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
            }
        }
        break;
 80033fe:	e013      	b.n	8003428 <SX1272SetTx+0xc8>
                SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003400:	21f7      	movs	r1, #247	; 0xf7
 8003402:	2011      	movs	r0, #17
 8003404:	f000 f942 	bl	800368c <SX1272Write>
                SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO0_MASK ) | RFLR_DIOMAPPING1_DIO0_01 );
 8003408:	2040      	movs	r0, #64	; 0x40
 800340a:	f000 f951 	bl	80036b0 <SX1272Read>
 800340e:	4603      	mov	r3, r0
 8003410:	b25b      	sxtb	r3, r3
 8003412:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003416:	b25b      	sxtb	r3, r3
 8003418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341c:	b25b      	sxtb	r3, r3
 800341e:	b2db      	uxtb	r3, r3
 8003420:	4619      	mov	r1, r3
 8003422:	2040      	movs	r0, #64	; 0x40
 8003424:	f000 f932 	bl	800368c <SX1272Write>
        break;
 8003428:	bf00      	nop
    }

    SX1272.Settings.State = RF_TX_RUNNING;
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <SX1272SetTx+0xec>)
 800342c:	2202      	movs	r2, #2
 800342e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    TimerStart( &TxTimeoutTimer );
 8003432:	4805      	ldr	r0, [pc, #20]	; (8003448 <SX1272SetTx+0xe8>)
 8003434:	f000 ff06 	bl	8004244 <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 8003438:	2003      	movs	r0, #3
 800343a:	f000 f8ae 	bl	800359a <SX1272SetOpMode>
}
 800343e:	bf00      	nop
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	20000260 	.word	0x20000260
 800344c:	20000170 	.word	0x20000170

08003450 <SX1272StartCad>:

void SX1272StartCad( void )
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.Modem )
 8003454:	4b10      	ldr	r3, [pc, #64]	; (8003498 <SX1272StartCad+0x48>)
 8003456:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800345a:	2b00      	cmp	r3, #0
 800345c:	d019      	beq.n	8003492 <SX1272StartCad+0x42>
 800345e:	2b01      	cmp	r3, #1
 8003460:	d000      	beq.n	8003464 <SX1272StartCad+0x14>
            SX1272.Settings.State = RF_CAD;
            SX1272SetOpMode( RFLR_OPMODE_CAD );
        }
        break;
    default:
        break;
 8003462:	e017      	b.n	8003494 <SX1272StartCad+0x44>
            SX1272Write( REG_LR_IRQFLAGSMASK, RFLR_IRQFLAGS_RXTIMEOUT |
 8003464:	21fa      	movs	r1, #250	; 0xfa
 8003466:	2011      	movs	r0, #17
 8003468:	f000 f910 	bl	800368c <SX1272Write>
            SX1272Write( REG_DIOMAPPING1, ( SX1272Read( REG_DIOMAPPING1 ) & RFLR_DIOMAPPING1_DIO3_MASK ) | RFLR_DIOMAPPING1_DIO3_00 );
 800346c:	2040      	movs	r0, #64	; 0x40
 800346e:	f000 f91f 	bl	80036b0 <SX1272Read>
 8003472:	4603      	mov	r3, r0
 8003474:	f023 0303 	bic.w	r3, r3, #3
 8003478:	b2db      	uxtb	r3, r3
 800347a:	4619      	mov	r1, r3
 800347c:	2040      	movs	r0, #64	; 0x40
 800347e:	f000 f905 	bl	800368c <SX1272Write>
            SX1272.Settings.State = RF_CAD;
 8003482:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SX1272StartCad+0x48>)
 8003484:	2203      	movs	r2, #3
 8003486:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
            SX1272SetOpMode( RFLR_OPMODE_CAD );
 800348a:	2007      	movs	r0, #7
 800348c:	f000 f885 	bl	800359a <SX1272SetOpMode>
        break;
 8003490:	e000      	b.n	8003494 <SX1272StartCad+0x44>
        break;
 8003492:	bf00      	nop
    }
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000170 	.word	0x20000170

0800349c <SX1272SetTxContinuousWave>:

void SX1272SetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08e      	sub	sp, #56	; 0x38
 80034a0:	af0a      	add	r7, sp, #40	; 0x28
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	460b      	mov	r3, r1
 80034a6:	70fb      	strb	r3, [r7, #3]
 80034a8:	4613      	mov	r3, r2
 80034aa:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )( time * 1000 );
 80034ac:	883b      	ldrh	r3, [r7, #0]
 80034ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	60fb      	str	r3, [r7, #12]

    SX1272SetChannel( freq );
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f7fe ff59 	bl	8002370 <SX1272SetChannel>

    SX1272SetTxConfig( MODEM_FSK, power, 0, 0, 4800, 0, 5, false, false, 0, 0, 0, timeout );
 80034be:	f997 1003 	ldrsb.w	r1, [r7, #3]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	9308      	str	r3, [sp, #32]
 80034c6:	2300      	movs	r3, #0
 80034c8:	9307      	str	r3, [sp, #28]
 80034ca:	2300      	movs	r3, #0
 80034cc:	9306      	str	r3, [sp, #24]
 80034ce:	2300      	movs	r3, #0
 80034d0:	9305      	str	r3, [sp, #20]
 80034d2:	2300      	movs	r3, #0
 80034d4:	9304      	str	r3, [sp, #16]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9303      	str	r3, [sp, #12]
 80034da:	2305      	movs	r3, #5
 80034dc:	9302      	str	r3, [sp, #8]
 80034de:	2300      	movs	r3, #0
 80034e0:	9301      	str	r3, [sp, #4]
 80034e2:	f44f 5396 	mov.w	r3, #4800	; 0x12c0
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	2300      	movs	r3, #0
 80034ea:	2200      	movs	r2, #0
 80034ec:	2000      	movs	r0, #0
 80034ee:	f7ff f9ff 	bl	80028f0 <SX1272SetTxConfig>

    SX1272Write( REG_PACKETCONFIG2, ( SX1272Read( REG_PACKETCONFIG2 ) & RF_PACKETCONFIG2_DATAMODE_MASK ) );
 80034f2:	2031      	movs	r0, #49	; 0x31
 80034f4:	f000 f8dc 	bl	80036b0 <SX1272Read>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	4619      	mov	r1, r3
 8003502:	2031      	movs	r0, #49	; 0x31
 8003504:	f000 f8c2 	bl	800368c <SX1272Write>
    // Disable radio interrupts
    SX1272Write( REG_DIOMAPPING1, RF_DIOMAPPING1_DIO0_11 | RF_DIOMAPPING1_DIO1_11 );
 8003508:	21f0      	movs	r1, #240	; 0xf0
 800350a:	2040      	movs	r0, #64	; 0x40
 800350c:	f000 f8be 	bl	800368c <SX1272Write>
    SX1272Write( REG_DIOMAPPING2, RF_DIOMAPPING2_DIO4_10 | RF_DIOMAPPING2_DIO5_10 );
 8003510:	21a0      	movs	r1, #160	; 0xa0
 8003512:	2041      	movs	r0, #65	; 0x41
 8003514:	f000 f8ba 	bl	800368c <SX1272Write>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	4808      	ldr	r0, [pc, #32]	; (800353c <SX1272SetTxContinuousWave+0xa0>)
 800351c:	f000 ff12 	bl	8004344 <TimerSetValue>

    SX1272.Settings.State = RF_TX_RUNNING;
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <SX1272SetTxContinuousWave+0xa4>)
 8003522:	2202      	movs	r2, #2
 8003524:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    TimerStart( &TxTimeoutTimer );
 8003528:	4804      	ldr	r0, [pc, #16]	; (800353c <SX1272SetTxContinuousWave+0xa0>)
 800352a:	f000 fe8b 	bl	8004244 <TimerStart>
    SX1272SetOpMode( RF_OPMODE_TRANSMITTER );
 800352e:	2003      	movs	r0, #3
 8003530:	f000 f833 	bl	800359a <SX1272SetOpMode>
}
 8003534:	bf00      	nop
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	20000260 	.word	0x20000260
 8003540:	20000170 	.word	0x20000170

08003544 <SX1272ReadRssi>:

int16_t SX1272ReadRssi( RadioModems_t modem )
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
    int16_t rssi = 0;
 800354e:	2300      	movs	r3, #0
 8003550:	81fb      	strh	r3, [r7, #14]

    switch( modem )
 8003552:	79fb      	ldrb	r3, [r7, #7]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d002      	beq.n	800355e <SX1272ReadRssi+0x1a>
 8003558:	2b01      	cmp	r3, #1
 800355a:	d00b      	beq.n	8003574 <SX1272ReadRssi+0x30>
 800355c:	e013      	b.n	8003586 <SX1272ReadRssi+0x42>
    {
    case MODEM_FSK:
        rssi = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 800355e:	2011      	movs	r0, #17
 8003560:	f000 f8a6 	bl	80036b0 <SX1272Read>
 8003564:	4603      	mov	r3, r0
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	b2db      	uxtb	r3, r3
 800356a:	b29b      	uxth	r3, r3
 800356c:	425b      	negs	r3, r3
 800356e:	b29b      	uxth	r3, r3
 8003570:	81fb      	strh	r3, [r7, #14]
        break;
 8003572:	e00c      	b.n	800358e <SX1272ReadRssi+0x4a>
    case MODEM_LORA:
        rssi = RSSI_OFFSET + SX1272Read( REG_LR_RSSIVALUE );
 8003574:	201b      	movs	r0, #27
 8003576:	f000 f89b 	bl	80036b0 <SX1272Read>
 800357a:	4603      	mov	r3, r0
 800357c:	b29b      	uxth	r3, r3
 800357e:	3b8b      	subs	r3, #139	; 0x8b
 8003580:	b29b      	uxth	r3, r3
 8003582:	81fb      	strh	r3, [r7, #14]
        break;
 8003584:	e003      	b.n	800358e <SX1272ReadRssi+0x4a>
    default:
        rssi = -1;
 8003586:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800358a:	81fb      	strh	r3, [r7, #14]
        break;
 800358c:	bf00      	nop
    }
    return rssi;
 800358e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8003592:	4618      	mov	r0, r3
 8003594:	3710      	adds	r7, #16
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <SX1272SetOpMode>:

void SX1272SetOpMode( uint8_t opMode )
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
            GpioWrite( &DbgPinTx, 0 );
            GpioWrite( &DbgPinRx, 0 );
            break;
    }
#endif
    if( opMode == RF_OPMODE_SLEEP )
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d003      	beq.n	80035b2 <SX1272SetOpMode+0x18>
       // SX1272SetAntSwLowPower( true );
    }
    else
    {
        //SX1272SetAntSwLowPower( false );
        SX1272SetAntSw( opMode );
 80035aa:	79fb      	ldrb	r3, [r7, #7]
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 f821 	bl	80045f4 <SX1272SetAntSw>
    }
    SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RF_OPMODE_MASK ) | opMode );
 80035b2:	2001      	movs	r0, #1
 80035b4:	f000 f87c 	bl	80036b0 <SX1272Read>
 80035b8:	4603      	mov	r3, r0
 80035ba:	b25b      	sxtb	r3, r3
 80035bc:	f023 0307 	bic.w	r3, r3, #7
 80035c0:	b25a      	sxtb	r2, r3
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	b25b      	sxtb	r3, r3
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	4619      	mov	r1, r3
 80035ce:	2001      	movs	r0, #1
 80035d0:	f000 f85c 	bl	800368c <SX1272Write>
}
 80035d4:	bf00      	nop
 80035d6:	3708      	adds	r7, #8
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <SX1272SetModem>:

void SX1272SetModem( RadioModems_t modem )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	71fb      	strb	r3, [r7, #7]
    if( ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_ON ) != 0 )
 80035e6:	2001      	movs	r0, #1
 80035e8:	f000 f862 	bl	80036b0 <SX1272Read>
 80035ec:	4603      	mov	r3, r0
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da04      	bge.n	80035fe <SX1272SetModem+0x22>
    {
        SX1272.Settings.Modem = MODEM_LORA;
 80035f4:	4b24      	ldr	r3, [pc, #144]	; (8003688 <SX1272SetModem+0xac>)
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
 80035fc:	e003      	b.n	8003606 <SX1272SetModem+0x2a>
    }
    else
    {
        SX1272.Settings.Modem = MODEM_FSK;
 80035fe:	4b22      	ldr	r3, [pc, #136]	; (8003688 <SX1272SetModem+0xac>)
 8003600:	2200      	movs	r2, #0
 8003602:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
    }

    if( SX1272.Settings.Modem == modem )
 8003606:	4b20      	ldr	r3, [pc, #128]	; (8003688 <SX1272SetModem+0xac>)
 8003608:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800360c:	79fa      	ldrb	r2, [r7, #7]
 800360e:	429a      	cmp	r2, r3
 8003610:	d035      	beq.n	800367e <SX1272SetModem+0xa2>
    {
        return;
    }

    SX1272.Settings.Modem = modem;
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <SX1272SetModem+0xac>)
 8003614:	79fb      	ldrb	r3, [r7, #7]
 8003616:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    switch( SX1272.Settings.Modem )
 800361a:	4b1b      	ldr	r3, [pc, #108]	; (8003688 <SX1272SetModem+0xac>)
 800361c:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003620:	2b01      	cmp	r3, #1
 8003622:	d015      	beq.n	8003650 <SX1272SetModem+0x74>
    {
    default:
    case MODEM_FSK:
        SX1272SetSleep( );
 8003624:	f7ff fd82 	bl	800312c <SX1272SetSleep>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_OFF );
 8003628:	2001      	movs	r0, #1
 800362a:	f000 f841 	bl	80036b0 <SX1272Read>
 800362e:	4603      	mov	r3, r0
 8003630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003634:	b2db      	uxtb	r3, r3
 8003636:	4619      	mov	r1, r3
 8003638:	2001      	movs	r0, #1
 800363a:	f000 f827 	bl	800368c <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 800363e:	2100      	movs	r1, #0
 8003640:	2040      	movs	r0, #64	; 0x40
 8003642:	f000 f823 	bl	800368c <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x30 ); // DIO5=ModeReady
 8003646:	2130      	movs	r1, #48	; 0x30
 8003648:	2041      	movs	r0, #65	; 0x41
 800364a:	f000 f81f 	bl	800368c <SX1272Write>
        break;
 800364e:	e017      	b.n	8003680 <SX1272SetModem+0xa4>
    case MODEM_LORA:
        SX1272SetSleep( );
 8003650:	f7ff fd6c 	bl	800312c <SX1272SetSleep>
        SX1272Write( REG_OPMODE, ( SX1272Read( REG_OPMODE ) & RFLR_OPMODE_LONGRANGEMODE_MASK ) | RFLR_OPMODE_LONGRANGEMODE_ON );
 8003654:	2001      	movs	r0, #1
 8003656:	f000 f82b 	bl	80036b0 <SX1272Read>
 800365a:	4603      	mov	r3, r0
 800365c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003660:	b2db      	uxtb	r3, r3
 8003662:	4619      	mov	r1, r3
 8003664:	2001      	movs	r0, #1
 8003666:	f000 f811 	bl	800368c <SX1272Write>

        SX1272Write( REG_DIOMAPPING1, 0x00 );
 800366a:	2100      	movs	r1, #0
 800366c:	2040      	movs	r0, #64	; 0x40
 800366e:	f000 f80d 	bl	800368c <SX1272Write>
        SX1272Write( REG_DIOMAPPING2, 0x00 );
 8003672:	2100      	movs	r1, #0
 8003674:	2041      	movs	r0, #65	; 0x41
 8003676:	f000 f809 	bl	800368c <SX1272Write>
        break;
 800367a:	bf00      	nop
 800367c:	e000      	b.n	8003680 <SX1272SetModem+0xa4>
        return;
 800367e:	bf00      	nop
    }
}
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000170 	.word	0x20000170

0800368c <SX1272Write>:

void SX1272Write( uint16_t addr, uint8_t data )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	4603      	mov	r3, r0
 8003694:	460a      	mov	r2, r1
 8003696:	80fb      	strh	r3, [r7, #6]
 8003698:	4613      	mov	r3, r2
 800369a:	717b      	strb	r3, [r7, #5]
    SX1272WriteBuffer( addr, &data, 1 );
 800369c:	1d79      	adds	r1, r7, #5
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	2201      	movs	r2, #1
 80036a2:	4618      	mov	r0, r3
 80036a4:	f000 f816 	bl	80036d4 <SX1272WriteBuffer>
}
 80036a8:	bf00      	nop
 80036aa:	3708      	adds	r7, #8
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <SX1272Read>:

uint8_t SX1272Read( uint16_t addr )
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	4603      	mov	r3, r0
 80036b8:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    SX1272ReadBuffer( addr, &data, 1 );
 80036ba:	f107 010f 	add.w	r1, r7, #15
 80036be:	88fb      	ldrh	r3, [r7, #6]
 80036c0:	2201      	movs	r2, #1
 80036c2:	4618      	mov	r0, r3
 80036c4:	f000 f838 	bl	8003738 <SX1272ReadBuffer>
    return data;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <SX1272WriteBuffer>:

void SX1272WriteBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	6039      	str	r1, [r7, #0]
 80036de:	80fb      	strh	r3, [r7, #6]
 80036e0:	4613      	mov	r3, r2
 80036e2:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1272.Spi.Nss, 0 );
 80036e4:	2100      	movs	r1, #0
 80036e6:	4812      	ldr	r0, [pc, #72]	; (8003730 <SX1272WriteBuffer+0x5c>)
 80036e8:	f000 fe8f 	bl	800440a <GpioWrite>

    SpiInOut( &SX1272.Spi, addr | 0x80 );
 80036ec:	88fb      	ldrh	r3, [r7, #6]
 80036ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	4619      	mov	r1, r3
 80036f6:	480f      	ldr	r0, [pc, #60]	; (8003734 <SX1272WriteBuffer+0x60>)
 80036f8:	f001 f9ca 	bl	8004a90 <SpiInOut>
    for( i = 0; i < size; i++ )
 80036fc:	2300      	movs	r3, #0
 80036fe:	73fb      	strb	r3, [r7, #15]
 8003700:	e00a      	b.n	8003718 <SX1272WriteBuffer+0x44>
    {
        SpiInOut( &SX1272.Spi, buffer[i] );
 8003702:	7bfb      	ldrb	r3, [r7, #15]
 8003704:	683a      	ldr	r2, [r7, #0]
 8003706:	4413      	add	r3, r2
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	4619      	mov	r1, r3
 800370c:	4809      	ldr	r0, [pc, #36]	; (8003734 <SX1272WriteBuffer+0x60>)
 800370e:	f001 f9bf 	bl	8004a90 <SpiInOut>
    for( i = 0; i < size; i++ )
 8003712:	7bfb      	ldrb	r3, [r7, #15]
 8003714:	3301      	adds	r3, #1
 8003716:	73fb      	strb	r3, [r7, #15]
 8003718:	7bfa      	ldrb	r2, [r7, #15]
 800371a:	797b      	ldrb	r3, [r7, #5]
 800371c:	429a      	cmp	r2, r3
 800371e:	d3f0      	bcc.n	8003702 <SX1272WriteBuffer+0x2e>
    }

    //NSS = 1;
    GpioWrite( &SX1272.Spi.Nss, 1 );
 8003720:	2101      	movs	r1, #1
 8003722:	4803      	ldr	r0, [pc, #12]	; (8003730 <SX1272WriteBuffer+0x5c>)
 8003724:	f000 fe71 	bl	800440a <GpioWrite>
}
 8003728:	bf00      	nop
 800372a:	3710      	adds	r7, #16
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	200001ec 	.word	0x200001ec
 8003734:	200001c4 	.word	0x200001c4

08003738 <SX1272ReadBuffer>:

void SX1272ReadBuffer( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	4603      	mov	r3, r0
 8003740:	6039      	str	r1, [r7, #0]
 8003742:	80fb      	strh	r3, [r7, #6]
 8003744:	4613      	mov	r3, r2
 8003746:	717b      	strb	r3, [r7, #5]
    uint8_t i;

    //NSS = 0;
    GpioWrite( &SX1272.Spi.Nss, 0 );
 8003748:	2100      	movs	r1, #0
 800374a:	4813      	ldr	r0, [pc, #76]	; (8003798 <SX1272ReadBuffer+0x60>)
 800374c:	f000 fe5d 	bl	800440a <GpioWrite>

    SpiInOut( &SX1272.Spi, addr & 0x7F );
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003756:	4619      	mov	r1, r3
 8003758:	4810      	ldr	r0, [pc, #64]	; (800379c <SX1272ReadBuffer+0x64>)
 800375a:	f001 f999 	bl	8004a90 <SpiInOut>

    for( i = 0; i < size; i++ )
 800375e:	2300      	movs	r3, #0
 8003760:	73fb      	strb	r3, [r7, #15]
 8003762:	e00c      	b.n	800377e <SX1272ReadBuffer+0x46>
    {
        buffer[i] = SpiInOut( &SX1272.Spi, 0 );
 8003764:	2100      	movs	r1, #0
 8003766:	480d      	ldr	r0, [pc, #52]	; (800379c <SX1272ReadBuffer+0x64>)
 8003768:	f001 f992 	bl	8004a90 <SpiInOut>
 800376c:	4601      	mov	r1, r0
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	683a      	ldr	r2, [r7, #0]
 8003772:	4413      	add	r3, r2
 8003774:	b2ca      	uxtb	r2, r1
 8003776:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 8003778:	7bfb      	ldrb	r3, [r7, #15]
 800377a:	3301      	adds	r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	797b      	ldrb	r3, [r7, #5]
 8003782:	429a      	cmp	r2, r3
 8003784:	d3ee      	bcc.n	8003764 <SX1272ReadBuffer+0x2c>
    }

    //NSS = 1;
    GpioWrite( &SX1272.Spi.Nss, 1 );
 8003786:	2101      	movs	r1, #1
 8003788:	4803      	ldr	r0, [pc, #12]	; (8003798 <SX1272ReadBuffer+0x60>)
 800378a:	f000 fe3e 	bl	800440a <GpioWrite>
}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200001ec 	.word	0x200001ec
 800379c:	200001c4 	.word	0x200001c4

080037a0 <SX1272WriteFifo>:

void SX1272WriteFifo( uint8_t *buffer, uint8_t size )
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	70fb      	strb	r3, [r7, #3]
    SX1272WriteBuffer( 0, buffer, size );
 80037ac:	78fb      	ldrb	r3, [r7, #3]
 80037ae:	461a      	mov	r2, r3
 80037b0:	6879      	ldr	r1, [r7, #4]
 80037b2:	2000      	movs	r0, #0
 80037b4:	f7ff ff8e 	bl	80036d4 <SX1272WriteBuffer>
}
 80037b8:	bf00      	nop
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <SX1272ReadFifo>:

void SX1272ReadFifo( uint8_t *buffer, uint8_t size )
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	70fb      	strb	r3, [r7, #3]
    SX1272ReadBuffer( 0, buffer, size );
 80037cc:	78fb      	ldrb	r3, [r7, #3]
 80037ce:	461a      	mov	r2, r3
 80037d0:	6879      	ldr	r1, [r7, #4]
 80037d2:	2000      	movs	r0, #0
 80037d4:	f7ff ffb0 	bl	8003738 <SX1272ReadBuffer>
}
 80037d8:	bf00      	nop
 80037da:	3708      	adds	r7, #8
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <SX1272SetMaxPayloadLength>:

void SX1272SetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	4603      	mov	r3, r0
 80037e8:	460a      	mov	r2, r1
 80037ea:	71fb      	strb	r3, [r7, #7]
 80037ec:	4613      	mov	r3, r2
 80037ee:	71bb      	strb	r3, [r7, #6]
    SX1272SetModem( modem );
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	4618      	mov	r0, r3
 80037f4:	f7ff fef2 	bl	80035dc <SX1272SetModem>

    switch( modem )
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d002      	beq.n	8003804 <SX1272SetMaxPayloadLength+0x24>
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d00e      	beq.n	8003820 <SX1272SetMaxPayloadLength+0x40>
        break;
    case MODEM_LORA:
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
        break;
    }
}
 8003802:	e014      	b.n	800382e <SX1272SetMaxPayloadLength+0x4e>
        if( SX1272.Settings.Fsk.FixLen == false )
 8003804:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <SX1272SetMaxPayloadLength+0x58>)
 8003806:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 800380a:	f083 0301 	eor.w	r3, r3, #1
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <SX1272SetMaxPayloadLength+0x4c>
            SX1272Write( REG_PAYLOADLENGTH, max );
 8003814:	79bb      	ldrb	r3, [r7, #6]
 8003816:	4619      	mov	r1, r3
 8003818:	2032      	movs	r0, #50	; 0x32
 800381a:	f7ff ff37 	bl	800368c <SX1272Write>
        break;
 800381e:	e005      	b.n	800382c <SX1272SetMaxPayloadLength+0x4c>
        SX1272Write( REG_LR_PAYLOADMAXLENGTH, max );
 8003820:	79bb      	ldrb	r3, [r7, #6]
 8003822:	4619      	mov	r1, r3
 8003824:	2023      	movs	r0, #35	; 0x23
 8003826:	f7ff ff31 	bl	800368c <SX1272Write>
        break;
 800382a:	e000      	b.n	800382e <SX1272SetMaxPayloadLength+0x4e>
        break;
 800382c:	bf00      	nop
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000170 	.word	0x20000170

0800383c <SX1272SetPublicNetwork>:

void SX1272SetPublicNetwork( bool enable )
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
    SX1272SetModem( MODEM_LORA );
 8003846:	2001      	movs	r0, #1
 8003848:	f7ff fec8 	bl	80035dc <SX1272SetModem>
    SX1272.Settings.LoRa.PublicNetwork = enable;
 800384c:	4a09      	ldr	r2, [pc, #36]	; (8003874 <SX1272SetPublicNetwork+0x38>)
 800384e:	79fb      	ldrb	r3, [r7, #7]
 8003850:	f882 30e4 	strb.w	r3, [r2, #228]	; 0xe4
    if( enable == true )
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <SX1272SetPublicNetwork+0x28>
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PUBLIC_SYNCWORD );
 800385a:	2134      	movs	r1, #52	; 0x34
 800385c:	2039      	movs	r0, #57	; 0x39
 800385e:	f7ff ff15 	bl	800368c <SX1272Write>
    else
    {
        // Change LoRa modem SyncWord
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
    }
}
 8003862:	e003      	b.n	800386c <SX1272SetPublicNetwork+0x30>
        SX1272Write( REG_LR_SYNCWORD, LORA_MAC_PRIVATE_SYNCWORD );
 8003864:	2112      	movs	r1, #18
 8003866:	2039      	movs	r0, #57	; 0x39
 8003868:	f7ff ff10 	bl	800368c <SX1272Write>
}
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}
 8003874:	20000170 	.word	0x20000170

08003878 <SX1272GetWakeupTime>:

uint32_t SX1272GetWakeupTime( void )
{
 8003878:	b480      	push	{r7}
 800387a:	af00      	add	r7, sp, #0
//    return SX1272GetBoardTcxoWakeupTime( ) + RADIO_WAKEUP_TIME;
	return 0;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <SX1272OnTimeoutIrq>:

void SX1272OnTimeoutIrq( void )
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b082      	sub	sp, #8
 800388c:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.State )
 800388e:	4b4d      	ldr	r3, [pc, #308]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 8003890:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003894:	2b01      	cmp	r3, #1
 8003896:	d002      	beq.n	800389e <SX1272OnTimeoutIrq+0x16>
 8003898:	2b02      	cmp	r3, #2
 800389a:	d046      	beq.n	800392a <SX1272OnTimeoutIrq+0xa2>
        {
            RadioEvents->TxTimeout( );
        }
        break;
    default:
        break;
 800389c:	e08d      	b.n	80039ba <SX1272OnTimeoutIrq+0x132>
        if( SX1272.Settings.Modem == MODEM_FSK )
 800389e:	4b49      	ldr	r3, [pc, #292]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 80038a0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d132      	bne.n	800390e <SX1272OnTimeoutIrq+0x86>
            SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 80038a8:	4b46      	ldr	r3, [pc, #280]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
            SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 80038b0:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
            SX1272.Settings.FskPacketHandler.NbBytes = 0;
 80038b8:	4b42      	ldr	r3, [pc, #264]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
            SX1272.Settings.FskPacketHandler.Size = 0;
 80038c0:	4b40      	ldr	r3, [pc, #256]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 80038c2:	2200      	movs	r2, #0
 80038c4:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
            SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 80038c8:	210b      	movs	r1, #11
 80038ca:	203e      	movs	r0, #62	; 0x3e
 80038cc:	f7ff fede 	bl	800368c <SX1272Write>
            SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 80038d0:	2110      	movs	r1, #16
 80038d2:	203f      	movs	r0, #63	; 0x3f
 80038d4:	f7ff feda 	bl	800368c <SX1272Write>
            if( SX1272.Settings.Fsk.RxContinuous == true )
 80038d8:	4b3a      	ldr	r3, [pc, #232]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 80038da:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d00e      	beq.n	8003900 <SX1272OnTimeoutIrq+0x78>
                SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 80038e2:	200d      	movs	r0, #13
 80038e4:	f7ff fee4 	bl	80036b0 <SX1272Read>
 80038e8:	4603      	mov	r3, r0
 80038ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	4619      	mov	r1, r3
 80038f2:	200d      	movs	r0, #13
 80038f4:	f7ff feca 	bl	800368c <SX1272Write>
                TimerStart( &RxTimeoutSyncWord );
 80038f8:	4833      	ldr	r0, [pc, #204]	; (80039c8 <SX1272OnTimeoutIrq+0x140>)
 80038fa:	f000 fca3 	bl	8004244 <TimerStart>
 80038fe:	e006      	b.n	800390e <SX1272OnTimeoutIrq+0x86>
                SX1272.Settings.State = RF_IDLE;
 8003900:	4b30      	ldr	r3, [pc, #192]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 8003902:	2200      	movs	r2, #0
 8003904:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                TimerStop( &RxTimeoutSyncWord );
 8003908:	482f      	ldr	r0, [pc, #188]	; (80039c8 <SX1272OnTimeoutIrq+0x140>)
 800390a:	f000 fca5 	bl	8004258 <TimerStop>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <SX1272OnTimeoutIrq+0x144>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d04e      	beq.n	80039b4 <SX1272OnTimeoutIrq+0x12c>
 8003916:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <SX1272OnTimeoutIrq+0x144>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d049      	beq.n	80039b4 <SX1272OnTimeoutIrq+0x12c>
            RadioEvents->RxTimeout( );
 8003920:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <SX1272OnTimeoutIrq+0x144>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4798      	blx	r3
        break;
 8003928:	e044      	b.n	80039b4 <SX1272OnTimeoutIrq+0x12c>
        SX1272SetOpMode( RF_OPMODE_SLEEP );
 800392a:	2000      	movs	r0, #0
 800392c:	f7ff fe35 	bl	800359a <SX1272SetOpMode>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003930:	2300      	movs	r3, #0
 8003932:	71fb      	strb	r3, [r7, #7]
 8003934:	e020      	b.n	8003978 <SX1272OnTimeoutIrq+0xf0>
            SX1272SetModem( RadioRegsInit[i].Modem );
 8003936:	79fa      	ldrb	r2, [r7, #7]
 8003938:	4925      	ldr	r1, [pc, #148]	; (80039d0 <SX1272OnTimeoutIrq+0x148>)
 800393a:	4613      	mov	r3, r2
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	4413      	add	r3, r2
 8003940:	440b      	add	r3, r1
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff fe49 	bl	80035dc <SX1272SetModem>
            SX1272Write( RadioRegsInit[i].Addr, RadioRegsInit[i].Value );
 800394a:	79fa      	ldrb	r2, [r7, #7]
 800394c:	4920      	ldr	r1, [pc, #128]	; (80039d0 <SX1272OnTimeoutIrq+0x148>)
 800394e:	4613      	mov	r3, r2
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	4413      	add	r3, r2
 8003954:	440b      	add	r3, r1
 8003956:	3301      	adds	r3, #1
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	b298      	uxth	r0, r3
 800395c:	79fa      	ldrb	r2, [r7, #7]
 800395e:	491c      	ldr	r1, [pc, #112]	; (80039d0 <SX1272OnTimeoutIrq+0x148>)
 8003960:	4613      	mov	r3, r2
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4413      	add	r3, r2
 8003966:	440b      	add	r3, r1
 8003968:	3302      	adds	r3, #2
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	4619      	mov	r1, r3
 800396e:	f7ff fe8d 	bl	800368c <SX1272Write>
        for( uint8_t i = 0; i < sizeof( RadioRegsInit ) / sizeof( RadioRegisters_t ); i++ )
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	3301      	adds	r3, #1
 8003976:	71fb      	strb	r3, [r7, #7]
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2b0f      	cmp	r3, #15
 800397c:	d9db      	bls.n	8003936 <SX1272OnTimeoutIrq+0xae>
        SX1272SetModem( MODEM_FSK );
 800397e:	2000      	movs	r0, #0
 8003980:	f7ff fe2c 	bl	80035dc <SX1272SetModem>
        SX1272SetPublicNetwork( SX1272.Settings.LoRa.PublicNetwork );
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 8003986:	f893 30e4 	ldrb.w	r3, [r3, #228]	; 0xe4
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff56 	bl	800383c <SX1272SetPublicNetwork>
        SX1272.Settings.State = RF_IDLE;
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <SX1272OnTimeoutIrq+0x13c>)
 8003992:	2200      	movs	r2, #0
 8003994:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <SX1272OnTimeoutIrq+0x144>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00b      	beq.n	80039b8 <SX1272OnTimeoutIrq+0x130>
 80039a0:	4b0a      	ldr	r3, [pc, #40]	; (80039cc <SX1272OnTimeoutIrq+0x144>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d006      	beq.n	80039b8 <SX1272OnTimeoutIrq+0x130>
            RadioEvents->TxTimeout( );
 80039aa:	4b08      	ldr	r3, [pc, #32]	; (80039cc <SX1272OnTimeoutIrq+0x144>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4798      	blx	r3
        break;
 80039b2:	e001      	b.n	80039b8 <SX1272OnTimeoutIrq+0x130>
        break;
 80039b4:	bf00      	nop
 80039b6:	e000      	b.n	80039ba <SX1272OnTimeoutIrq+0x132>
        break;
 80039b8:	bf00      	nop
    }
}
 80039ba:	bf00      	nop
 80039bc:	3708      	adds	r7, #8
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000170 	.word	0x20000170
 80039c8:	20000274 	.word	0x20000274
 80039cc:	20000044 	.word	0x20000044
 80039d0:	08004f54 	.word	0x08004f54

080039d4 <SX1272OnDio0Irq>:

void SX1272OnDio0Irq( void )
{
 80039d4:	b590      	push	{r4, r7, lr}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
    volatile uint8_t irqFlags = 0;
 80039da:	2300      	movs	r3, #0
 80039dc:	70fb      	strb	r3, [r7, #3]

    switch( SX1272.Settings.State )
 80039de:	4ba9      	ldr	r3, [pc, #676]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 80039e0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d003      	beq.n	80039f0 <SX1272OnDio0Irq+0x1c>
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	f000 81cd 	beq.w	8003d88 <SX1272OnDio0Irq+0x3b4>
                }
                break;
            }
            break;
        default:
            break;
 80039ee:	e1ea      	b.n	8003dc6 <SX1272OnDio0Irq+0x3f2>
            switch( SX1272.Settings.Modem )
 80039f0:	4ba4      	ldr	r3, [pc, #656]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 80039f2:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <SX1272OnDio0Irq+0x2e>
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	f000 80f2 	beq.w	8003be4 <SX1272OnDio0Irq+0x210>
                break;
 8003a00:	e1c1      	b.n	8003d86 <SX1272OnDio0Irq+0x3b2>
                if( SX1272.Settings.Fsk.CrcOn == true )
 8003a02:	4ba0      	ldr	r3, [pc, #640]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003a04:	f893 30ac 	ldrb.w	r3, [r3, #172]	; 0xac
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d051      	beq.n	8003ab0 <SX1272OnDio0Irq+0xdc>
                    irqFlags = SX1272Read( REG_IRQFLAGS2 );
 8003a0c:	203f      	movs	r0, #63	; 0x3f
 8003a0e:	f7ff fe4f 	bl	80036b0 <SX1272Read>
 8003a12:	4603      	mov	r3, r0
 8003a14:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RF_IRQFLAGS2_CRCOK ) != RF_IRQFLAGS2_CRCOK )
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	f003 0302 	and.w	r3, r3, #2
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d046      	beq.n	8003ab0 <SX1272OnDio0Irq+0xdc>
                        SX1272Write( REG_IRQFLAGS1, RF_IRQFLAGS1_RSSI |
 8003a22:	210b      	movs	r1, #11
 8003a24:	203e      	movs	r0, #62	; 0x3e
 8003a26:	f7ff fe31 	bl	800368c <SX1272Write>
                        SX1272Write( REG_IRQFLAGS2, RF_IRQFLAGS2_FIFOOVERRUN );
 8003a2a:	2110      	movs	r1, #16
 8003a2c:	203f      	movs	r0, #63	; 0x3f
 8003a2e:	f7ff fe2d 	bl	800368c <SX1272Write>
                        TimerStop( &RxTimeoutTimer );
 8003a32:	4895      	ldr	r0, [pc, #596]	; (8003c88 <SX1272OnDio0Irq+0x2b4>)
 8003a34:	f000 fc10 	bl	8004258 <TimerStop>
                        if( SX1272.Settings.Fsk.RxContinuous == false )
 8003a38:	4b92      	ldr	r3, [pc, #584]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003a3a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8003a3e:	f083 0301 	eor.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d007      	beq.n	8003a58 <SX1272OnDio0Irq+0x84>
                            TimerStop( &RxTimeoutSyncWord );
 8003a48:	4890      	ldr	r0, [pc, #576]	; (8003c8c <SX1272OnDio0Irq+0x2b8>)
 8003a4a:	f000 fc05 	bl	8004258 <TimerStop>
                            SX1272.Settings.State = RF_IDLE;
 8003a4e:	4b8d      	ldr	r3, [pc, #564]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
 8003a56:	e00d      	b.n	8003a74 <SX1272OnDio0Irq+0xa0>
                            SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003a58:	200d      	movs	r0, #13
 8003a5a:	f7ff fe29 	bl	80036b0 <SX1272Read>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	4619      	mov	r1, r3
 8003a68:	200d      	movs	r0, #13
 8003a6a:	f7ff fe0f 	bl	800368c <SX1272Write>
                            TimerStart( &RxTimeoutSyncWord );
 8003a6e:	4887      	ldr	r0, [pc, #540]	; (8003c8c <SX1272OnDio0Irq+0x2b8>)
 8003a70:	f000 fbe8 	bl	8004244 <TimerStart>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003a74:	4b86      	ldr	r3, [pc, #536]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <SX1272OnDio0Irq+0xba>
 8003a7c:	4b84      	ldr	r3, [pc, #528]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d003      	beq.n	8003a8e <SX1272OnDio0Irq+0xba>
                            RadioEvents->RxError( );
 8003a86:	4b82      	ldr	r3, [pc, #520]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	4798      	blx	r3
                        SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8003a8e:	4b7d      	ldr	r3, [pc, #500]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                        SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003a96:	4b7b      	ldr	r3, [pc, #492]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
                        SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003a9e:	4b79      	ldr	r3, [pc, #484]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
                        SX1272.Settings.FskPacketHandler.Size = 0;
 8003aa6:	4b77      	ldr	r3, [pc, #476]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
                        break;
 8003aae:	e16a      	b.n	8003d86 <SX1272OnDio0Irq+0x3b2>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003ab0:	4b74      	ldr	r3, [pc, #464]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003ab2:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d133      	bne.n	8003b22 <SX1272OnDio0Irq+0x14e>
 8003aba:	4b72      	ldr	r3, [pc, #456]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003abc:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d12e      	bne.n	8003b22 <SX1272OnDio0Irq+0x14e>
                    if( SX1272.Settings.Fsk.FixLen == false )
 8003ac4:	4b6f      	ldr	r3, [pc, #444]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003ac6:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003aca:	f083 0301 	eor.w	r3, r3, #1
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <SX1272OnDio0Irq+0x10a>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 8003ad4:	2101      	movs	r1, #1
 8003ad6:	486f      	ldr	r0, [pc, #444]	; (8003c94 <SX1272OnDio0Irq+0x2c0>)
 8003ad8:	f7ff fe72 	bl	80037c0 <SX1272ReadFifo>
 8003adc:	e007      	b.n	8003aee <SX1272OnDio0Irq+0x11a>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 8003ade:	2032      	movs	r0, #50	; 0x32
 8003ae0:	f7ff fde6 	bl	80036b0 <SX1272Read>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	4b66      	ldr	r3, [pc, #408]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003aea:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003aee:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003af0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003af4:	461a      	mov	r2, r3
 8003af6:	4b68      	ldr	r3, [pc, #416]	; (8003c98 <SX1272OnDio0Irq+0x2c4>)
 8003af8:	18d0      	adds	r0, r2, r3
 8003afa:	4b62      	ldr	r3, [pc, #392]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003afc:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003b00:	b2da      	uxtb	r2, r3
 8003b02:	4b60      	ldr	r3, [pc, #384]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b04:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	1ad3      	subs	r3, r2, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	4619      	mov	r1, r3
 8003b10:	f7ff fe56 	bl	80037c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003b14:	4b5b      	ldr	r3, [pc, #364]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b16:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8003b1a:	4b5a      	ldr	r3, [pc, #360]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b1c:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 8003b20:	e018      	b.n	8003b54 <SX1272OnDio0Irq+0x180>
                    SX1272ReadFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003b22:	4b58      	ldr	r3, [pc, #352]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b24:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003b28:	461a      	mov	r2, r3
 8003b2a:	4b5b      	ldr	r3, [pc, #364]	; (8003c98 <SX1272OnDio0Irq+0x2c4>)
 8003b2c:	18d0      	adds	r0, r2, r3
 8003b2e:	4b55      	ldr	r3, [pc, #340]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b30:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b38:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	4619      	mov	r1, r3
 8003b44:	f7ff fe3c 	bl	80037c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003b48:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b4a:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8003b4e:	4b4d      	ldr	r3, [pc, #308]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b50:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
                TimerStop( &RxTimeoutTimer );
 8003b54:	484c      	ldr	r0, [pc, #304]	; (8003c88 <SX1272OnDio0Irq+0x2b4>)
 8003b56:	f000 fb7f 	bl	8004258 <TimerStop>
                if( SX1272.Settings.Fsk.RxContinuous == false )
 8003b5a:	4b4a      	ldr	r3, [pc, #296]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b5c:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8003b60:	f083 0301 	eor.w	r3, r3, #1
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d007      	beq.n	8003b7a <SX1272OnDio0Irq+0x1a6>
                    SX1272.Settings.State = RF_IDLE;
 8003b6a:	4b46      	ldr	r3, [pc, #280]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                    TimerStop( &RxTimeoutSyncWord );
 8003b72:	4846      	ldr	r0, [pc, #280]	; (8003c8c <SX1272OnDio0Irq+0x2b8>)
 8003b74:	f000 fb70 	bl	8004258 <TimerStop>
 8003b78:	e00d      	b.n	8003b96 <SX1272OnDio0Irq+0x1c2>
                    SX1272Write( REG_RXCONFIG, SX1272Read( REG_RXCONFIG ) | RF_RXCONFIG_RESTARTRXWITHOUTPLLLOCK );
 8003b7a:	200d      	movs	r0, #13
 8003b7c:	f7ff fd98 	bl	80036b0 <SX1272Read>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	4619      	mov	r1, r3
 8003b8a:	200d      	movs	r0, #13
 8003b8c:	f7ff fd7e 	bl	800368c <SX1272Write>
                    TimerStart( &RxTimeoutSyncWord );
 8003b90:	483e      	ldr	r0, [pc, #248]	; (8003c8c <SX1272OnDio0Irq+0x2b8>)
 8003b92:	f000 fb57 	bl	8004244 <TimerStart>
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003b96:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d011      	beq.n	8003bc2 <SX1272OnDio0Irq+0x1ee>
 8003b9e:	4b3c      	ldr	r3, [pc, #240]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00c      	beq.n	8003bc2 <SX1272OnDio0Irq+0x1ee>
                    RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.FskPacketHandler.Size, SX1272.Settings.FskPacketHandler.RssiValue, 0 );
 8003ba8:	4b39      	ldr	r3, [pc, #228]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689c      	ldr	r4, [r3, #8]
 8003bae:	4b35      	ldr	r3, [pc, #212]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003bb0:	f8b3 10c2 	ldrh.w	r1, [r3, #194]	; 0xc2
 8003bb4:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003bb6:	f993 30ba 	ldrsb.w	r3, [r3, #186]	; 0xba
 8003bba:	b21a      	sxth	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	4836      	ldr	r0, [pc, #216]	; (8003c98 <SX1272OnDio0Irq+0x2c4>)
 8003bc0:	47a0      	blx	r4
                SX1272.Settings.FskPacketHandler.PreambleDetected = false;
 8003bc2:	4b30      	ldr	r3, [pc, #192]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                SX1272.Settings.FskPacketHandler.SyncWordDetected = false;
 8003bca:	4b2e      	ldr	r3, [pc, #184]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
                SX1272.Settings.FskPacketHandler.NbBytes = 0;
 8003bd2:	4b2c      	ldr	r3, [pc, #176]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
                SX1272.Settings.FskPacketHandler.Size = 0;
 8003bda:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
                break;
 8003be2:	e0d0      	b.n	8003d86 <SX1272OnDio0Irq+0x3b2>
                    int8_t snr = 0;
 8003be4:	2300      	movs	r3, #0
 8003be6:	71fb      	strb	r3, [r7, #7]
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXDONE );
 8003be8:	2140      	movs	r1, #64	; 0x40
 8003bea:	2012      	movs	r0, #18
 8003bec:	f7ff fd4e 	bl	800368c <SX1272Write>
                    irqFlags = SX1272Read( REG_LR_IRQFLAGS );
 8003bf0:	2012      	movs	r0, #18
 8003bf2:	f7ff fd5d 	bl	80036b0 <SX1272Read>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	70fb      	strb	r3, [r7, #3]
                    if( ( irqFlags & RFLR_IRQFLAGS_PAYLOADCRCERROR_MASK ) == RFLR_IRQFLAGS_PAYLOADCRCERROR )
 8003bfa:	78fb      	ldrb	r3, [r7, #3]
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	f003 0320 	and.w	r3, r3, #32
 8003c02:	2b20      	cmp	r3, #32
 8003c04:	d122      	bne.n	8003c4c <SX1272OnDio0Irq+0x278>
                        SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_PAYLOADCRCERROR );
 8003c06:	2120      	movs	r1, #32
 8003c08:	2012      	movs	r0, #18
 8003c0a:	f7ff fd3f 	bl	800368c <SX1272Write>
                        if( SX1272.Settings.LoRa.RxContinuous == false )
 8003c0e:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003c10:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8003c14:	f083 0301 	eor.w	r3, r3, #1
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d003      	beq.n	8003c26 <SX1272OnDio0Irq+0x252>
                            SX1272.Settings.State = RF_IDLE;
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                        TimerStop( &RxTimeoutTimer );
 8003c26:	4818      	ldr	r0, [pc, #96]	; (8003c88 <SX1272OnDio0Irq+0x2b4>)
 8003c28:	f000 fb16 	bl	8004258 <TimerStop>
                        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError != NULL ) )
 8003c2c:	4b18      	ldr	r3, [pc, #96]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	f000 80a5 	beq.w	8003d80 <SX1272OnDio0Irq+0x3ac>
 8003c36:	4b16      	ldr	r3, [pc, #88]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 809f 	beq.w	8003d80 <SX1272OnDio0Irq+0x3ac>
                            RadioEvents->RxError( );
 8003c42:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <SX1272OnDio0Irq+0x2bc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	4798      	blx	r3
                        break;
 8003c4a:	e099      	b.n	8003d80 <SX1272OnDio0Irq+0x3ac>
                    SX1272.Settings.LoRaPacketHandler.SnrValue = SX1272Read( REG_LR_PKTSNRVALUE );
 8003c4c:	2019      	movs	r0, #25
 8003c4e:	f7ff fd2f 	bl	80036b0 <SX1272Read>
 8003c52:	4603      	mov	r3, r0
 8003c54:	b25a      	sxtb	r2, r3
 8003c56:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003c58:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
                    if( SX1272.Settings.LoRaPacketHandler.SnrValue & 0x80 ) // The SNR sign bit is 1
 8003c5c:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003c5e:	f993 30e8 	ldrsb.w	r3, [r3, #232]	; 0xe8
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	da1a      	bge.n	8003c9c <SX1272OnDio0Irq+0x2c8>
                        snr = ( ( ~SX1272.Settings.LoRaPacketHandler.SnrValue + 1 ) & 0xFF ) >> 2;
 8003c66:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <SX1272OnDio0Irq+0x2b0>)
 8003c68:	f993 30e8 	ldrsb.w	r3, [r3, #232]	; 0xe8
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	109b      	asrs	r3, r3, #2
 8003c70:	b25b      	sxtb	r3, r3
 8003c72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c76:	71fb      	strb	r3, [r7, #7]
                        snr = -snr;
 8003c78:	79fb      	ldrb	r3, [r7, #7]
 8003c7a:	425b      	negs	r3, r3
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	71fb      	strb	r3, [r7, #7]
 8003c80:	e014      	b.n	8003cac <SX1272OnDio0Irq+0x2d8>
 8003c82:	bf00      	nop
 8003c84:	20000170 	.word	0x20000170
 8003c88:	20000288 	.word	0x20000288
 8003c8c:	20000274 	.word	0x20000274
 8003c90:	20000044 	.word	0x20000044
 8003c94:	20000232 	.word	0x20000232
 8003c98:	20000048 	.word	0x20000048
                        snr = ( SX1272.Settings.LoRaPacketHandler.SnrValue & 0xFF ) >> 2;
 8003c9c:	4b4c      	ldr	r3, [pc, #304]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003c9e:	f993 30e8 	ldrsb.w	r3, [r3, #232]	; 0xe8
 8003ca2:	109b      	asrs	r3, r3, #2
 8003ca4:	b25b      	sxtb	r3, r3
 8003ca6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003caa:	71fb      	strb	r3, [r7, #7]
                    int16_t rssi = SX1272Read( REG_LR_PKTRSSIVALUE );
 8003cac:	201a      	movs	r0, #26
 8003cae:	f7ff fcff 	bl	80036b0 <SX1272Read>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	80bb      	strh	r3, [r7, #4]
                    if( snr < 0 )
 8003cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	da13      	bge.n	8003ce6 <SX1272OnDio0Irq+0x312>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 ) +
 8003cbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cc2:	111b      	asrs	r3, r3, #4
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	88bb      	ldrh	r3, [r7, #4]
 8003cca:	4413      	add	r3, r2
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b8b      	subs	r3, #139	; 0x8b
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	b21a      	sxth	r2, r3
 8003cde:	4b3c      	ldr	r3, [pc, #240]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003ce0:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
 8003ce4:	e00d      	b.n	8003d02 <SX1272OnDio0Irq+0x32e>
                        SX1272.Settings.LoRaPacketHandler.RssiValue = RSSI_OFFSET + rssi + ( rssi >> 4 );
 8003ce6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cea:	111b      	asrs	r3, r3, #4
 8003cec:	b21b      	sxth	r3, r3
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	88bb      	ldrh	r3, [r7, #4]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	3b8b      	subs	r3, #139	; 0x8b
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	b21a      	sxth	r2, r3
 8003cfc:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003cfe:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
                    SX1272.Settings.LoRaPacketHandler.Size = SX1272Read( REG_LR_RXNBBYTES );
 8003d02:	2013      	movs	r0, #19
 8003d04:	f7ff fcd4 	bl	80036b0 <SX1272Read>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b30      	ldr	r3, [pc, #192]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d0e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
                    SX1272Write( REG_LR_FIFOADDRPTR, SX1272Read( REG_LR_FIFORXCURRENTADDR ) );
 8003d12:	2010      	movs	r0, #16
 8003d14:	f7ff fccc 	bl	80036b0 <SX1272Read>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	200d      	movs	r0, #13
 8003d1e:	f7ff fcb5 	bl	800368c <SX1272Write>
                    SX1272ReadFifo( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size );
 8003d22:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d24:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8003d28:	4619      	mov	r1, r3
 8003d2a:	482a      	ldr	r0, [pc, #168]	; (8003dd4 <SX1272OnDio0Irq+0x400>)
 8003d2c:	f7ff fd48 	bl	80037c0 <SX1272ReadFifo>
                    if( SX1272.Settings.LoRa.RxContinuous == false )
 8003d30:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d32:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
 8003d36:	f083 0301 	eor.w	r3, r3, #1
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <SX1272OnDio0Irq+0x374>
                        SX1272.Settings.State = RF_IDLE;
 8003d40:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                    TimerStop( &RxTimeoutTimer );
 8003d48:	4823      	ldr	r0, [pc, #140]	; (8003dd8 <SX1272OnDio0Irq+0x404>)
 8003d4a:	f000 fa85 	bl	8004258 <TimerStop>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8003d4e:	4b23      	ldr	r3, [pc, #140]	; (8003ddc <SX1272OnDio0Irq+0x408>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d016      	beq.n	8003d84 <SX1272OnDio0Irq+0x3b0>
 8003d56:	4b21      	ldr	r3, [pc, #132]	; (8003ddc <SX1272OnDio0Irq+0x408>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d011      	beq.n	8003d84 <SX1272OnDio0Irq+0x3b0>
                        RadioEvents->RxDone( RxTxBuffer, SX1272.Settings.LoRaPacketHandler.Size, SX1272.Settings.LoRaPacketHandler.RssiValue, SX1272.Settings.LoRaPacketHandler.SnrValue );
 8003d60:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <SX1272OnDio0Irq+0x408>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689c      	ldr	r4, [r3, #8]
 8003d66:	4b1a      	ldr	r3, [pc, #104]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d68:	f893 30ec 	ldrb.w	r3, [r3, #236]	; 0xec
 8003d6c:	b299      	uxth	r1, r3
 8003d6e:	4b18      	ldr	r3, [pc, #96]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d70:	f9b3 20ea 	ldrsh.w	r2, [r3, #234]	; 0xea
 8003d74:	4b16      	ldr	r3, [pc, #88]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d76:	f993 30e8 	ldrsb.w	r3, [r3, #232]	; 0xe8
 8003d7a:	4816      	ldr	r0, [pc, #88]	; (8003dd4 <SX1272OnDio0Irq+0x400>)
 8003d7c:	47a0      	blx	r4
                break;
 8003d7e:	e001      	b.n	8003d84 <SX1272OnDio0Irq+0x3b0>
                        break;
 8003d80:	bf00      	nop
 8003d82:	e020      	b.n	8003dc6 <SX1272OnDio0Irq+0x3f2>
                break;
 8003d84:	bf00      	nop
            break;
 8003d86:	e01e      	b.n	8003dc6 <SX1272OnDio0Irq+0x3f2>
            TimerStop( &TxTimeoutTimer );
 8003d88:	4815      	ldr	r0, [pc, #84]	; (8003de0 <SX1272OnDio0Irq+0x40c>)
 8003d8a:	f000 fa65 	bl	8004258 <TimerStop>
            switch( SX1272.Settings.Modem )
 8003d8e:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003d90:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d103      	bne.n	8003da0 <SX1272OnDio0Irq+0x3cc>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_TXDONE );
 8003d98:	2108      	movs	r1, #8
 8003d9a:	2012      	movs	r0, #18
 8003d9c:	f7ff fc76 	bl	800368c <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 8003da0:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <SX1272OnDio0Irq+0x3fc>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8003da8:	4b0c      	ldr	r3, [pc, #48]	; (8003ddc <SX1272OnDio0Irq+0x408>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d008      	beq.n	8003dc2 <SX1272OnDio0Irq+0x3ee>
 8003db0:	4b0a      	ldr	r3, [pc, #40]	; (8003ddc <SX1272OnDio0Irq+0x408>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <SX1272OnDio0Irq+0x3ee>
                    RadioEvents->TxDone( );
 8003dba:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <SX1272OnDio0Irq+0x408>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4798      	blx	r3
                break;
 8003dc2:	bf00      	nop
            break;
 8003dc4:	bf00      	nop
    }
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd90      	pop	{r4, r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000170 	.word	0x20000170
 8003dd4:	20000048 	.word	0x20000048
 8003dd8:	20000288 	.word	0x20000288
 8003ddc:	20000044 	.word	0x20000044
 8003de0:	20000260 	.word	0x20000260

08003de4 <SX1272OnDio1Irq>:

void SX1272OnDio1Irq( void )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.State )
 8003de8:	4b6b      	ldr	r3, [pc, #428]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003dea:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003dee:	2b01      	cmp	r3, #1
 8003df0:	d003      	beq.n	8003dfa <SX1272OnDio1Irq+0x16>
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	f000 8083 	beq.w	8003efe <SX1272OnDio1Irq+0x11a>
            default:
                break;
            }
            break;
        default:
            break;
 8003df8:	e0cc      	b.n	8003f94 <SX1272OnDio1Irq+0x1b0>
            switch( SX1272.Settings.Modem )
 8003dfa:	4b67      	ldr	r3, [pc, #412]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003dfc:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d002      	beq.n	8003e0a <SX1272OnDio1Irq+0x26>
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d060      	beq.n	8003eca <SX1272OnDio1Irq+0xe6>
                break;
 8003e08:	e078      	b.n	8003efc <SX1272OnDio1Irq+0x118>
                if( ( SX1272.Settings.FskPacketHandler.Size == 0 ) && ( SX1272.Settings.FskPacketHandler.NbBytes == 0 ) )
 8003e0a:	4b63      	ldr	r3, [pc, #396]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e0c:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d119      	bne.n	8003e48 <SX1272OnDio1Irq+0x64>
 8003e14:	4b60      	ldr	r3, [pc, #384]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e16:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d114      	bne.n	8003e48 <SX1272OnDio1Irq+0x64>
                    if( SX1272.Settings.Fsk.FixLen == false )
 8003e1e:	4b5e      	ldr	r3, [pc, #376]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e20:	f893 30aa 	ldrb.w	r3, [r3, #170]	; 0xaa
 8003e24:	f083 0301 	eor.w	r3, r3, #1
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <SX1272OnDio1Irq+0x54>
                        SX1272ReadFifo( ( uint8_t* )&SX1272.Settings.FskPacketHandler.Size, 1 );
 8003e2e:	2101      	movs	r1, #1
 8003e30:	485a      	ldr	r0, [pc, #360]	; (8003f9c <SX1272OnDio1Irq+0x1b8>)
 8003e32:	f7ff fcc5 	bl	80037c0 <SX1272ReadFifo>
 8003e36:	e007      	b.n	8003e48 <SX1272OnDio1Irq+0x64>
                        SX1272.Settings.FskPacketHandler.Size = SX1272Read( REG_PAYLOADLENGTH );
 8003e38:	2032      	movs	r0, #50	; 0x32
 8003e3a:	f7ff fc39 	bl	80036b0 <SX1272Read>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	4b55      	ldr	r3, [pc, #340]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e44:	f8a3 20c2 	strh.w	r2, [r3, #194]	; 0xc2
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.FifoThresh )
 8003e48:	4b53      	ldr	r3, [pc, #332]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e4a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003e4e:	461a      	mov	r2, r3
 8003e50:	4b51      	ldr	r3, [pc, #324]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e52:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	4a4f      	ldr	r2, [pc, #316]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e5a:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	dd19      	ble.n	8003e96 <SX1272OnDio1Irq+0xb2>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.FifoThresh );
 8003e62:	4b4d      	ldr	r3, [pc, #308]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e64:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003e68:	461a      	mov	r2, r3
 8003e6a:	4b4d      	ldr	r3, [pc, #308]	; (8003fa0 <SX1272OnDio1Irq+0x1bc>)
 8003e6c:	441a      	add	r2, r3
 8003e6e:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e70:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8003e74:	4619      	mov	r1, r3
 8003e76:	4610      	mov	r0, r2
 8003e78:	f7ff fca2 	bl	80037c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.FifoThresh;
 8003e7c:	4b46      	ldr	r3, [pc, #280]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e7e:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 8003e82:	4b45      	ldr	r3, [pc, #276]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e84:	f893 30c6 	ldrb.w	r3, [r3, #198]	; 0xc6
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	4b42      	ldr	r3, [pc, #264]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e90:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
                break;
 8003e94:	e032      	b.n	8003efc <SX1272OnDio1Irq+0x118>
                    SX1272ReadFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003e96:	4b40      	ldr	r3, [pc, #256]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003e98:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <SX1272OnDio1Irq+0x1bc>)
 8003ea0:	18d0      	adds	r0, r2, r3
 8003ea2:	4b3d      	ldr	r3, [pc, #244]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003ea4:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b3b      	ldr	r3, [pc, #236]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003eac:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	f7ff fc82 	bl	80037c0 <SX1272ReadFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003ebc:	4b36      	ldr	r3, [pc, #216]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003ebe:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8003ec2:	4b35      	ldr	r3, [pc, #212]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003ec4:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
                break;
 8003ec8:	e018      	b.n	8003efc <SX1272OnDio1Irq+0x118>
                TimerStop( &RxTimeoutTimer );
 8003eca:	4836      	ldr	r0, [pc, #216]	; (8003fa4 <SX1272OnDio1Irq+0x1c0>)
 8003ecc:	f000 f9c4 	bl	8004258 <TimerStop>
                SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_RXTIMEOUT );
 8003ed0:	2180      	movs	r1, #128	; 0x80
 8003ed2:	2012      	movs	r0, #18
 8003ed4:	f7ff fbda 	bl	800368c <SX1272Write>
                SX1272.Settings.State = RF_IDLE;
 8003ed8:	4b2f      	ldr	r3, [pc, #188]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
                if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8003ee0:	4b31      	ldr	r3, [pc, #196]	; (8003fa8 <SX1272OnDio1Irq+0x1c4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d008      	beq.n	8003efa <SX1272OnDio1Irq+0x116>
 8003ee8:	4b2f      	ldr	r3, [pc, #188]	; (8003fa8 <SX1272OnDio1Irq+0x1c4>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <SX1272OnDio1Irq+0x116>
                    RadioEvents->RxTimeout( );
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <SX1272OnDio1Irq+0x1c4>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	4798      	blx	r3
                break;
 8003efa:	bf00      	nop
            break;
 8003efc:	e04a      	b.n	8003f94 <SX1272OnDio1Irq+0x1b0>
            switch( SX1272.Settings.Modem )
 8003efe:	4b26      	ldr	r3, [pc, #152]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f00:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <SX1272OnDio1Irq+0x12a>
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d041      	beq.n	8003f90 <SX1272OnDio1Irq+0x1ac>
                break;
 8003f0c:	e041      	b.n	8003f92 <SX1272OnDio1Irq+0x1ae>
                if( ( SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes ) > SX1272.Settings.FskPacketHandler.ChunkSize )
 8003f0e:	4b22      	ldr	r3, [pc, #136]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f10:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b20      	ldr	r3, [pc, #128]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f18:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f20:	f892 20c7 	ldrb.w	r2, [r2, #199]	; 0xc7
 8003f24:	4293      	cmp	r3, r2
 8003f26:	dd19      	ble.n	8003f5c <SX1272OnDio1Irq+0x178>
                    SX1272WriteFifo( ( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes ), SX1272.Settings.FskPacketHandler.ChunkSize );
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f2a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003f2e:	461a      	mov	r2, r3
 8003f30:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <SX1272OnDio1Irq+0x1bc>)
 8003f32:	441a      	add	r2, r3
 8003f34:	4b18      	ldr	r3, [pc, #96]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f36:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	4610      	mov	r0, r2
 8003f3e:	f7ff fc2f 	bl	80037a0 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.ChunkSize;
 8003f42:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f44:	f8b3 20c4 	ldrh.w	r2, [r3, #196]	; 0xc4
 8003f48:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f4a:	f893 30c7 	ldrb.w	r3, [r3, #199]	; 0xc7
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	4413      	add	r3, r2
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f56:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
                break;
 8003f5a:	e01a      	b.n	8003f92 <SX1272OnDio1Irq+0x1ae>
                    SX1272WriteFifo( RxTxBuffer + SX1272.Settings.FskPacketHandler.NbBytes, SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes );
 8003f5c:	4b0e      	ldr	r3, [pc, #56]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f5e:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003f62:	461a      	mov	r2, r3
 8003f64:	4b0e      	ldr	r3, [pc, #56]	; (8003fa0 <SX1272OnDio1Irq+0x1bc>)
 8003f66:	18d0      	adds	r0, r2, r3
 8003f68:	4b0b      	ldr	r3, [pc, #44]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f6a:	f8b3 30c2 	ldrh.w	r3, [r3, #194]	; 0xc2
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	4b09      	ldr	r3, [pc, #36]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f72:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	; 0xc4
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	4619      	mov	r1, r3
 8003f7e:	f7ff fc0f 	bl	80037a0 <SX1272WriteFifo>
                    SX1272.Settings.FskPacketHandler.NbBytes += SX1272.Settings.FskPacketHandler.Size - SX1272.Settings.FskPacketHandler.NbBytes;
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f84:	f8b3 20c2 	ldrh.w	r2, [r3, #194]	; 0xc2
 8003f88:	4b03      	ldr	r3, [pc, #12]	; (8003f98 <SX1272OnDio1Irq+0x1b4>)
 8003f8a:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
                break;
 8003f8e:	e000      	b.n	8003f92 <SX1272OnDio1Irq+0x1ae>
                break;
 8003f90:	bf00      	nop
            break;
 8003f92:	bf00      	nop
    }
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000170 	.word	0x20000170
 8003f9c:	20000232 	.word	0x20000232
 8003fa0:	20000048 	.word	0x20000048
 8003fa4:	20000288 	.word	0x20000288
 8003fa8:	20000044 	.word	0x20000044
 8003fac:	00000000 	.word	0x00000000

08003fb0 <SX1272OnDio2Irq>:

void SX1272OnDio2Irq( void )
{
 8003fb0:	b598      	push	{r3, r4, r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.State )
 8003fb4:	4b5e      	ldr	r3, [pc, #376]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8003fb6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d003      	beq.n	8003fc6 <SX1272OnDio2Irq+0x16>
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	f000 8084 	beq.w	80040cc <SX1272OnDio2Irq+0x11c>
            default:
                break;
            }
            break;
        default:
            break;
 8003fc4:	e0ad      	b.n	8004122 <SX1272OnDio2Irq+0x172>
            switch( SX1272.Settings.Modem )
 8003fc6:	4b5a      	ldr	r3, [pc, #360]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8003fc8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d002      	beq.n	8003fd6 <SX1272OnDio2Irq+0x26>
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d058      	beq.n	8004086 <SX1272OnDio2Irq+0xd6>
                break;
 8003fd4:	e079      	b.n	80040ca <SX1272OnDio2Irq+0x11a>
                if( SX1272.DIO4.port == NULL )
 8003fd6:	4b56      	ldr	r3, [pc, #344]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d103      	bne.n	8003fe6 <SX1272OnDio2Irq+0x36>
                    SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 8003fde:	4b54      	ldr	r3, [pc, #336]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
                if( ( SX1272.Settings.FskPacketHandler.PreambleDetected == true ) && ( SX1272.Settings.FskPacketHandler.SyncWordDetected == false ) )
 8003fe6:	4b52      	ldr	r3, [pc, #328]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8003fe8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d169      	bne.n	80040c4 <SX1272OnDio2Irq+0x114>
 8003ff0:	4b4f      	ldr	r3, [pc, #316]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8003ff2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d164      	bne.n	80040c4 <SX1272OnDio2Irq+0x114>
                    TimerStop( &RxTimeoutSyncWord );
 8003ffa:	484e      	ldr	r0, [pc, #312]	; (8004134 <SX1272OnDio2Irq+0x184>)
 8003ffc:	f000 f92c 	bl	8004258 <TimerStop>
                    SX1272.Settings.FskPacketHandler.SyncWordDetected = true;
 8004000:	4b4b      	ldr	r3, [pc, #300]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8004002:	2201      	movs	r2, #1
 8004004:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
                    SX1272.Settings.FskPacketHandler.RssiValue = -( SX1272Read( REG_RSSIVALUE ) >> 1 );
 8004008:	2011      	movs	r0, #17
 800400a:	f7ff fb51 	bl	80036b0 <SX1272Read>
 800400e:	4603      	mov	r3, r0
 8004010:	085b      	lsrs	r3, r3, #1
 8004012:	b2db      	uxtb	r3, r3
 8004014:	425b      	negs	r3, r3
 8004016:	b2db      	uxtb	r3, r3
 8004018:	b25a      	sxtb	r2, r3
 800401a:	4b45      	ldr	r3, [pc, #276]	; (8004130 <SX1272OnDio2Irq+0x180>)
 800401c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
                    SX1272.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8004020:	201b      	movs	r0, #27
 8004022:	f7ff fb45 	bl	80036b0 <SX1272Read>
 8004026:	4603      	mov	r3, r0
 8004028:	021c      	lsls	r4, r3, #8
                                                                           ( uint16_t )SX1272Read( REG_AFCLSB ) ) *
 800402a:	201c      	movs	r0, #28
 800402c:	f7ff fb40 	bl	80036b0 <SX1272Read>
 8004030:	4603      	mov	r3, r0
                    SX1272.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 8004032:	4323      	orrs	r3, r4
 8004034:	4618      	mov	r0, r3
 8004036:	f7fc fa21 	bl	800047c <__aeabi_i2d>
 800403a:	4603      	mov	r3, r0
 800403c:	460c      	mov	r4, r1
 800403e:	4618      	mov	r0, r3
 8004040:	4621      	mov	r1, r4
 8004042:	f7fc fd1f 	bl	8000a84 <__aeabi_d2iz>
 8004046:	4603      	mov	r3, r0
                                                                           ( uint16_t )SX1272Read( REG_AFCLSB ) ) *
 8004048:	4618      	mov	r0, r3
 800404a:	f7fc fa17 	bl	800047c <__aeabi_i2d>
 800404e:	a336      	add	r3, pc, #216	; (adr r3, 8004128 <SX1272OnDio2Irq+0x178>)
 8004050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004054:	f7fc fa7c 	bl	8000550 <__aeabi_dmul>
 8004058:	4603      	mov	r3, r0
 800405a:	460c      	mov	r4, r1
                    SX1272.Settings.FskPacketHandler.AfcValue = ( int32_t )( double )( ( ( uint16_t )SX1272Read( REG_AFCMSB ) << 8 ) |
 800405c:	4618      	mov	r0, r3
 800405e:	4621      	mov	r1, r4
 8004060:	f7fc fd10 	bl	8000a84 <__aeabi_d2iz>
 8004064:	4602      	mov	r2, r0
 8004066:	4b32      	ldr	r3, [pc, #200]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8004068:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
                    SX1272.Settings.FskPacketHandler.RxGain = ( SX1272Read( REG_LNA ) >> 5 ) & 0x07;
 800406c:	200c      	movs	r0, #12
 800406e:	f7ff fb1f 	bl	80036b0 <SX1272Read>
 8004072:	4603      	mov	r3, r0
 8004074:	095b      	lsrs	r3, r3, #5
 8004076:	b2db      	uxtb	r3, r3
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	b2da      	uxtb	r2, r3
 800407e:	4b2c      	ldr	r3, [pc, #176]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8004080:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
                break;
 8004084:	e01e      	b.n	80040c4 <SX1272OnDio2Irq+0x114>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 8004086:	4b2a      	ldr	r3, [pc, #168]	; (8004130 <SX1272OnDio2Irq+0x180>)
 8004088:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <SX1272OnDio2Irq+0x118>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 8004090:	2102      	movs	r1, #2
 8004092:	2012      	movs	r0, #18
 8004094:	f7ff fafa 	bl	800368c <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 8004098:	4b27      	ldr	r3, [pc, #156]	; (8004138 <SX1272OnDio2Irq+0x188>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d013      	beq.n	80040c8 <SX1272OnDio2Irq+0x118>
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <SX1272OnDio2Irq+0x188>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d00e      	beq.n	80040c8 <SX1272OnDio2Irq+0x118>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 80040aa:	4b23      	ldr	r3, [pc, #140]	; (8004138 <SX1272OnDio2Irq+0x188>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695c      	ldr	r4, [r3, #20]
 80040b0:	201c      	movs	r0, #28
 80040b2:	f7ff fafd 	bl	80036b0 <SX1272Read>
 80040b6:	4603      	mov	r3, r0
 80040b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	4618      	mov	r0, r3
 80040c0:	47a0      	blx	r4
                break;
 80040c2:	e001      	b.n	80040c8 <SX1272OnDio2Irq+0x118>
                break;
 80040c4:	bf00      	nop
 80040c6:	e02c      	b.n	8004122 <SX1272OnDio2Irq+0x172>
                break;
 80040c8:	bf00      	nop
            break;
 80040ca:	e02a      	b.n	8004122 <SX1272OnDio2Irq+0x172>
            switch( SX1272.Settings.Modem )
 80040cc:	4b18      	ldr	r3, [pc, #96]	; (8004130 <SX1272OnDio2Irq+0x180>)
 80040ce:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d021      	beq.n	800411a <SX1272OnDio2Irq+0x16a>
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d000      	beq.n	80040dc <SX1272OnDio2Irq+0x12c>
                break;
 80040da:	e021      	b.n	8004120 <SX1272OnDio2Irq+0x170>
                if( SX1272.Settings.LoRa.FreqHopOn == true )
 80040dc:	4b14      	ldr	r3, [pc, #80]	; (8004130 <SX1272OnDio2Irq+0x180>)
 80040de:	f893 30db 	ldrb.w	r3, [r3, #219]	; 0xdb
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d01b      	beq.n	800411e <SX1272OnDio2Irq+0x16e>
                    SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_FHSSCHANGEDCHANNEL );
 80040e6:	2102      	movs	r1, #2
 80040e8:	2012      	movs	r0, #18
 80040ea:	f7ff facf 	bl	800368c <SX1272Write>
                    if( ( RadioEvents != NULL ) && ( RadioEvents->FhssChangeChannel != NULL ) )
 80040ee:	4b12      	ldr	r3, [pc, #72]	; (8004138 <SX1272OnDio2Irq+0x188>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d013      	beq.n	800411e <SX1272OnDio2Irq+0x16e>
 80040f6:	4b10      	ldr	r3, [pc, #64]	; (8004138 <SX1272OnDio2Irq+0x188>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d00e      	beq.n	800411e <SX1272OnDio2Irq+0x16e>
                        RadioEvents->FhssChangeChannel( ( SX1272Read( REG_LR_HOPCHANNEL ) & RFLR_HOPCHANNEL_CHANNEL_MASK ) );
 8004100:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <SX1272OnDio2Irq+0x188>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695c      	ldr	r4, [r3, #20]
 8004106:	201c      	movs	r0, #28
 8004108:	f7ff fad2 	bl	80036b0 <SX1272Read>
 800410c:	4603      	mov	r3, r0
 800410e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004112:	b2db      	uxtb	r3, r3
 8004114:	4618      	mov	r0, r3
 8004116:	47a0      	blx	r4
                break;
 8004118:	e001      	b.n	800411e <SX1272OnDio2Irq+0x16e>
                break;
 800411a:	bf00      	nop
 800411c:	e000      	b.n	8004120 <SX1272OnDio2Irq+0x170>
                break;
 800411e:	bf00      	nop
            break;
 8004120:	bf00      	nop
    }
}
 8004122:	bf00      	nop
 8004124:	bd98      	pop	{r3, r4, r7, pc}
 8004126:	bf00      	nop
 8004128:	00000000 	.word	0x00000000
 800412c:	404e8480 	.word	0x404e8480
 8004130:	20000170 	.word	0x20000170
 8004134:	20000274 	.word	0x20000274
 8004138:	20000044 	.word	0x20000044

0800413c <SX1272OnDio3Irq>:

void SX1272OnDio3Irq( void )
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.Modem )
 8004140:	4b1d      	ldr	r3, [pc, #116]	; (80041b8 <SX1272OnDio3Irq+0x7c>)
 8004142:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8004146:	2b00      	cmp	r3, #0
 8004148:	d030      	beq.n	80041ac <SX1272OnDio3Irq+0x70>
 800414a:	2b01      	cmp	r3, #1
 800414c:	d000      	beq.n	8004150 <SX1272OnDio3Irq+0x14>
                RadioEvents->CadDone( false );
            }
        }
        break;
    default:
        break;
 800414e:	e030      	b.n	80041b2 <SX1272OnDio3Irq+0x76>
        if( ( SX1272Read( REG_LR_IRQFLAGS ) & RFLR_IRQFLAGS_CADDETECTED ) == RFLR_IRQFLAGS_CADDETECTED )
 8004150:	2012      	movs	r0, #18
 8004152:	f7ff faad 	bl	80036b0 <SX1272Read>
 8004156:	4603      	mov	r3, r0
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d112      	bne.n	8004186 <SX1272OnDio3Irq+0x4a>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDETECTED | RFLR_IRQFLAGS_CADDONE );
 8004160:	2105      	movs	r1, #5
 8004162:	2012      	movs	r0, #18
 8004164:	f7ff fa92 	bl	800368c <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8004168:	4b14      	ldr	r3, [pc, #80]	; (80041bc <SX1272OnDio3Irq+0x80>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01f      	beq.n	80041b0 <SX1272OnDio3Irq+0x74>
 8004170:	4b12      	ldr	r3, [pc, #72]	; (80041bc <SX1272OnDio3Irq+0x80>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d01a      	beq.n	80041b0 <SX1272OnDio3Irq+0x74>
                RadioEvents->CadDone( true );
 800417a:	4b10      	ldr	r3, [pc, #64]	; (80041bc <SX1272OnDio3Irq+0x80>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	2001      	movs	r0, #1
 8004182:	4798      	blx	r3
        break;
 8004184:	e014      	b.n	80041b0 <SX1272OnDio3Irq+0x74>
            SX1272Write( REG_LR_IRQFLAGS, RFLR_IRQFLAGS_CADDONE );
 8004186:	2104      	movs	r1, #4
 8004188:	2012      	movs	r0, #18
 800418a:	f7ff fa7f 	bl	800368c <SX1272Write>
            if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800418e:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <SX1272OnDio3Irq+0x80>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00c      	beq.n	80041b0 <SX1272OnDio3Irq+0x74>
 8004196:	4b09      	ldr	r3, [pc, #36]	; (80041bc <SX1272OnDio3Irq+0x80>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d007      	beq.n	80041b0 <SX1272OnDio3Irq+0x74>
                RadioEvents->CadDone( false );
 80041a0:	4b06      	ldr	r3, [pc, #24]	; (80041bc <SX1272OnDio3Irq+0x80>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2000      	movs	r0, #0
 80041a8:	4798      	blx	r3
        break;
 80041aa:	e001      	b.n	80041b0 <SX1272OnDio3Irq+0x74>
        break;
 80041ac:	bf00      	nop
 80041ae:	e000      	b.n	80041b2 <SX1272OnDio3Irq+0x76>
        break;
 80041b0:	bf00      	nop
    }
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000170 	.word	0x20000170
 80041bc:	20000044 	.word	0x20000044

080041c0 <SX1272OnDio4Irq>:

void SX1272OnDio4Irq( void )
{
 80041c0:	b480      	push	{r7}
 80041c2:	af00      	add	r7, sp, #0
    switch( SX1272.Settings.Modem )
 80041c4:	4b0c      	ldr	r3, [pc, #48]	; (80041f8 <SX1272OnDio4Irq+0x38>)
 80041c6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <SX1272OnDio4Irq+0x14>
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d00a      	beq.n	80041e8 <SX1272OnDio4Irq+0x28>
        }
        break;
    case MODEM_LORA:
        break;
    default:
        break;
 80041d2:	e00c      	b.n	80041ee <SX1272OnDio4Irq+0x2e>
            if( SX1272.Settings.FskPacketHandler.PreambleDetected == false )
 80041d4:	4b08      	ldr	r3, [pc, #32]	; (80041f8 <SX1272OnDio4Irq+0x38>)
 80041d6:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d106      	bne.n	80041ec <SX1272OnDio4Irq+0x2c>
                SX1272.Settings.FskPacketHandler.PreambleDetected = true;
 80041de:	4b06      	ldr	r3, [pc, #24]	; (80041f8 <SX1272OnDio4Irq+0x38>)
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
        break;
 80041e6:	e001      	b.n	80041ec <SX1272OnDio4Irq+0x2c>
        break;
 80041e8:	bf00      	nop
 80041ea:	e000      	b.n	80041ee <SX1272OnDio4Irq+0x2e>
        break;
 80041ec:	bf00      	nop
    }
}
 80041ee:	bf00      	nop
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr
 80041f8:	20000170 	.word	0x20000170

080041fc <DelayMs>:

/* Includes ------------------------------------------------------------------*/
#include "timeServer.h"

void DelayMs( uint32_t ms )
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
//  HW_RTC_DelayMs( ms );

}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <TimerInit>:
static bool TimerExists( TimerEvent_t *obj );



void TimerInit( TimerEvent_t *obj, void ( *callback )( void ) )
{
 8004210:	b480      	push	{r7}
 8004212:	b083      	sub	sp, #12
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	6039      	str	r1, [r7, #0]
  obj->Timestamp = 0;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
  obj->ReloadValue = 0;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	605a      	str	r2, [r3, #4]
  obj->IsRunning = false;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	721a      	strb	r2, [r3, #8]
  obj->Callback = callback;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	683a      	ldr	r2, [r7, #0]
 8004230:	60da      	str	r2, [r3, #12]
  obj->Next = NULL;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	611a      	str	r2, [r3, #16]
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TimerStart>:

void TimerStart( TimerEvent_t *obj )
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
//    {
//      TimerInsertTimer( obj);
//    }
//  }
//  RESTORE_PRIMASK( );
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <TimerStop>:
    TimerSetTimeout( TimerListHead );
  }
}

void TimerStop( TimerEvent_t *obj ) 
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b088      	sub	sp, #32
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004260:	f3ef 8310 	mrs	r3, PRIMASK
 8004264:	613b      	str	r3, [r7, #16]
  return(result);
 8004266:	693b      	ldr	r3, [r7, #16]
  BACKUP_PRIMASK();
 8004268:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800426a:	b672      	cpsid	i
  
  DISABLE_IRQ( );
  
  TimerEvent_t* prev = TimerListHead;
 800426c:	4b34      	ldr	r3, [pc, #208]	; (8004340 <TimerStop+0xe8>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	61fb      	str	r3, [r7, #28]
  TimerEvent_t* cur = TimerListHead;
 8004272:	4b33      	ldr	r3, [pc, #204]	; (8004340 <TimerStop+0xe8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	61bb      	str	r3, [r7, #24]

  // List is empty or the Obj to stop does not exist 
  if( ( TimerListHead == NULL ) || ( obj == NULL ) )
 8004278:	4b31      	ldr	r3, [pc, #196]	; (8004340 <TimerStop+0xe8>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <TimerStop+0x2e>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d105      	bne.n	8004292 <TimerStop+0x3a>
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	60fb      	str	r3, [r7, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f383 8810 	msr	PRIMASK, r3
  {
    RESTORE_PRIMASK( );
    return;
 8004290:	e052      	b.n	8004338 <TimerStop+0xe0>
  }

  if( TimerListHead == obj ) // Stop the Head                  
 8004292:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <TimerStop+0xe8>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	429a      	cmp	r2, r3
 800429a:	d145      	bne.n	8004328 <TimerStop+0xd0>
  {
    if( TimerListHead->IsRunning == true ) // The head is already running 
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <TimerStop+0xe8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	7a1b      	ldrb	r3, [r3, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d017      	beq.n	80042d6 <TimerStop+0x7e>
    {    
      if( TimerListHead->Next != NULL )
 80042a6:	4b26      	ldr	r3, [pc, #152]	; (8004340 <TimerStop+0xe8>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d00e      	beq.n	80042ce <TimerStop+0x76>
      {
        TimerListHead->IsRunning = false;
 80042b0:	4b23      	ldr	r3, [pc, #140]	; (8004340 <TimerStop+0xe8>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2200      	movs	r2, #0
 80042b6:	721a      	strb	r2, [r3, #8]
        TimerListHead = TimerListHead->Next;
 80042b8:	4b21      	ldr	r3, [pc, #132]	; (8004340 <TimerStop+0xe8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	4a20      	ldr	r2, [pc, #128]	; (8004340 <TimerStop+0xe8>)
 80042c0:	6013      	str	r3, [r2, #0]
        TimerSetTimeout( TimerListHead );
 80042c2:	4b1f      	ldr	r3, [pc, #124]	; (8004340 <TimerStop+0xe8>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 f85a 	bl	8004380 <TimerSetTimeout>
 80042cc:	e02f      	b.n	800432e <TimerStop+0xd6>
      }
      else
      {
        //HW_RTC_StopAlarm( );
        TimerListHead = NULL;
 80042ce:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <TimerStop+0xe8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	601a      	str	r2, [r3, #0]
 80042d4:	e02b      	b.n	800432e <TimerStop+0xd6>
      }
    }
    else // Stop the head before it is started
    {   
      if( TimerListHead->Next != NULL )   
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <TimerStop+0xe8>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d005      	beq.n	80042ec <TimerStop+0x94>
      {
        TimerListHead = TimerListHead->Next;
 80042e0:	4b17      	ldr	r3, [pc, #92]	; (8004340 <TimerStop+0xe8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	4a16      	ldr	r2, [pc, #88]	; (8004340 <TimerStop+0xe8>)
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	e020      	b.n	800432e <TimerStop+0xd6>
      }
      else
      {
        TimerListHead = NULL;
 80042ec:	4b14      	ldr	r3, [pc, #80]	; (8004340 <TimerStop+0xe8>)
 80042ee:	2200      	movs	r2, #0
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	e01c      	b.n	800432e <TimerStop+0xd6>
  }
  else // Stop an object within the list
  {      
    while( cur != NULL )
    {
      if( cur == obj )
 80042f4:	69ba      	ldr	r2, [r7, #24]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d110      	bne.n	800431e <TimerStop+0xc6>
      {
        if( cur->Next != NULL )
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d006      	beq.n	8004312 <TimerStop+0xba>
        {
          cur = cur->Next;
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	611a      	str	r2, [r3, #16]
        else
        {
          cur = NULL;
          prev->Next = cur;
        }
        break;
 8004310:	e00d      	b.n	800432e <TimerStop+0xd6>
          cur = NULL;
 8004312:	2300      	movs	r3, #0
 8004314:	61bb      	str	r3, [r7, #24]
          prev->Next = cur;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	611a      	str	r2, [r3, #16]
        break;
 800431c:	e007      	b.n	800432e <TimerStop+0xd6>
      }
      else
      {
        prev = cur;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	61fb      	str	r3, [r7, #28]
        cur = cur->Next;
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	691b      	ldr	r3, [r3, #16]
 8004326:	61bb      	str	r3, [r7, #24]
    while( cur != NULL )
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d1e2      	bne.n	80042f4 <TimerStop+0x9c>
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f383 8810 	msr	PRIMASK, r3
      }
    }   
  }
  
  RESTORE_PRIMASK( );
}  
 8004338:	3720      	adds	r7, #32
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20000148 	.word	0x20000148

08004344 <TimerSetValue>:
  TimerStop( obj );
  TimerStart( obj );
}

void TimerSetValue( TimerEvent_t *obj, uint32_t value )
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
//    ticks = minValue;
//  }
//
//  obj->Timestamp = ticks;
//  obj->ReloadValue = ticks;
}
 800434e:	bf00      	nop
 8004350:	370c      	adds	r7, #12
 8004352:	46bd      	mov	sp, r7
 8004354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004358:	4770      	bx	lr

0800435a <TimerGetCurrentTime>:

TimerTime_t TimerGetCurrentTime( void )
{
 800435a:	b480      	push	{r7}
 800435c:	af00      	add	r7, sp, #0
//  uint32_t now = HW_RTC_GetTimerValue( );
//  return  HW_RTC_Tick2ms(now);
}
 800435e:	bf00      	nop
 8004360:	4618      	mov	r0, r3
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr

0800436a <TimerGetElapsedTime>:

TimerTime_t TimerGetElapsedTime( TimerTime_t past )
{
 800436a:	b480      	push	{r7}
 800436c:	b083      	sub	sp, #12
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
//  uint32_t nowInTicks = HW_RTC_GetTimerValue( );
//  uint32_t pastInTicks = HW_RTC_ms2Tick( past );
//  /* intentional wrap around. Works Ok if tick duation below 1ms */
//  return HW_RTC_Tick2ms( nowInTicks- pastInTicks );
}
 8004372:	bf00      	nop
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <TimerSetTimeout>:

static void TimerSetTimeout( TimerEvent_t *obj )
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
//  if(obj->Timestamp  < (HW_RTC_GetTimerElapsedTime(  ) + minTicks) )
//  {
//    obj->Timestamp = HW_RTC_GetTimerElapsedTime(  ) + minTicks;
//  }
//  HW_RTC_SetAlarm( obj->Timestamp );
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <memcpy1>:
{
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
}

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8004394:	b480      	push	{r7}
 8004396:	b085      	sub	sp, #20
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	4613      	mov	r3, r2
 80043a0:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 80043a2:	e007      	b.n	80043b4 <memcpy1+0x20>
    {
        *dst++ = *src++;
 80043a4:	68ba      	ldr	r2, [r7, #8]
 80043a6:	1c53      	adds	r3, r2, #1
 80043a8:	60bb      	str	r3, [r7, #8]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	1c59      	adds	r1, r3, #1
 80043ae:	60f9      	str	r1, [r7, #12]
 80043b0:	7812      	ldrb	r2, [r2, #0]
 80043b2:	701a      	strb	r2, [r3, #0]
    while( size-- )
 80043b4:	88fb      	ldrh	r3, [r7, #6]
 80043b6:	1e5a      	subs	r2, r3, #1
 80043b8:	80fa      	strh	r2, [r7, #6]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f2      	bne.n	80043a4 <memcpy1+0x10>
    }
}
 80043be:	bf00      	nop
 80043c0:	3714      	adds	r7, #20
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <GPIO_SetIrq>:
 * @param [IN] prio       NVIC priority (0 is highest)
 * @param [IN] irqHandler  points to the  function to execute
 * @retval none
 */
void GPIO_SetIrq( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint32_t prio,  GpioIrqHandler *irqHandler )
{
 80043ca:	b480      	push	{r7}
 80043cc:	b085      	sub	sp, #20
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	607a      	str	r2, [r7, #4]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	460b      	mov	r3, r1
 80043d8:	817b      	strh	r3, [r7, #10]
//
//    HAL_NVIC_SetPriority( IRQnb , prio, 0);
//
//    HAL_NVIC_EnableIRQ( IRQnb );
//  }
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <GPIO_Write>:
 *                   All port bits are not necessarily available on all GPIOs.
 * @param [IN] value New GPIO output value
 * @retval none
 */
void GPIO_Write( GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,  uint32_t value )
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	460b      	mov	r3, r1
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	817b      	strh	r3, [r7, #10]
  HAL_GPIO_WritePin( GPIOx, GPIO_Pin , (GPIO_PinState) value );
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	b2da      	uxtb	r2, r3
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	4619      	mov	r1, r3
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f7fc fe60 	bl	80010c2 <HAL_GPIO_WritePin>
}
 8004402:	bf00      	nop
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <GpioWrite>:

  return PinPos;
}

void GpioWrite( Gpio_t *obj, uint32_t value )
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
 8004412:	6039      	str	r1, [r7, #0]
	if( ( obj == NULL ) || ( obj->port == NULL ) )
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
	{
		assert_param( FAIL );
	}
	// Check if pin is not connected
	if( obj->pin == NC )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f993 3000 	ldrsb.w	r3, [r3]
 800441e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004422:	d009      	beq.n	8004438 <GpioWrite+0x2e>
	{
		return;
	}
	HAL_GPIO_WritePin( obj->port, obj->pinIndex , ( GPIO_PinState )value );
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6858      	ldr	r0, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	885b      	ldrh	r3, [r3, #2]
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	4619      	mov	r1, r3
 8004432:	f7fc fe46 	bl	80010c2 <HAL_GPIO_WritePin>
 8004436:	e000      	b.n	800443a <GpioWrite+0x30>
		return;
 8004438:	bf00      	nop
}
 800443a:	3708      	adds	r7, #8
 800443c:	46bd      	mov	sp, r7
 800443e:	bd80      	pop	{r7, pc}

08004440 <SX1272IoIrqInit>:
  initStruct.Pull = GPIO_NOPULL;
  GPIO_Init( RADIO_TCXO_VCC_PORT, RADIO_TCXO_VCC_PIN, &initStruct );
}

void SX1272IoIrqInit( DioIrqHandler **irqHandlers )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  GPIO_SetIrq( RADIO_DIO_0_PORT, RADIO_DIO_0_PIN, IRQ_HIGH_PRIORITY, irqHandlers[0] );
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2203      	movs	r2, #3
 800444e:	2110      	movs	r1, #16
 8004450:	480f      	ldr	r0, [pc, #60]	; (8004490 <SX1272IoIrqInit+0x50>)
 8004452:	f7ff ffba 	bl	80043ca <GPIO_SetIrq>
  GPIO_SetIrq( RADIO_DIO_1_PORT, RADIO_DIO_1_PIN, IRQ_HIGH_PRIORITY, irqHandlers[1] );
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3304      	adds	r3, #4
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2203      	movs	r2, #3
 800445e:	2102      	movs	r1, #2
 8004460:	480b      	ldr	r0, [pc, #44]	; (8004490 <SX1272IoIrqInit+0x50>)
 8004462:	f7ff ffb2 	bl	80043ca <GPIO_SetIrq>
  GPIO_SetIrq( RADIO_DIO_2_PORT, RADIO_DIO_2_PIN, IRQ_HIGH_PRIORITY, irqHandlers[2] );
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	3308      	adds	r3, #8
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2203      	movs	r2, #3
 800446e:	2101      	movs	r1, #1
 8004470:	4807      	ldr	r0, [pc, #28]	; (8004490 <SX1272IoIrqInit+0x50>)
 8004472:	f7ff ffaa 	bl	80043ca <GPIO_SetIrq>
  GPIO_SetIrq( RADIO_DIO_3_PORT, RADIO_DIO_3_PIN, IRQ_HIGH_PRIORITY, irqHandlers[3] );
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	330c      	adds	r3, #12
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2203      	movs	r2, #3
 800447e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004482:	4804      	ldr	r0, [pc, #16]	; (8004494 <SX1272IoIrqInit+0x54>)
 8004484:	f7ff ffa1 	bl	80043ca <GPIO_SetIrq>
//  HW_GPIO_SetIrq( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, IRQ_HIGH_PRIORITY, irqHandlers[4] );
//  HW_GPIO_SetIrq( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, IRQ_HIGH_PRIORITY, irqHandlers[5] );
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40020400 	.word	0x40020400
 8004494:	40020800 	.word	0x40020800

08004498 <SX1272SetRfTxPower>:
//  HW_GPIO_Init( RADIO_DIO_4_PORT, RADIO_DIO_4_PIN, &initStruct );
//  HW_GPIO_Init( RADIO_DIO_5_PORT, RADIO_DIO_5_PIN, &initStruct );
}

void SX1272SetRfTxPower( int8_t power )
{
 8004498:	b590      	push	{r4, r7, lr}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	4603      	mov	r3, r0
 80044a0:	71fb      	strb	r3, [r7, #7]
    uint8_t paConfig = 0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	73fb      	strb	r3, [r7, #15]
    uint8_t paDac = 0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	73bb      	strb	r3, [r7, #14]

    paConfig = SX1272Read( REG_PACONFIG );
 80044aa:	2009      	movs	r0, #9
 80044ac:	f7ff f900 	bl	80036b0 <SX1272Read>
 80044b0:	4603      	mov	r3, r0
 80044b2:	73fb      	strb	r3, [r7, #15]
      paDac = SX1272Read( REG_PADAC );
 80044b4:	205a      	movs	r0, #90	; 0x5a
 80044b6:	f7ff f8fb 	bl	80036b0 <SX1272Read>
 80044ba:	4603      	mov	r3, r0
 80044bc:	73bb      	strb	r3, [r7, #14]

      paConfig = ( paConfig & RF_PACONFIG_PASELECT_MASK ) | SX1272GetPaSelect( SX1272.Settings.Channel );
 80044be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c6:	b25c      	sxtb	r4, r3
 80044c8:	4b43      	ldr	r3, [pc, #268]	; (80045d8 <SX1272SetRfTxPower+0x140>)
 80044ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ce:	4618      	mov	r0, r3
 80044d0:	f000 f884 	bl	80045dc <SX1272GetPaSelect>
 80044d4:	4603      	mov	r3, r0
 80044d6:	b25b      	sxtb	r3, r3
 80044d8:	4323      	orrs	r3, r4
 80044da:	b25b      	sxtb	r3, r3
 80044dc:	73fb      	strb	r3, [r7, #15]

      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 80044de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	da4e      	bge.n	8004584 <SX1272SetRfTxPower+0xec>
      {
          if( power > 17 )
 80044e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ea:	2b11      	cmp	r3, #17
 80044ec:	dd04      	ble.n	80044f8 <SX1272SetRfTxPower+0x60>
          {
              paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_ON;
 80044ee:	7bbb      	ldrb	r3, [r7, #14]
 80044f0:	f043 0307 	orr.w	r3, r3, #7
 80044f4:	73bb      	strb	r3, [r7, #14]
 80044f6:	e008      	b.n	800450a <SX1272SetRfTxPower+0x72>
          }
          else
          {
              paDac = ( paDac & RF_PADAC_20DBM_MASK ) | RF_PADAC_20DBM_OFF;
 80044f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80044fc:	f023 0307 	bic.w	r3, r3, #7
 8004500:	b25b      	sxtb	r3, r3
 8004502:	f043 0304 	orr.w	r3, r3, #4
 8004506:	b25b      	sxtb	r3, r3
 8004508:	73bb      	strb	r3, [r7, #14]
          }
          if( ( paDac & RF_PADAC_20DBM_ON ) == RF_PADAC_20DBM_ON )
 800450a:	7bbb      	ldrb	r3, [r7, #14]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	2b07      	cmp	r3, #7
 8004512:	d11b      	bne.n	800454c <SX1272SetRfTxPower+0xb4>
          {
              if( power < 5 )
 8004514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004518:	2b04      	cmp	r3, #4
 800451a:	dc01      	bgt.n	8004520 <SX1272SetRfTxPower+0x88>
              {
                  power = 5;
 800451c:	2305      	movs	r3, #5
 800451e:	71fb      	strb	r3, [r7, #7]
              }
              if( power > 20 )
 8004520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004524:	2b14      	cmp	r3, #20
 8004526:	dd01      	ble.n	800452c <SX1272SetRfTxPower+0x94>
              {
                  power = 20;
 8004528:	2314      	movs	r3, #20
 800452a:	71fb      	strb	r3, [r7, #7]
              }
              paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 5 ) & 0x0F );
 800452c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004530:	f023 030f 	bic.w	r3, r3, #15
 8004534:	b25a      	sxtb	r2, r3
 8004536:	79fb      	ldrb	r3, [r7, #7]
 8004538:	3b05      	subs	r3, #5
 800453a:	b2db      	uxtb	r3, r3
 800453c:	b25b      	sxtb	r3, r3
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	b25b      	sxtb	r3, r3
 8004544:	4313      	orrs	r3, r2
 8004546:	b25b      	sxtb	r3, r3
 8004548:	73fb      	strb	r3, [r7, #15]
 800454a:	e037      	b.n	80045bc <SX1272SetRfTxPower+0x124>
          }
          else
          {
              if( power < 2 )
 800454c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004550:	2b01      	cmp	r3, #1
 8004552:	dc01      	bgt.n	8004558 <SX1272SetRfTxPower+0xc0>
              {
                  power = 2;
 8004554:	2302      	movs	r3, #2
 8004556:	71fb      	strb	r3, [r7, #7]
              }
              if( power > 17 )
 8004558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455c:	2b11      	cmp	r3, #17
 800455e:	dd01      	ble.n	8004564 <SX1272SetRfTxPower+0xcc>
              {
                  power = 17;
 8004560:	2311      	movs	r3, #17
 8004562:	71fb      	strb	r3, [r7, #7]
              }
              paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power - 2 ) & 0x0F );
 8004564:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004568:	f023 030f 	bic.w	r3, r3, #15
 800456c:	b25a      	sxtb	r2, r3
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	3b02      	subs	r3, #2
 8004572:	b2db      	uxtb	r3, r3
 8004574:	b25b      	sxtb	r3, r3
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	b25b      	sxtb	r3, r3
 800457c:	4313      	orrs	r3, r2
 800457e:	b25b      	sxtb	r3, r3
 8004580:	73fb      	strb	r3, [r7, #15]
 8004582:	e01b      	b.n	80045bc <SX1272SetRfTxPower+0x124>
          }
      }
      else
      {
          if( power < -1 )
 8004584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800458c:	da01      	bge.n	8004592 <SX1272SetRfTxPower+0xfa>
          {
              power = -1;
 800458e:	23ff      	movs	r3, #255	; 0xff
 8004590:	71fb      	strb	r3, [r7, #7]
          }
          if( power > 14 )
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	2b0e      	cmp	r3, #14
 8004598:	dd01      	ble.n	800459e <SX1272SetRfTxPower+0x106>
          {
              power = 14;
 800459a:	230e      	movs	r3, #14
 800459c:	71fb      	strb	r3, [r7, #7]
          }
          paConfig = ( paConfig & RFLR_PACONFIG_OUTPUTPOWER_MASK ) | ( uint8_t )( ( uint16_t )( power + 1 ) & 0x0F );
 800459e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045a2:	f023 030f 	bic.w	r3, r3, #15
 80045a6:	b25a      	sxtb	r2, r3
 80045a8:	79fb      	ldrb	r3, [r7, #7]
 80045aa:	3301      	adds	r3, #1
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	b25b      	sxtb	r3, r3
 80045b0:	f003 030f 	and.w	r3, r3, #15
 80045b4:	b25b      	sxtb	r3, r3
 80045b6:	4313      	orrs	r3, r2
 80045b8:	b25b      	sxtb	r3, r3
 80045ba:	73fb      	strb	r3, [r7, #15]
      }
      SX1272Write( REG_PACONFIG, paConfig );
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
 80045be:	4619      	mov	r1, r3
 80045c0:	2009      	movs	r0, #9
 80045c2:	f7ff f863 	bl	800368c <SX1272Write>
      SX1272Write( REG_PADAC, paDac );
 80045c6:	7bbb      	ldrb	r3, [r7, #14]
 80045c8:	4619      	mov	r1, r3
 80045ca:	205a      	movs	r0, #90	; 0x5a
 80045cc:	f7ff f85e 	bl	800368c <SX1272Write>
}
 80045d0:	bf00      	nop
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd90      	pop	{r4, r7, pc}
 80045d8:	20000170 	.word	0x20000170

080045dc <SX1272GetPaSelect>:

uint8_t SX1272GetPaSelect( uint32_t channel )
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
    return RF_PACONFIG_PASELECT_PABOOST;
 80045e4:	2380      	movs	r3, #128	; 0x80
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <SX1272SetAntSw>:
//  HW_GPIO_Init( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, &initStruct  );
//  HW_GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 0);
//}

void SX1272SetAntSw( uint8_t opMode )
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	4603      	mov	r3, r0
 80045fc:	71fb      	strb	r3, [r7, #7]
 uint8_t paConfig =  SX1272Read( REG_PACONFIG );
 80045fe:	2009      	movs	r0, #9
 8004600:	f7ff f856 	bl	80036b0 <SX1272Read>
 8004604:	4603      	mov	r3, r0
 8004606:	73fb      	strb	r3, [r7, #15]
      switch( opMode )
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	2b03      	cmp	r3, #3
 800460c:	d10f      	bne.n	800462e <SX1272SetAntSw+0x3a>
    {
    case RFLR_OPMODE_TRANSMITTER:
      if( ( paConfig & RF_PACONFIG_PASELECT_PABOOST ) == RF_PACONFIG_PASELECT_PABOOST )
 800460e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	da05      	bge.n	8004622 <SX1272SetAntSw+0x2e>
      {
        GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_BOOST, RADIO_ANT_SWITCH_PIN_TX_BOOST, 1 );
 8004616:	2201      	movs	r2, #1
 8004618:	2102      	movs	r1, #2
 800461a:	480c      	ldr	r0, [pc, #48]	; (800464c <SX1272SetAntSw+0x58>)
 800461c:	f7ff fee3 	bl	80043e6 <GPIO_Write>
      else
      {
        GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
      }
      //SX1272.RxTx = 1;
	  break;
 8004620:	e00f      	b.n	8004642 <SX1272SetAntSw+0x4e>
        GPIO_Write( RADIO_ANT_SWITCH_PORT_TX_RFO, RADIO_ANT_SWITCH_PIN_TX_RFO, 1 );
 8004622:	2201      	movs	r2, #1
 8004624:	2104      	movs	r1, #4
 8004626:	4809      	ldr	r0, [pc, #36]	; (800464c <SX1272SetAntSw+0x58>)
 8004628:	f7ff fedd 	bl	80043e6 <GPIO_Write>
	  break;
 800462c:	e009      	b.n	8004642 <SX1272SetAntSw+0x4e>
    case RFLR_OPMODE_RECEIVER:
    case RFLR_OPMODE_RECEIVER_SINGLE:
    case RFLR_OPMODE_CAD:
    default:
    	SX1272.RxTx = 0;
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <SX1272SetAntSw+0x5c>)
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
        GPIO_Write( RADIO_ANT_SWITCH_PORT_RX, RADIO_ANT_SWITCH_PIN_RX, 1 );
 8004636:	2201      	movs	r2, #1
 8004638:	2102      	movs	r1, #2
 800463a:	4806      	ldr	r0, [pc, #24]	; (8004654 <SX1272SetAntSw+0x60>)
 800463c:	f7ff fed3 	bl	80043e6 <GPIO_Write>
        break;
 8004640:	bf00      	nop
    }

}
 8004642:	bf00      	nop
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	40020800 	.word	0x40020800
 8004650:	20000170 	.word	0x20000170
 8004654:	40020000 	.word	0x40020000

08004658 <main>:
static void OnledEvent( void );
/**
 * Main application entry point.
 */
int main( void )
{
 8004658:	b590      	push	{r4, r7, lr}
 800465a:	b08d      	sub	sp, #52	; 0x34
 800465c:	af0a      	add	r7, sp, #40	; 0x28
  bool isMaster = true;
 800465e:	2301      	movs	r3, #1
 8004660:	71fb      	strb	r3, [r7, #7]
  uint8_t i;

  HAL_Init( );
 8004662:	f7fc fbd7 	bl	8000e14 <HAL_Init>

  SystemClock_Config( );
 8004666:	f000 f9c1 	bl	80049ec <SystemClock_Config>

//   Radio initialization
  RadioEvents.TxDone = OnTxDone;
 800466a:	4b9c      	ldr	r3, [pc, #624]	; (80048dc <main+0x284>)
 800466c:	4a9c      	ldr	r2, [pc, #624]	; (80048e0 <main+0x288>)
 800466e:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 8004670:	4b9a      	ldr	r3, [pc, #616]	; (80048dc <main+0x284>)
 8004672:	4a9c      	ldr	r2, [pc, #624]	; (80048e4 <main+0x28c>)
 8004674:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 8004676:	4b99      	ldr	r3, [pc, #612]	; (80048dc <main+0x284>)
 8004678:	4a9b      	ldr	r2, [pc, #620]	; (80048e8 <main+0x290>)
 800467a:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800467c:	4b97      	ldr	r3, [pc, #604]	; (80048dc <main+0x284>)
 800467e:	4a9b      	ldr	r2, [pc, #620]	; (80048ec <main+0x294>)
 8004680:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 8004682:	4b96      	ldr	r3, [pc, #600]	; (80048dc <main+0x284>)
 8004684:	4a9a      	ldr	r2, [pc, #616]	; (80048f0 <main+0x298>)
 8004686:	611a      	str	r2, [r3, #16]

  Radio.Init( &RadioEvents );
 8004688:	4b9a      	ldr	r3, [pc, #616]	; (80048f4 <main+0x29c>)
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4893      	ldr	r0, [pc, #588]	; (80048dc <main+0x284>)
 800468e:	4798      	blx	r3

  Radio.SetChannel( RF_FREQUENCY );
 8004690:	4b98      	ldr	r3, [pc, #608]	; (80048f4 <main+0x29c>)
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	4898      	ldr	r0, [pc, #608]	; (80048f8 <main+0x2a0>)
 8004696:	4798      	blx	r3


#if defined( USE_MODEM_LORA )

  Radio.SetTxConfig( MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8004698:	4b96      	ldr	r3, [pc, #600]	; (80048f4 <main+0x29c>)
 800469a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800469c:	4b97      	ldr	r3, [pc, #604]	; (80048fc <main+0x2a4>)
 800469e:	9308      	str	r3, [sp, #32]
 80046a0:	2300      	movs	r3, #0
 80046a2:	9307      	str	r3, [sp, #28]
 80046a4:	2300      	movs	r3, #0
 80046a6:	9306      	str	r3, [sp, #24]
 80046a8:	2300      	movs	r3, #0
 80046aa:	9305      	str	r3, [sp, #20]
 80046ac:	2301      	movs	r3, #1
 80046ae:	9304      	str	r3, [sp, #16]
 80046b0:	2300      	movs	r3, #0
 80046b2:	9303      	str	r3, [sp, #12]
 80046b4:	2308      	movs	r3, #8
 80046b6:	9302      	str	r3, [sp, #8]
 80046b8:	2301      	movs	r3, #1
 80046ba:	9301      	str	r3, [sp, #4]
 80046bc:	2307      	movs	r3, #7
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	2200      	movs	r2, #0
 80046c4:	210e      	movs	r1, #14
 80046c6:	2001      	movs	r0, #1
 80046c8:	47a0      	blx	r4
                                 LORA_SPREADING_FACTOR, LORA_CODINGRATE,
                                   LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
                                   true, 0, 0, LORA_IQ_INVERSION_ON, 3000000 );

  Radio.SetRxConfig( MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 80046ca:	4b8a      	ldr	r3, [pc, #552]	; (80048f4 <main+0x29c>)
 80046cc:	6a1c      	ldr	r4, [r3, #32]
 80046ce:	2301      	movs	r3, #1
 80046d0:	9309      	str	r3, [sp, #36]	; 0x24
 80046d2:	2300      	movs	r3, #0
 80046d4:	9308      	str	r3, [sp, #32]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9307      	str	r3, [sp, #28]
 80046da:	2300      	movs	r3, #0
 80046dc:	9306      	str	r3, [sp, #24]
 80046de:	2301      	movs	r3, #1
 80046e0:	9305      	str	r3, [sp, #20]
 80046e2:	2300      	movs	r3, #0
 80046e4:	9304      	str	r3, [sp, #16]
 80046e6:	2300      	movs	r3, #0
 80046e8:	9303      	str	r3, [sp, #12]
 80046ea:	2305      	movs	r3, #5
 80046ec:	9302      	str	r3, [sp, #8]
 80046ee:	2308      	movs	r3, #8
 80046f0:	9301      	str	r3, [sp, #4]
 80046f2:	2300      	movs	r3, #0
 80046f4:	9300      	str	r3, [sp, #0]
 80046f6:	2301      	movs	r3, #1
 80046f8:	2207      	movs	r2, #7
 80046fa:	2100      	movs	r1, #0
 80046fc:	2001      	movs	r0, #1
 80046fe:	47a0      	blx	r4

#else
    #error "Please define a frequency band in the compiler options."
#endif

  Radio.Rx( RX_TIMEOUT_VALUE );
 8004700:	4b7c      	ldr	r3, [pc, #496]	; (80048f4 <main+0x29c>)
 8004702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004704:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004708:	4798      	blx	r3

  while( 1 )
  {
    switch( State )
 800470a:	4b7d      	ldr	r3, [pc, #500]	; (8004900 <main+0x2a8>)
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	3b01      	subs	r3, #1
 8004710:	2b04      	cmp	r3, #4
 8004712:	f200 80df 	bhi.w	80048d4 <main+0x27c>
 8004716:	a201      	add	r2, pc, #4	; (adr r2, 800471c <main+0xc4>)
 8004718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471c:	08004731 	.word	0x08004731
 8004720:	0800485d 	.word	0x0800485d
 8004724:	0800485d 	.word	0x0800485d
 8004728:	0800484b 	.word	0x0800484b
 800472c:	080048c3 	.word	0x080048c3
    {
    case RX:
      if( isMaster == true )
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d04b      	beq.n	80047ce <main+0x176>
      {
        if( BufferSize > 0 )
 8004736:	4b73      	ldr	r3, [pc, #460]	; (8004904 <main+0x2ac>)
 8004738:	881b      	ldrh	r3, [r3, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	f000 8081 	beq.w	8004842 <main+0x1ea>
        {
          if( strncmp( ( const char* )Buffer, ( const char* )PongMsg, 4 ) == 0 )
 8004740:	2204      	movs	r2, #4
 8004742:	4971      	ldr	r1, [pc, #452]	; (8004908 <main+0x2b0>)
 8004744:	4871      	ldr	r0, [pc, #452]	; (800490c <main+0x2b4>)
 8004746:	f000 fa96 	bl	8004c76 <strncmp>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d126      	bne.n	800479e <main+0x146>
          {

            // Send the next PING frame
            Buffer[0] = 'P';
 8004750:	4b6e      	ldr	r3, [pc, #440]	; (800490c <main+0x2b4>)
 8004752:	2250      	movs	r2, #80	; 0x50
 8004754:	701a      	strb	r2, [r3, #0]
            Buffer[1] = 'I';
 8004756:	4b6d      	ldr	r3, [pc, #436]	; (800490c <main+0x2b4>)
 8004758:	2249      	movs	r2, #73	; 0x49
 800475a:	705a      	strb	r2, [r3, #1]
            Buffer[2] = 'N';
 800475c:	4b6b      	ldr	r3, [pc, #428]	; (800490c <main+0x2b4>)
 800475e:	224e      	movs	r2, #78	; 0x4e
 8004760:	709a      	strb	r2, [r3, #2]
            Buffer[3] = 'G';
 8004762:	4b6a      	ldr	r3, [pc, #424]	; (800490c <main+0x2b4>)
 8004764:	2247      	movs	r2, #71	; 0x47
 8004766:	70da      	strb	r2, [r3, #3]
            // We fill the buffer with numbers for the payload
            for( i = 4; i < BufferSize; i++ )
 8004768:	2304      	movs	r3, #4
 800476a:	71bb      	strb	r3, [r7, #6]
 800476c:	e008      	b.n	8004780 <main+0x128>
            {
              Buffer[i] = i - 4;
 800476e:	79bb      	ldrb	r3, [r7, #6]
 8004770:	79ba      	ldrb	r2, [r7, #6]
 8004772:	3a04      	subs	r2, #4
 8004774:	b2d1      	uxtb	r1, r2
 8004776:	4a65      	ldr	r2, [pc, #404]	; (800490c <main+0x2b4>)
 8004778:	54d1      	strb	r1, [r2, r3]
            for( i = 4; i < BufferSize; i++ )
 800477a:	79bb      	ldrb	r3, [r7, #6]
 800477c:	3301      	adds	r3, #1
 800477e:	71bb      	strb	r3, [r7, #6]
 8004780:	79bb      	ldrb	r3, [r7, #6]
 8004782:	b29a      	uxth	r2, r3
 8004784:	4b5f      	ldr	r3, [pc, #380]	; (8004904 <main+0x2ac>)
 8004786:	881b      	ldrh	r3, [r3, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d3f0      	bcc.n	800476e <main+0x116>
            }
//            PRINTF("...PING\n");

//            DelayMs( 1 );
            Radio.Send( Buffer, BufferSize );
 800478c:	4b59      	ldr	r3, [pc, #356]	; (80048f4 <main+0x29c>)
 800478e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004790:	4a5c      	ldr	r2, [pc, #368]	; (8004904 <main+0x2ac>)
 8004792:	8812      	ldrh	r2, [r2, #0]
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	4611      	mov	r1, r2
 8004798:	485c      	ldr	r0, [pc, #368]	; (800490c <main+0x2b4>)
 800479a:	4798      	blx	r3
 800479c:	e051      	b.n	8004842 <main+0x1ea>
            }
            else if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 800479e:	2204      	movs	r2, #4
 80047a0:	495b      	ldr	r1, [pc, #364]	; (8004910 <main+0x2b8>)
 80047a2:	485a      	ldr	r0, [pc, #360]	; (800490c <main+0x2b4>)
 80047a4:	f000 fa67 	bl	8004c76 <strncmp>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <main+0x166>
            { // A master already exists then become a slave
              isMaster = false;
 80047ae:	2300      	movs	r3, #0
 80047b0:	71fb      	strb	r3, [r7, #7]
              //GpioWrite( &Led2, 1 ); // Set LED off
              Radio.Rx( RX_TIMEOUT_VALUE );
 80047b2:	4b50      	ldr	r3, [pc, #320]	; (80048f4 <main+0x29c>)
 80047b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ba:	4798      	blx	r3
 80047bc:	e041      	b.n	8004842 <main+0x1ea>
            }
            else // valid reception but neither a PING or a PONG message
            {    // Set device as master ans start again
              isMaster = true;
 80047be:	2301      	movs	r3, #1
 80047c0:	71fb      	strb	r3, [r7, #7]
              Radio.Rx( RX_TIMEOUT_VALUE );
 80047c2:	4b4c      	ldr	r3, [pc, #304]	; (80048f4 <main+0x29c>)
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047ca:	4798      	blx	r3
 80047cc:	e039      	b.n	8004842 <main+0x1ea>
            }
          }
        }
        else
        {
          if( BufferSize > 0 )
 80047ce:	4b4d      	ldr	r3, [pc, #308]	; (8004904 <main+0x2ac>)
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d035      	beq.n	8004842 <main+0x1ea>
          {
            if( strncmp( ( const char* )Buffer, ( const char* )PingMsg, 4 ) == 0 )
 80047d6:	2204      	movs	r2, #4
 80047d8:	494d      	ldr	r1, [pc, #308]	; (8004910 <main+0x2b8>)
 80047da:	484c      	ldr	r0, [pc, #304]	; (800490c <main+0x2b4>)
 80047dc:	f000 fa4b 	bl	8004c76 <strncmp>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d126      	bne.n	8004834 <main+0x1dc>
            {
              // Send the reply to the PONG string
              Buffer[0] = 'P';
 80047e6:	4b49      	ldr	r3, [pc, #292]	; (800490c <main+0x2b4>)
 80047e8:	2250      	movs	r2, #80	; 0x50
 80047ea:	701a      	strb	r2, [r3, #0]
              Buffer[1] = 'O';
 80047ec:	4b47      	ldr	r3, [pc, #284]	; (800490c <main+0x2b4>)
 80047ee:	224f      	movs	r2, #79	; 0x4f
 80047f0:	705a      	strb	r2, [r3, #1]
              Buffer[2] = 'N';
 80047f2:	4b46      	ldr	r3, [pc, #280]	; (800490c <main+0x2b4>)
 80047f4:	224e      	movs	r2, #78	; 0x4e
 80047f6:	709a      	strb	r2, [r3, #2]
              Buffer[3] = 'G';
 80047f8:	4b44      	ldr	r3, [pc, #272]	; (800490c <main+0x2b4>)
 80047fa:	2247      	movs	r2, #71	; 0x47
 80047fc:	70da      	strb	r2, [r3, #3]
              // We fill the buffer with numbers for the payload
              for( i = 4; i < BufferSize; i++ )
 80047fe:	2304      	movs	r3, #4
 8004800:	71bb      	strb	r3, [r7, #6]
 8004802:	e008      	b.n	8004816 <main+0x1be>
              {
                Buffer[i] = i - 4;
 8004804:	79bb      	ldrb	r3, [r7, #6]
 8004806:	79ba      	ldrb	r2, [r7, #6]
 8004808:	3a04      	subs	r2, #4
 800480a:	b2d1      	uxtb	r1, r2
 800480c:	4a3f      	ldr	r2, [pc, #252]	; (800490c <main+0x2b4>)
 800480e:	54d1      	strb	r1, [r2, r3]
              for( i = 4; i < BufferSize; i++ )
 8004810:	79bb      	ldrb	r3, [r7, #6]
 8004812:	3301      	adds	r3, #1
 8004814:	71bb      	strb	r3, [r7, #6]
 8004816:	79bb      	ldrb	r3, [r7, #6]
 8004818:	b29a      	uxth	r2, r3
 800481a:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <main+0x2ac>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d3f0      	bcc.n	8004804 <main+0x1ac>
              }
//              DelayMs( 1 );

              Radio.Send( Buffer, BufferSize );
 8004822:	4b34      	ldr	r3, [pc, #208]	; (80048f4 <main+0x29c>)
 8004824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004826:	4a37      	ldr	r2, [pc, #220]	; (8004904 <main+0x2ac>)
 8004828:	8812      	ldrh	r2, [r2, #0]
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	4611      	mov	r1, r2
 800482e:	4837      	ldr	r0, [pc, #220]	; (800490c <main+0x2b4>)
 8004830:	4798      	blx	r3
 8004832:	e006      	b.n	8004842 <main+0x1ea>
//              PRINTF("...PONG\n");
            }
            else // valid reception but not a PING as expected
            {    // Set device as master and start again
              isMaster = true;
 8004834:	2301      	movs	r3, #1
 8004836:	71fb      	strb	r3, [r7, #7]
              Radio.Rx( RX_TIMEOUT_VALUE );
 8004838:	4b2e      	ldr	r3, [pc, #184]	; (80048f4 <main+0x29c>)
 800483a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800483c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004840:	4798      	blx	r3
            }
         }
      }
      State = LOWPOWER;
 8004842:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <main+0x2a8>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
      break;
 8004848:	e045      	b.n	80048d6 <main+0x27e>
    case TX:
      // Indicates on a LED that we have sent a PING [Master]
      // Indicates on a LED that we have sent a PONG [Slave]
      //GpioWrite( &Led2, GpioRead( &Led2 ) ^ 1 );
      Radio.Rx( RX_TIMEOUT_VALUE );
 800484a:	4b2a      	ldr	r3, [pc, #168]	; (80048f4 <main+0x29c>)
 800484c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800484e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004852:	4798      	blx	r3
      State = LOWPOWER;
 8004854:	4b2a      	ldr	r3, [pc, #168]	; (8004900 <main+0x2a8>)
 8004856:	2200      	movs	r2, #0
 8004858:	701a      	strb	r2, [r3, #0]
      break;
 800485a:	e03c      	b.n	80048d6 <main+0x27e>
    case RX_TIMEOUT:
    case RX_ERROR:
      if( isMaster == true )
 800485c:	79fb      	ldrb	r3, [r7, #7]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d026      	beq.n	80048b0 <main+0x258>
      {
        // Send the next PING frame
        Buffer[0] = 'P';
 8004862:	4b2a      	ldr	r3, [pc, #168]	; (800490c <main+0x2b4>)
 8004864:	2250      	movs	r2, #80	; 0x50
 8004866:	701a      	strb	r2, [r3, #0]
        Buffer[1] = 'I';
 8004868:	4b28      	ldr	r3, [pc, #160]	; (800490c <main+0x2b4>)
 800486a:	2249      	movs	r2, #73	; 0x49
 800486c:	705a      	strb	r2, [r3, #1]
        Buffer[2] = 'N';
 800486e:	4b27      	ldr	r3, [pc, #156]	; (800490c <main+0x2b4>)
 8004870:	224e      	movs	r2, #78	; 0x4e
 8004872:	709a      	strb	r2, [r3, #2]
        Buffer[3] = 'G';
 8004874:	4b25      	ldr	r3, [pc, #148]	; (800490c <main+0x2b4>)
 8004876:	2247      	movs	r2, #71	; 0x47
 8004878:	70da      	strb	r2, [r3, #3]
        for( i = 4; i < BufferSize; i++ )
 800487a:	2304      	movs	r3, #4
 800487c:	71bb      	strb	r3, [r7, #6]
 800487e:	e008      	b.n	8004892 <main+0x23a>
        {
          Buffer[i] = i - 4;
 8004880:	79bb      	ldrb	r3, [r7, #6]
 8004882:	79ba      	ldrb	r2, [r7, #6]
 8004884:	3a04      	subs	r2, #4
 8004886:	b2d1      	uxtb	r1, r2
 8004888:	4a20      	ldr	r2, [pc, #128]	; (800490c <main+0x2b4>)
 800488a:	54d1      	strb	r1, [r2, r3]
        for( i = 4; i < BufferSize; i++ )
 800488c:	79bb      	ldrb	r3, [r7, #6]
 800488e:	3301      	adds	r3, #1
 8004890:	71bb      	strb	r3, [r7, #6]
 8004892:	79bb      	ldrb	r3, [r7, #6]
 8004894:	b29a      	uxth	r2, r3
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <main+0x2ac>)
 8004898:	881b      	ldrh	r3, [r3, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d3f0      	bcc.n	8004880 <main+0x228>
        }
//        DelayMs( 1 );
        Radio.Send( Buffer, BufferSize );
 800489e:	4b15      	ldr	r3, [pc, #84]	; (80048f4 <main+0x29c>)
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	4a18      	ldr	r2, [pc, #96]	; (8004904 <main+0x2ac>)
 80048a4:	8812      	ldrh	r2, [r2, #0]
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	4611      	mov	r1, r2
 80048aa:	4818      	ldr	r0, [pc, #96]	; (800490c <main+0x2b4>)
 80048ac:	4798      	blx	r3
 80048ae:	e004      	b.n	80048ba <main+0x262>
      }
      else
      {
        Radio.Rx( RX_TIMEOUT_VALUE );
 80048b0:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <main+0x29c>)
 80048b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048b8:	4798      	blx	r3
      }
      State = LOWPOWER;
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <main+0x2a8>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
      break;
 80048c0:	e009      	b.n	80048d6 <main+0x27e>
    case TX_TIMEOUT:
      Radio.Rx( RX_TIMEOUT_VALUE );
 80048c2:	4b0c      	ldr	r3, [pc, #48]	; (80048f4 <main+0x29c>)
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048ca:	4798      	blx	r3
      State = LOWPOWER;
 80048cc:	4b0c      	ldr	r3, [pc, #48]	; (8004900 <main+0x2a8>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
      break;
 80048d2:	e000      	b.n	80048d6 <main+0x27e>
    case LOWPOWER:
      default:
            // Set low power
      break;
 80048d4:	bf00      	nop
  __ASM volatile ("cpsid i" : : : "memory");
 80048d6:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 80048d8:	b662      	cpsie	i
    switch( State )
 80048da:	e716      	b.n	800470a <main+0xb2>
 80048dc:	20000150 	.word	0x20000150
 80048e0:	08004915 	.word	0x08004915
 80048e4:	08004931 	.word	0x08004931
 80048e8:	08004999 	.word	0x08004999
 80048ec:	080049b5 	.word	0x080049b5
 80048f0:	080049d1 	.word	0x080049d1
 80048f4:	08005034 	.word	0x08005034
 80048f8:	33bca100 	.word	0x33bca100
 80048fc:	002dc6c0 	.word	0x002dc6c0
 8004900:	2000014c 	.word	0x2000014c
 8004904:	20000020 	.word	0x20000020
 8004908:	080050a0 	.word	0x080050a0
 800490c:	2000029c 	.word	0x2000029c
 8004910:	08005098 	.word	0x08005098

08004914 <OnTxDone>:

  }
}

void OnTxDone( void )
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <OnTxDone+0x14>)
 800491a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800491c:	4798      	blx	r3
    State = TX;
 800491e:	4b03      	ldr	r3, [pc, #12]	; (800492c <OnTxDone+0x18>)
 8004920:	2204      	movs	r2, #4
 8004922:	701a      	strb	r2, [r3, #0]
//    PRINTF("OnTxDone\n");
}
 8004924:	bf00      	nop
 8004926:	bd80      	pop	{r7, pc}
 8004928:	08005034 	.word	0x08005034
 800492c:	2000014c 	.word	0x2000014c

08004930 <OnRxDone>:

void OnRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	4608      	mov	r0, r1
 800493a:	4611      	mov	r1, r2
 800493c:	461a      	mov	r2, r3
 800493e:	4603      	mov	r3, r0
 8004940:	817b      	strh	r3, [r7, #10]
 8004942:	460b      	mov	r3, r1
 8004944:	813b      	strh	r3, [r7, #8]
 8004946:	4613      	mov	r3, r2
 8004948:	71fb      	strb	r3, [r7, #7]
    Radio.Sleep( );
 800494a:	4b0d      	ldr	r3, [pc, #52]	; (8004980 <OnRxDone+0x50>)
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800494e:	4798      	blx	r3
    BufferSize = size;
 8004950:	4a0c      	ldr	r2, [pc, #48]	; (8004984 <OnRxDone+0x54>)
 8004952:	897b      	ldrh	r3, [r7, #10]
 8004954:	8013      	strh	r3, [r2, #0]
    memcpy( Buffer, payload, BufferSize );
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <OnRxDone+0x54>)
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	68f9      	ldr	r1, [r7, #12]
 800495e:	480a      	ldr	r0, [pc, #40]	; (8004988 <OnRxDone+0x58>)
 8004960:	f000 f976 	bl	8004c50 <memcpy>
    RssiValue = rssi;
 8004964:	893b      	ldrh	r3, [r7, #8]
 8004966:	b25a      	sxtb	r2, r3
 8004968:	4b08      	ldr	r3, [pc, #32]	; (800498c <OnRxDone+0x5c>)
 800496a:	701a      	strb	r2, [r3, #0]
    SnrValue = snr;
 800496c:	4a08      	ldr	r2, [pc, #32]	; (8004990 <OnRxDone+0x60>)
 800496e:	79fb      	ldrb	r3, [r7, #7]
 8004970:	7013      	strb	r3, [r2, #0]
    State = RX;
 8004972:	4b08      	ldr	r3, [pc, #32]	; (8004994 <OnRxDone+0x64>)
 8004974:	2201      	movs	r2, #1
 8004976:	701a      	strb	r2, [r3, #0]

//    PRINTF("OnRxDone\n");
//    PRINTF("RssiValue=%d dBm, SnrValue=%d\n", rssi, snr);
}
 8004978:	bf00      	nop
 800497a:	3710      	adds	r7, #16
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}
 8004980:	08005034 	.word	0x08005034
 8004984:	20000020 	.word	0x20000020
 8004988:	2000029c 	.word	0x2000029c
 800498c:	2000014d 	.word	0x2000014d
 8004990:	2000014e 	.word	0x2000014e
 8004994:	2000014c 	.word	0x2000014c

08004998 <OnTxTimeout>:

void OnTxTimeout( void )
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <OnTxTimeout+0x14>)
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	4798      	blx	r3
    State = TX_TIMEOUT;
 80049a2:	4b03      	ldr	r3, [pc, #12]	; (80049b0 <OnTxTimeout+0x18>)
 80049a4:	2205      	movs	r2, #5
 80049a6:	701a      	strb	r2, [r3, #0]

//    PRINTF("OnTxTimeout\n");
}
 80049a8:	bf00      	nop
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	08005034 	.word	0x08005034
 80049b0:	2000014c 	.word	0x2000014c

080049b4 <OnRxTimeout>:

void OnRxTimeout( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80049b8:	4b03      	ldr	r3, [pc, #12]	; (80049c8 <OnRxTimeout+0x14>)
 80049ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049bc:	4798      	blx	r3
    State = RX_TIMEOUT;
 80049be:	4b03      	ldr	r3, [pc, #12]	; (80049cc <OnRxTimeout+0x18>)
 80049c0:	2202      	movs	r2, #2
 80049c2:	701a      	strb	r2, [r3, #0]
//    PRINTF("OnRxTimeout\n");
}
 80049c4:	bf00      	nop
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	08005034 	.word	0x08005034
 80049cc:	2000014c 	.word	0x2000014c

080049d0 <OnRxError>:

void OnRxError( void )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
    Radio.Sleep( );
 80049d4:	4b03      	ldr	r3, [pc, #12]	; (80049e4 <OnRxError+0x14>)
 80049d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049d8:	4798      	blx	r3
    State = RX_ERROR;
 80049da:	4b03      	ldr	r3, [pc, #12]	; (80049e8 <OnRxError+0x18>)
 80049dc:	2203      	movs	r2, #3
 80049de:	701a      	strb	r2, [r3, #0]
//    PRINTF("OnRxError\n");
}
 80049e0:	bf00      	nop
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	08005034 	.word	0x08005034
 80049e8:	2000014c 	.word	0x2000014c

080049ec <SystemClock_Config>:
 *            Main regulator output voltage  = Scale2 mode
 *            Flash Latency(WS)              = 2
 * @param  None
 * @retval None
 */
void SystemClock_Config(void) {
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b094      	sub	sp, #80	; 0x50
 80049f0:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80049f2:	2300      	movs	r3, #0
 80049f4:	60bb      	str	r3, [r7, #8]
 80049f6:	4b24      	ldr	r3, [pc, #144]	; (8004a88 <SystemClock_Config+0x9c>)
 80049f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fa:	4a23      	ldr	r2, [pc, #140]	; (8004a88 <SystemClock_Config+0x9c>)
 80049fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a00:	6413      	str	r3, [r2, #64]	; 0x40
 8004a02:	4b21      	ldr	r3, [pc, #132]	; (8004a88 <SystemClock_Config+0x9c>)
 8004a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a0a:	60bb      	str	r3, [r7, #8]
 8004a0c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
	 clocked below the maximum system frequency, to update the voltage scaling value
	 regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a0e:	2300      	movs	r3, #0
 8004a10:	607b      	str	r3, [r7, #4]
 8004a12:	4b1e      	ldr	r3, [pc, #120]	; (8004a8c <SystemClock_Config+0xa0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <SystemClock_Config+0xa0>)
 8004a1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a20:	6013      	str	r3, [r2, #0]
 8004a22:	4b1a      	ldr	r3, [pc, #104]	; (8004a8c <SystemClock_Config+0xa0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a2a:	607b      	str	r3, [r7, #4]
 8004a2c:	687b      	ldr	r3, [r7, #4]

	/* Enable HSI Oscillator and activate PLL with HSI as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8004a36:	2310      	movs	r3, #16
 8004a38:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 16;
 8004a42:	2310      	movs	r3, #16
 8004a44:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 336;
 8004a46:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8004a4a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8004a4c:	2304      	movs	r3, #4
 8004a4e:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004a50:	2307      	movs	r3, #7
 8004a52:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004a54:	f107 030c 	add.w	r3, r7, #12
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f7fc fb4b 	bl	80010f4 <HAL_RCC_OscConfig>
		//Error_Handler();
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
	 clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK
 8004a5e:	230f      	movs	r3, #15
 8004a60:	63fb      	str	r3, [r7, #60]	; 0x3c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a62:	2302      	movs	r3, #2
 8004a64:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a66:	2300      	movs	r3, #0
 8004a68:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004a6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a6e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a70:	2300      	movs	r3, #0
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004a74:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fc fd7c 	bl	8001578 <HAL_RCC_ClockConfig>
		//Error_Handler();
	}
}
 8004a80:	bf00      	nop
 8004a82:	3750      	adds	r7, #80	; 0x50
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}
 8004a88:	40023800 	.word	0x40023800
 8004a8c:	40007000 	.word	0x40007000

08004a90 <SpiInOut>:
  hspi4.Init.CRCPolynomial = 10;
  HAL_SPI_Init(&hspi4);
}

uint16_t SpiInOut( Spi_t *obj, uint16_t outData )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b090      	sub	sp, #64	; 0x40
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	460b      	mov	r3, r1
 8004a9a:	807b      	strh	r3, [r7, #2]
	char buff[50];
    /* Send SPIy data */
    HAL_SPI_Transmit(&hspi1, outData, sizeof(outData), 1000);
 8004a9c:	887b      	ldrh	r3, [r7, #2]
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	480c      	ldr	r0, [pc, #48]	; (8004ad8 <SpiInOut+0x48>)
 8004aa8:	f7fc fefa 	bl	80018a0 <HAL_SPI_Transmit>
    while( HAL_SPI_GetState(&hspi1)  == HAL_SPI_STATE_RESET);
 8004aac:	bf00      	nop
 8004aae:	480a      	ldr	r0, [pc, #40]	; (8004ad8 <SpiInOut+0x48>)
 8004ab0:	f7fd fad5 	bl	800205e <HAL_SPI_GetState>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f9      	beq.n	8004aae <SpiInOut+0x1e>
    return HAL_SPI_Receive(&hspi1, buff, sizeof(buff), 1000);
 8004aba:	f107 010c 	add.w	r1, r7, #12
 8004abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ac2:	2232      	movs	r2, #50	; 0x32
 8004ac4:	4804      	ldr	r0, [pc, #16]	; (8004ad8 <SpiInOut+0x48>)
 8004ac6:	f7fd f81f 	bl	8001b08 <HAL_SPI_Receive>
 8004aca:	4603      	mov	r3, r0
 8004acc:	b29b      	uxth	r3, r3
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3740      	adds	r7, #64	; 0x40
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	2000038c 	.word	0x2000038c

08004adc <HAL_MspInit>:
#include "main.h"
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0

}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr

08004aea <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004aea:	b480      	push	{r7}
 8004aec:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004aee:	bf00      	nop
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004afc:	e7fe      	b.n	8004afc <HardFault_Handler+0x4>

08004afe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004afe:	b480      	push	{r7}
 8004b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b02:	e7fe      	b.n	8004b02 <MemManage_Handler+0x4>

08004b04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b08:	e7fe      	b.n	8004b08 <BusFault_Handler+0x4>

08004b0a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b0e:	e7fe      	b.n	8004b0e <UsageFault_Handler+0x4>

08004b10 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b10:	b480      	push	{r7}
 8004b12:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b14:	bf00      	nop
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr

08004b1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b22:	bf00      	nop
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b30:	bf00      	nop
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b3e:	f7fc f9bb 	bl	8000eb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b42:	bf00      	nop
 8004b44:	bd80      	pop	{r7, pc}
	...

08004b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b4c:	4b16      	ldr	r3, [pc, #88]	; (8004ba8 <SystemInit+0x60>)
 8004b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b52:	4a15      	ldr	r2, [pc, #84]	; (8004ba8 <SystemInit+0x60>)
 8004b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004b5c:	4b13      	ldr	r3, [pc, #76]	; (8004bac <SystemInit+0x64>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a12      	ldr	r2, [pc, #72]	; (8004bac <SystemInit+0x64>)
 8004b62:	f043 0301 	orr.w	r3, r3, #1
 8004b66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004b68:	4b10      	ldr	r3, [pc, #64]	; (8004bac <SystemInit+0x64>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <SystemInit+0x64>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <SystemInit+0x64>)
 8004b74:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004b78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <SystemInit+0x64>)
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <SystemInit+0x68>)
 8004b82:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004b84:	4b09      	ldr	r3, [pc, #36]	; (8004bac <SystemInit+0x64>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <SystemInit+0x64>)
 8004b8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004b90:	4b06      	ldr	r3, [pc, #24]	; (8004bac <SystemInit+0x64>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004b96:	4b04      	ldr	r3, [pc, #16]	; (8004ba8 <SystemInit+0x60>)
 8004b98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004b9c:	609a      	str	r2, [r3, #8]
#endif
}
 8004b9e:	bf00      	nop
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	e000ed00 	.word	0xe000ed00
 8004bac:	40023800 	.word	0x40023800
 8004bb0:	24003010 	.word	0x24003010

08004bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bb8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bba:	e003      	b.n	8004bc4 <LoopCopyDataInit>

08004bbc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	; (8004bf0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bbe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bc0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bc2:	3104      	adds	r1, #4

08004bc4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bc4:	480b      	ldr	r0, [pc, #44]	; (8004bf4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004bc8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004bcc:	d3f6      	bcc.n	8004bbc <CopyDataInit>
  ldr  r2, =_sbss
 8004bce:	4a0b      	ldr	r2, [pc, #44]	; (8004bfc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004bd0:	e002      	b.n	8004bd8 <LoopFillZerobss>

08004bd2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004bd2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004bd4:	f842 3b04 	str.w	r3, [r2], #4

08004bd8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bda:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bdc:	d3f9      	bcc.n	8004bd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004bde:	f7ff ffb3 	bl	8004b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004be2:	f000 f811 	bl	8004c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004be6:	f7ff fd37 	bl	8004658 <main>
  bx  lr    
 8004bea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004bec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004bf0:	080050c8 	.word	0x080050c8
  ldr  r0, =_sdata
 8004bf4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004bf8:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 8004bfc:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8004c00:	200003e4 	.word	0x200003e4

08004c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c04:	e7fe      	b.n	8004c04 <ADC_IRQHandler>
	...

08004c08 <__libc_init_array>:
 8004c08:	b570      	push	{r4, r5, r6, lr}
 8004c0a:	4e0d      	ldr	r6, [pc, #52]	; (8004c40 <__libc_init_array+0x38>)
 8004c0c:	4c0d      	ldr	r4, [pc, #52]	; (8004c44 <__libc_init_array+0x3c>)
 8004c0e:	1ba4      	subs	r4, r4, r6
 8004c10:	10a4      	asrs	r4, r4, #2
 8004c12:	2500      	movs	r5, #0
 8004c14:	42a5      	cmp	r5, r4
 8004c16:	d109      	bne.n	8004c2c <__libc_init_array+0x24>
 8004c18:	4e0b      	ldr	r6, [pc, #44]	; (8004c48 <__libc_init_array+0x40>)
 8004c1a:	4c0c      	ldr	r4, [pc, #48]	; (8004c4c <__libc_init_array+0x44>)
 8004c1c:	f000 f98e 	bl	8004f3c <_init>
 8004c20:	1ba4      	subs	r4, r4, r6
 8004c22:	10a4      	asrs	r4, r4, #2
 8004c24:	2500      	movs	r5, #0
 8004c26:	42a5      	cmp	r5, r4
 8004c28:	d105      	bne.n	8004c36 <__libc_init_array+0x2e>
 8004c2a:	bd70      	pop	{r4, r5, r6, pc}
 8004c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c30:	4798      	blx	r3
 8004c32:	3501      	adds	r5, #1
 8004c34:	e7ee      	b.n	8004c14 <__libc_init_array+0xc>
 8004c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004c3a:	4798      	blx	r3
 8004c3c:	3501      	adds	r5, #1
 8004c3e:	e7f2      	b.n	8004c26 <__libc_init_array+0x1e>
 8004c40:	080050c0 	.word	0x080050c0
 8004c44:	080050c0 	.word	0x080050c0
 8004c48:	080050c0 	.word	0x080050c0
 8004c4c:	080050c4 	.word	0x080050c4

08004c50 <memcpy>:
 8004c50:	b510      	push	{r4, lr}
 8004c52:	1e43      	subs	r3, r0, #1
 8004c54:	440a      	add	r2, r1
 8004c56:	4291      	cmp	r1, r2
 8004c58:	d100      	bne.n	8004c5c <memcpy+0xc>
 8004c5a:	bd10      	pop	{r4, pc}
 8004c5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c64:	e7f7      	b.n	8004c56 <memcpy+0x6>

08004c66 <memset>:
 8004c66:	4402      	add	r2, r0
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d100      	bne.n	8004c70 <memset+0xa>
 8004c6e:	4770      	bx	lr
 8004c70:	f803 1b01 	strb.w	r1, [r3], #1
 8004c74:	e7f9      	b.n	8004c6a <memset+0x4>

08004c76 <strncmp>:
 8004c76:	b510      	push	{r4, lr}
 8004c78:	b16a      	cbz	r2, 8004c96 <strncmp+0x20>
 8004c7a:	3901      	subs	r1, #1
 8004c7c:	1884      	adds	r4, r0, r2
 8004c7e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004c82:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d103      	bne.n	8004c92 <strncmp+0x1c>
 8004c8a:	42a0      	cmp	r0, r4
 8004c8c:	d001      	beq.n	8004c92 <strncmp+0x1c>
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1f5      	bne.n	8004c7e <strncmp+0x8>
 8004c92:	1a98      	subs	r0, r3, r2
 8004c94:	bd10      	pop	{r4, pc}
 8004c96:	4610      	mov	r0, r2
 8004c98:	e7fc      	b.n	8004c94 <strncmp+0x1e>
 8004c9a:	0000      	movs	r0, r0
 8004c9c:	0000      	movs	r0, r0
	...

08004ca0 <ceil>:
 8004ca0:	ec51 0b10 	vmov	r0, r1, d0
 8004ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ca8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004cac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004cb0:	2e13      	cmp	r6, #19
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	ee10 5a10 	vmov	r5, s0
 8004cb8:	4680      	mov	r8, r0
 8004cba:	dc30      	bgt.n	8004d1e <ceil+0x7e>
 8004cbc:	2e00      	cmp	r6, #0
 8004cbe:	da12      	bge.n	8004ce6 <ceil+0x46>
 8004cc0:	a333      	add	r3, pc, #204	; (adr r3, 8004d90 <ceil+0xf0>)
 8004cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc6:	f7fb fa8d 	bl	80001e4 <__adddf3>
 8004cca:	2200      	movs	r2, #0
 8004ccc:	2300      	movs	r3, #0
 8004cce:	f7fb fecf 	bl	8000a70 <__aeabi_dcmpgt>
 8004cd2:	b128      	cbz	r0, 8004ce0 <ceil+0x40>
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	db55      	blt.n	8004d84 <ceil+0xe4>
 8004cd8:	432c      	orrs	r4, r5
 8004cda:	d057      	beq.n	8004d8c <ceil+0xec>
 8004cdc:	4c2e      	ldr	r4, [pc, #184]	; (8004d98 <ceil+0xf8>)
 8004cde:	2500      	movs	r5, #0
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	e025      	b.n	8004d32 <ceil+0x92>
 8004ce6:	4f2d      	ldr	r7, [pc, #180]	; (8004d9c <ceil+0xfc>)
 8004ce8:	4137      	asrs	r7, r6
 8004cea:	ea01 0307 	and.w	r3, r1, r7
 8004cee:	4303      	orrs	r3, r0
 8004cf0:	d01f      	beq.n	8004d32 <ceil+0x92>
 8004cf2:	a327      	add	r3, pc, #156	; (adr r3, 8004d90 <ceil+0xf0>)
 8004cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf8:	f7fb fa74 	bl	80001e4 <__adddf3>
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2300      	movs	r3, #0
 8004d00:	f7fb feb6 	bl	8000a70 <__aeabi_dcmpgt>
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d0eb      	beq.n	8004ce0 <ceil+0x40>
 8004d08:	2c00      	cmp	r4, #0
 8004d0a:	bfc2      	ittt	gt
 8004d0c:	f44f 1380 	movgt.w	r3, #1048576	; 0x100000
 8004d10:	fa43 f606 	asrgt.w	r6, r3, r6
 8004d14:	19a4      	addgt	r4, r4, r6
 8004d16:	ea24 0407 	bic.w	r4, r4, r7
 8004d1a:	2500      	movs	r5, #0
 8004d1c:	e7e0      	b.n	8004ce0 <ceil+0x40>
 8004d1e:	2e33      	cmp	r6, #51	; 0x33
 8004d20:	dd0b      	ble.n	8004d3a <ceil+0x9a>
 8004d22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004d26:	d104      	bne.n	8004d32 <ceil+0x92>
 8004d28:	ee10 2a10 	vmov	r2, s0
 8004d2c:	460b      	mov	r3, r1
 8004d2e:	f7fb fa59 	bl	80001e4 <__adddf3>
 8004d32:	ec41 0b10 	vmov	d0, r0, r1
 8004d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d3a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d42:	fa23 f707 	lsr.w	r7, r3, r7
 8004d46:	4207      	tst	r7, r0
 8004d48:	d0f3      	beq.n	8004d32 <ceil+0x92>
 8004d4a:	a311      	add	r3, pc, #68	; (adr r3, 8004d90 <ceil+0xf0>)
 8004d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d50:	f7fb fa48 	bl	80001e4 <__adddf3>
 8004d54:	2200      	movs	r2, #0
 8004d56:	2300      	movs	r3, #0
 8004d58:	f7fb fe8a 	bl	8000a70 <__aeabi_dcmpgt>
 8004d5c:	2800      	cmp	r0, #0
 8004d5e:	d0bf      	beq.n	8004ce0 <ceil+0x40>
 8004d60:	2c00      	cmp	r4, #0
 8004d62:	dd02      	ble.n	8004d6a <ceil+0xca>
 8004d64:	2e14      	cmp	r6, #20
 8004d66:	d103      	bne.n	8004d70 <ceil+0xd0>
 8004d68:	3401      	adds	r4, #1
 8004d6a:	ea25 0507 	bic.w	r5, r5, r7
 8004d6e:	e7b7      	b.n	8004ce0 <ceil+0x40>
 8004d70:	2301      	movs	r3, #1
 8004d72:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004d76:	fa03 f606 	lsl.w	r6, r3, r6
 8004d7a:	4435      	add	r5, r6
 8004d7c:	4545      	cmp	r5, r8
 8004d7e:	bf38      	it	cc
 8004d80:	18e4      	addcc	r4, r4, r3
 8004d82:	e7f2      	b.n	8004d6a <ceil+0xca>
 8004d84:	2500      	movs	r5, #0
 8004d86:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004d8a:	e7a9      	b.n	8004ce0 <ceil+0x40>
 8004d8c:	4625      	mov	r5, r4
 8004d8e:	e7a7      	b.n	8004ce0 <ceil+0x40>
 8004d90:	8800759c 	.word	0x8800759c
 8004d94:	7e37e43c 	.word	0x7e37e43c
 8004d98:	3ff00000 	.word	0x3ff00000
 8004d9c:	000fffff 	.word	0x000fffff

08004da0 <floor>:
 8004da0:	ec51 0b10 	vmov	r0, r1, d0
 8004da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004dac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004db0:	2e13      	cmp	r6, #19
 8004db2:	460c      	mov	r4, r1
 8004db4:	ee10 5a10 	vmov	r5, s0
 8004db8:	4680      	mov	r8, r0
 8004dba:	dc34      	bgt.n	8004e26 <floor+0x86>
 8004dbc:	2e00      	cmp	r6, #0
 8004dbe:	da16      	bge.n	8004dee <floor+0x4e>
 8004dc0:	a335      	add	r3, pc, #212	; (adr r3, 8004e98 <floor+0xf8>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fa0d 	bl	80001e4 <__adddf3>
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2300      	movs	r3, #0
 8004dce:	f7fb fe4f 	bl	8000a70 <__aeabi_dcmpgt>
 8004dd2:	b148      	cbz	r0, 8004de8 <floor+0x48>
 8004dd4:	2c00      	cmp	r4, #0
 8004dd6:	da59      	bge.n	8004e8c <floor+0xec>
 8004dd8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004ddc:	4a30      	ldr	r2, [pc, #192]	; (8004ea0 <floor+0x100>)
 8004dde:	432b      	orrs	r3, r5
 8004de0:	2500      	movs	r5, #0
 8004de2:	42ab      	cmp	r3, r5
 8004de4:	bf18      	it	ne
 8004de6:	4614      	movne	r4, r2
 8004de8:	4621      	mov	r1, r4
 8004dea:	4628      	mov	r0, r5
 8004dec:	e025      	b.n	8004e3a <floor+0x9a>
 8004dee:	4f2d      	ldr	r7, [pc, #180]	; (8004ea4 <floor+0x104>)
 8004df0:	4137      	asrs	r7, r6
 8004df2:	ea01 0307 	and.w	r3, r1, r7
 8004df6:	4303      	orrs	r3, r0
 8004df8:	d01f      	beq.n	8004e3a <floor+0x9a>
 8004dfa:	a327      	add	r3, pc, #156	; (adr r3, 8004e98 <floor+0xf8>)
 8004dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e00:	f7fb f9f0 	bl	80001e4 <__adddf3>
 8004e04:	2200      	movs	r2, #0
 8004e06:	2300      	movs	r3, #0
 8004e08:	f7fb fe32 	bl	8000a70 <__aeabi_dcmpgt>
 8004e0c:	2800      	cmp	r0, #0
 8004e0e:	d0eb      	beq.n	8004de8 <floor+0x48>
 8004e10:	2c00      	cmp	r4, #0
 8004e12:	bfbe      	ittt	lt
 8004e14:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004e18:	fa43 f606 	asrlt.w	r6, r3, r6
 8004e1c:	19a4      	addlt	r4, r4, r6
 8004e1e:	ea24 0407 	bic.w	r4, r4, r7
 8004e22:	2500      	movs	r5, #0
 8004e24:	e7e0      	b.n	8004de8 <floor+0x48>
 8004e26:	2e33      	cmp	r6, #51	; 0x33
 8004e28:	dd0b      	ble.n	8004e42 <floor+0xa2>
 8004e2a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004e2e:	d104      	bne.n	8004e3a <floor+0x9a>
 8004e30:	ee10 2a10 	vmov	r2, s0
 8004e34:	460b      	mov	r3, r1
 8004e36:	f7fb f9d5 	bl	80001e4 <__adddf3>
 8004e3a:	ec41 0b10 	vmov	d0, r0, r1
 8004e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e42:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004e46:	f04f 33ff 	mov.w	r3, #4294967295
 8004e4a:	fa23 f707 	lsr.w	r7, r3, r7
 8004e4e:	4207      	tst	r7, r0
 8004e50:	d0f3      	beq.n	8004e3a <floor+0x9a>
 8004e52:	a311      	add	r3, pc, #68	; (adr r3, 8004e98 <floor+0xf8>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	f7fb f9c4 	bl	80001e4 <__adddf3>
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2300      	movs	r3, #0
 8004e60:	f7fb fe06 	bl	8000a70 <__aeabi_dcmpgt>
 8004e64:	2800      	cmp	r0, #0
 8004e66:	d0bf      	beq.n	8004de8 <floor+0x48>
 8004e68:	2c00      	cmp	r4, #0
 8004e6a:	da02      	bge.n	8004e72 <floor+0xd2>
 8004e6c:	2e14      	cmp	r6, #20
 8004e6e:	d103      	bne.n	8004e78 <floor+0xd8>
 8004e70:	3401      	adds	r4, #1
 8004e72:	ea25 0507 	bic.w	r5, r5, r7
 8004e76:	e7b7      	b.n	8004de8 <floor+0x48>
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004e7e:	fa03 f606 	lsl.w	r6, r3, r6
 8004e82:	4435      	add	r5, r6
 8004e84:	4545      	cmp	r5, r8
 8004e86:	bf38      	it	cc
 8004e88:	18e4      	addcc	r4, r4, r3
 8004e8a:	e7f2      	b.n	8004e72 <floor+0xd2>
 8004e8c:	2500      	movs	r5, #0
 8004e8e:	462c      	mov	r4, r5
 8004e90:	e7aa      	b.n	8004de8 <floor+0x48>
 8004e92:	bf00      	nop
 8004e94:	f3af 8000 	nop.w
 8004e98:	8800759c 	.word	0x8800759c
 8004e9c:	7e37e43c 	.word	0x7e37e43c
 8004ea0:	bff00000 	.word	0xbff00000
 8004ea4:	000fffff 	.word	0x000fffff

08004ea8 <round>:
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	ec57 6b10 	vmov	r6, r7, d0
 8004eae:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8004eb2:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8004eb6:	2c13      	cmp	r4, #19
 8004eb8:	463b      	mov	r3, r7
 8004eba:	463d      	mov	r5, r7
 8004ebc:	dc17      	bgt.n	8004eee <round+0x46>
 8004ebe:	2c00      	cmp	r4, #0
 8004ec0:	da09      	bge.n	8004ed6 <round+0x2e>
 8004ec2:	3401      	adds	r4, #1
 8004ec4:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8004ec8:	d103      	bne.n	8004ed2 <round+0x2a>
 8004eca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004ece:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	e02c      	b.n	8004f30 <round+0x88>
 8004ed6:	4a18      	ldr	r2, [pc, #96]	; (8004f38 <round+0x90>)
 8004ed8:	4122      	asrs	r2, r4
 8004eda:	4217      	tst	r7, r2
 8004edc:	d100      	bne.n	8004ee0 <round+0x38>
 8004ede:	b19e      	cbz	r6, 8004f08 <round+0x60>
 8004ee0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004ee4:	4123      	asrs	r3, r4
 8004ee6:	442b      	add	r3, r5
 8004ee8:	ea23 0302 	bic.w	r3, r3, r2
 8004eec:	e7f1      	b.n	8004ed2 <round+0x2a>
 8004eee:	2c33      	cmp	r4, #51	; 0x33
 8004ef0:	dd0d      	ble.n	8004f0e <round+0x66>
 8004ef2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8004ef6:	d107      	bne.n	8004f08 <round+0x60>
 8004ef8:	4630      	mov	r0, r6
 8004efa:	4639      	mov	r1, r7
 8004efc:	ee10 2a10 	vmov	r2, s0
 8004f00:	f7fb f970 	bl	80001e4 <__adddf3>
 8004f04:	4606      	mov	r6, r0
 8004f06:	460f      	mov	r7, r1
 8004f08:	ec47 6b10 	vmov	d0, r6, r7
 8004f0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f0e:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 8004f12:	f04f 30ff 	mov.w	r0, #4294967295
 8004f16:	40d0      	lsrs	r0, r2
 8004f18:	4206      	tst	r6, r0
 8004f1a:	d0f5      	beq.n	8004f08 <round+0x60>
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8004f22:	fa02 f404 	lsl.w	r4, r2, r4
 8004f26:	1931      	adds	r1, r6, r4
 8004f28:	bf28      	it	cs
 8004f2a:	189b      	addcs	r3, r3, r2
 8004f2c:	ea21 0100 	bic.w	r1, r1, r0
 8004f30:	461f      	mov	r7, r3
 8004f32:	460e      	mov	r6, r1
 8004f34:	e7e8      	b.n	8004f08 <round+0x60>
 8004f36:	bf00      	nop
 8004f38:	000fffff 	.word	0x000fffff

08004f3c <_init>:
 8004f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3e:	bf00      	nop
 8004f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f42:	bc08      	pop	{r3}
 8004f44:	469e      	mov	lr, r3
 8004f46:	4770      	bx	lr

08004f48 <_fini>:
 8004f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f4a:	bf00      	nop
 8004f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4e:	bc08      	pop	{r3}
 8004f50:	469e      	mov	lr, r3
 8004f52:	4770      	bx	lr
